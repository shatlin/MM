// <auto-generated />
using System;
using MM.ClientModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MM.Migrations.ClientDb
{
    [DbContext(typeof(ClientDbContext))]
    partial class ClientDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MM.ClientModels.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AccountType");
                });

            modelBuilder.Entity("MM.ClientModels.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<string>("BuidlingName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ComplexName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Gpscoordinates")
                        .HasColumnName("GPSCoordinates")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PrimaryContactNo")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PrimaryEmail")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("SecondaryContactNo")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("SecondaryEmail")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("MM.ClientModels.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AddressType");
                });

            modelBuilder.Entity("MM.ClientModels.Affliation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Affliation");
                });

            modelBuilder.Entity("MM.ClientModels.BankingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("RoutingCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("BankingDetail");
                });

            modelBuilder.Entity("MM.ClientModels.Billing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommentsForPayer")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<DateTime?>("PaymentDueDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentGatewayId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentItem")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PaymentGatewayId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("Billing");
                });

            modelBuilder.Entity("MM.ClientModels.BillingCommunication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BillingId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Reminder1ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Reminder1Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Reminder1SentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Reminder2ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Reminder2Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Reminder2SentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Reminder3ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Reminder3Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Reminder3SentDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("BillingCommunication");
                });

            modelBuilder.Entity("MM.ClientModels.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("MM.ClientModels.ClientOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AgreedToTerms")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ClientTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("CurrencyDecimalPlaces")
                        .HasColumnType("int");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("DateSettingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("TimeFormatId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeZoneId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DateSettingId");

                    b.HasIndex("TimeFormatId");

                    b.HasIndex("TimeZoneId");

                    b.ToTable("ClientOrganization");
                });

            modelBuilder.Entity("MM.ClientModels.ClientPlanHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BillingUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsCurrentPlan")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int>("PlanDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BillingUserId");

                    b.ToTable("ClientPlanHistory");
                });

            modelBuilder.Entity("MM.ClientModels.ClientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ClientType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 745, DateTimeKind.Local).AddTicks(7171),
                            Description = "Individual",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 748, DateTimeKind.Local).AddTicks(1906),
                            Name = "Individual"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 748, DateTimeKind.Local).AddTicks(3322),
                            Description = "Organization",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 748, DateTimeKind.Local).AddTicks(3352),
                            Name = "Organization"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.ClientUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("BillingContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("DesignationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<bool>("EmailActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInternalUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("PrimaryContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ReferralTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("TermsAccepted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DesignationId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ReferralTypeId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TitleId");

                    b.ToTable("ClientUser");
                });

            modelBuilder.Entity("MM.ClientModels.CommunicationPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CommunicationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("PreferredTimeFrom")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan?>("PreferredTimeTo")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("CommunicationTypeId");

                    b.ToTable("CommunicationPreference");
                });

            modelBuilder.Entity("MM.ClientModels.CommunicationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CommunicationType");
                });

            modelBuilder.Entity("MM.ClientModels.CorrespondenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CorrespondenceType");
                });

            modelBuilder.Entity("MM.ClientModels.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(5) CHARACTER SET utf8mb4")
                        .HasMaxLength(5);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "AF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(3704),
                            Description = "Afghanistan",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(4846),
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = 2,
                            Code = "AL",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(5960),
                            Description = "Albania",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(5981),
                            Name = "Albania"
                        },
                        new
                        {
                            Id = 3,
                            Code = "DZ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6016),
                            Description = "Algeria",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6018),
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = 4,
                            Code = "AS",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6023),
                            Description = "American Samoa",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6024),
                            Name = "American Samoa"
                        },
                        new
                        {
                            Id = 5,
                            Code = "AD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6030),
                            Description = "Andorra",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6032),
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = 6,
                            Code = "AO",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6036),
                            Description = "Angola",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6041),
                            Name = "Angola"
                        },
                        new
                        {
                            Id = 7,
                            Code = "AI",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6046),
                            Description = "Anguilla",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6048),
                            Name = "Anguilla"
                        },
                        new
                        {
                            Id = 8,
                            Code = "AQ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6051),
                            Description = "Antarctica",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6053),
                            Name = "Antarctica"
                        },
                        new
                        {
                            Id = 9,
                            Code = "AG",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6057),
                            Description = "Antigua and Barbuda",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6059),
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = 10,
                            Code = "AR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6063),
                            Description = "Argentina",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6064),
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 11,
                            Code = "AM",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6069),
                            Description = "Armenia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6071),
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = 12,
                            Code = "AW",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6075),
                            Description = "Aruba",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6077),
                            Name = "Aruba"
                        },
                        new
                        {
                            Id = 13,
                            Code = "AU",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6080),
                            Description = "Australia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6082),
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 14,
                            Code = "AT",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6086),
                            Description = "Austria",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6088),
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 15,
                            Code = "AZ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6157),
                            Description = "Azerbaijan",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6159),
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = 16,
                            Code = "BS",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6163),
                            Description = "Bahamas (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6165),
                            Name = "Bahamas (the)"
                        },
                        new
                        {
                            Id = 17,
                            Code = "BH",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6168),
                            Description = "Bahrain",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6174),
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = 18,
                            Code = "BD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6177),
                            Description = "Bangladesh",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6179),
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = 19,
                            Code = "BB",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6184),
                            Description = "Barbados",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6185),
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = 20,
                            Code = "BY",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6190),
                            Description = "Belarus",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6191),
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = 21,
                            Code = "BE",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6195),
                            Description = "Belgium",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6197),
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 22,
                            Code = "BZ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6200),
                            Description = "Belize",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6202),
                            Name = "Belize"
                        },
                        new
                        {
                            Id = 23,
                            Code = "BJ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6207),
                            Description = "Benin",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6209),
                            Name = "Benin"
                        },
                        new
                        {
                            Id = 24,
                            Code = "BM",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6213),
                            Description = "Bermuda",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6214),
                            Name = "Bermuda"
                        },
                        new
                        {
                            Id = 25,
                            Code = "BT",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6218),
                            Description = "Bhutan",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6220),
                            Name = "Bhutan"
                        },
                        new
                        {
                            Id = 26,
                            Code = "BO",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6223),
                            Description = "Bolivia (Plurinational State of)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6225),
                            Name = "Bolivia (Plurinational State of)"
                        },
                        new
                        {
                            Id = 27,
                            Code = "BQ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6229),
                            Description = "Bonaire, Sint Eustatius and Saba",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6231),
                            Name = "Bonaire, Sint Eustatius and Saba"
                        },
                        new
                        {
                            Id = 28,
                            Code = "BA",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6235),
                            Description = "Bosnia and Herzegovina",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6237),
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = 29,
                            Code = "BW",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6245),
                            Description = "Botswana",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6247),
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = 30,
                            Code = "BV",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6250),
                            Description = "Bouvet Island",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6252),
                            Name = "Bouvet Island"
                        },
                        new
                        {
                            Id = 31,
                            Code = "BR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6258),
                            Description = "Brazil",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6259),
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = 32,
                            Code = "IO",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6263),
                            Description = "British Indian Ocean Territory (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6265),
                            Name = "British Indian Ocean Territory (the)"
                        },
                        new
                        {
                            Id = 33,
                            Code = "BN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6269),
                            Description = "Brunei Darussalam",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6270),
                            Name = "Brunei Darussalam"
                        },
                        new
                        {
                            Id = 34,
                            Code = "BG",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6274),
                            Description = "Bulgaria",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6276),
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 35,
                            Code = "BF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6280),
                            Description = "Burkina Faso",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6281),
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            Id = 36,
                            Code = "BI",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6285),
                            Description = "Burundi",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6287),
                            Name = "Burundi"
                        },
                        new
                        {
                            Id = 37,
                            Code = "CV",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6290),
                            Description = "Cabo Verde",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6292),
                            Name = "Cabo Verde"
                        },
                        new
                        {
                            Id = 38,
                            Code = "KH",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6296),
                            Description = "Cambodia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6297),
                            Name = "Cambodia"
                        },
                        new
                        {
                            Id = 39,
                            Code = "CM",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6301),
                            Description = "Cameroon",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6303),
                            Name = "Cameroon"
                        },
                        new
                        {
                            Id = 40,
                            Code = "CA",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6311),
                            Description = "Canada",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6313),
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 41,
                            Code = "KY",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6316),
                            Description = "Cayman Islands (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6318),
                            Name = "Cayman Islands (the)"
                        },
                        new
                        {
                            Id = 42,
                            Code = "CF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6322),
                            Description = "Central African Republic (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6323),
                            Name = "Central African Republic (the)"
                        },
                        new
                        {
                            Id = 43,
                            Code = "TD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6327),
                            Description = "Chad",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6329),
                            Name = "Chad"
                        },
                        new
                        {
                            Id = 44,
                            Code = "CL",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6333),
                            Description = "Chile",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6334),
                            Name = "Chile"
                        },
                        new
                        {
                            Id = 45,
                            Code = "CN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6338),
                            Description = "China",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6340),
                            Name = "China"
                        },
                        new
                        {
                            Id = 46,
                            Code = "CX",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6343),
                            Description = "Christmas Island",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6345),
                            Name = "Christmas Island"
                        },
                        new
                        {
                            Id = 47,
                            Code = "CC",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6349),
                            Description = "Cocos (Keeling) Islands (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6351),
                            Name = "Cocos (Keeling) Islands (the)"
                        },
                        new
                        {
                            Id = 48,
                            Code = "CO",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6354),
                            Description = "Colombia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6356),
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = 49,
                            Code = "KM",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6376),
                            Description = "Comoros (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6378),
                            Name = "Comoros (the)"
                        },
                        new
                        {
                            Id = 50,
                            Code = "CD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6382),
                            Description = "Congo (the Democratic Republic of the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6384),
                            Name = "Congo (the Democratic Republic of the)"
                        },
                        new
                        {
                            Id = 51,
                            Code = "CG",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6392),
                            Description = "Congo (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6394),
                            Name = "Congo (the)"
                        },
                        new
                        {
                            Id = 52,
                            Code = "CK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6397),
                            Description = "Cook Islands (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6399),
                            Name = "Cook Islands (the)"
                        },
                        new
                        {
                            Id = 53,
                            Code = "CR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6403),
                            Description = "Costa Rica",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6405),
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = 54,
                            Code = "HR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6408),
                            Description = "Croatia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6410),
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = 55,
                            Code = "CU",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6414),
                            Description = "Cuba",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6416),
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = 56,
                            Code = "CW",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6419),
                            Description = "Curaçao",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6421),
                            Name = "Curaçao"
                        },
                        new
                        {
                            Id = 57,
                            Code = "CY",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6425),
                            Description = "Cyprus",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6426),
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = 58,
                            Code = "CZ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6430),
                            Description = "Czechia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6432),
                            Name = "Czechia"
                        },
                        new
                        {
                            Id = 59,
                            Code = "CI",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6436),
                            Description = "Côte d'Ivoire",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6437),
                            Name = "Côte d'Ivoire"
                        },
                        new
                        {
                            Id = 60,
                            Code = "DK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6441),
                            Description = "Denmark",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6442),
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 61,
                            Code = "DJ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6446),
                            Description = "Djibouti",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6448),
                            Name = "Djibouti"
                        },
                        new
                        {
                            Id = 62,
                            Code = "DM",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6451),
                            Description = "Dominica",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6457),
                            Name = "Dominica"
                        },
                        new
                        {
                            Id = 63,
                            Code = "DO",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6460),
                            Description = "Dominican Republic (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6463),
                            Name = "Dominican Republic (the)"
                        },
                        new
                        {
                            Id = 64,
                            Code = "EC",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6466),
                            Description = "Ecuador",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6468),
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = 65,
                            Code = "EG",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6471),
                            Description = "Egypt",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6473),
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 66,
                            Code = "SV",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6477),
                            Description = "El Salvador",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6478),
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = 67,
                            Code = "GQ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6482),
                            Description = "Equatorial Guinea",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6484),
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = 68,
                            Code = "ER",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6487),
                            Description = "Eritrea",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6489),
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = 69,
                            Code = "EE",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6493),
                            Description = "Estonia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6494),
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = 70,
                            Code = "SZ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6498),
                            Description = "Eswatini",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6500),
                            Name = "Eswatini"
                        },
                        new
                        {
                            Id = 71,
                            Code = "ET",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6503),
                            Description = "Ethiopia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6505),
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = 72,
                            Code = "FK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6509),
                            Description = "Falkland Islands (the) [Malvinas]",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6510),
                            Name = "Falkland Islands (the) [Malvinas]"
                        },
                        new
                        {
                            Id = 73,
                            Code = "FO",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6514),
                            Description = "Faroe Islands (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6520),
                            Name = "Faroe Islands (the)"
                        },
                        new
                        {
                            Id = 74,
                            Code = "FJ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6523),
                            Description = "Fiji",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6525),
                            Name = "Fiji"
                        },
                        new
                        {
                            Id = 75,
                            Code = "FI",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6528),
                            Description = "Finland",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6530),
                            Name = "Finland"
                        },
                        new
                        {
                            Id = 76,
                            Code = "FR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6534),
                            Description = "France",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6535),
                            Name = "France"
                        },
                        new
                        {
                            Id = 77,
                            Code = "GF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6539),
                            Description = "French Guiana",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6541),
                            Name = "French Guiana"
                        },
                        new
                        {
                            Id = 78,
                            Code = "PF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6544),
                            Description = "French Polynesia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6546),
                            Name = "French Polynesia"
                        },
                        new
                        {
                            Id = 79,
                            Code = "TF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6550),
                            Description = "French Southern Territories (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6551),
                            Name = "French Southern Territories (the)"
                        },
                        new
                        {
                            Id = 80,
                            Code = "GA",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6555),
                            Description = "Gabon",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6557),
                            Name = "Gabon"
                        },
                        new
                        {
                            Id = 81,
                            Code = "GM",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6560),
                            Description = "Gambia (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6562),
                            Name = "Gambia (the)"
                        },
                        new
                        {
                            Id = 82,
                            Code = "GE",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6566),
                            Description = "Georgia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6568),
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 83,
                            Code = "DE",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6586),
                            Description = "Germany",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6588),
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 84,
                            Code = "GH",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6592),
                            Description = "Ghana",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6594),
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = 85,
                            Code = "GI",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6601),
                            Description = "Gibraltar",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6603),
                            Name = "Gibraltar"
                        },
                        new
                        {
                            Id = 86,
                            Code = "GR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6606),
                            Description = "Greece",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6608),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 87,
                            Code = "GL",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6612),
                            Description = "Greenland",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6613),
                            Name = "Greenland"
                        },
                        new
                        {
                            Id = 88,
                            Code = "GD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6617),
                            Description = "Grenada",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6619),
                            Name = "Grenada"
                        },
                        new
                        {
                            Id = 89,
                            Code = "GP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6622),
                            Description = "Guadeloupe",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6624),
                            Name = "Guadeloupe"
                        },
                        new
                        {
                            Id = 90,
                            Code = "GU",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6627),
                            Description = "Guam",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6629),
                            Name = "Guam"
                        },
                        new
                        {
                            Id = 91,
                            Code = "GT",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6633),
                            Description = "Guatemala",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6635),
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = 92,
                            Code = "GG",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6638),
                            Description = "Guernsey",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6640),
                            Name = "Guernsey"
                        },
                        new
                        {
                            Id = 93,
                            Code = "GN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6644),
                            Description = "Guinea",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6646),
                            Name = "Guinea"
                        },
                        new
                        {
                            Id = 94,
                            Code = "GW",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6649),
                            Description = "Guinea-Bissau",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6651),
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            Id = 95,
                            Code = "GY",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6655),
                            Description = "Guyana",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6656),
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = 96,
                            Code = "HT",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6664),
                            Description = "Haiti",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6666),
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = 97,
                            Code = "HM",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6670),
                            Description = "Heard Island and McDonald Islands",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6672),
                            Name = "Heard Island and McDonald Islands"
                        },
                        new
                        {
                            Id = 98,
                            Code = "VA",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6676),
                            Description = "Holy See (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6678),
                            Name = "Holy See (the)"
                        },
                        new
                        {
                            Id = 99,
                            Code = "HN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6681),
                            Description = "Honduras",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6683),
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = 100,
                            Code = "HK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6687),
                            Description = "Hong Kong",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6688),
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = 101,
                            Code = "HU",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6692),
                            Description = "Hungary",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6694),
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = 102,
                            Code = "IS",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6697),
                            Description = "Iceland",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6699),
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = 103,
                            Code = "IN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6703),
                            Description = "India",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6705),
                            Name = "India"
                        },
                        new
                        {
                            Id = 104,
                            Code = "ID",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6709),
                            Description = "Indonesia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6710),
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = 105,
                            Code = "IR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6714),
                            Description = "Iran (Islamic Republic of)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6716),
                            Name = "Iran (Islamic Republic of)"
                        },
                        new
                        {
                            Id = 106,
                            Code = "IQ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6720),
                            Description = "Iraq",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6721),
                            Name = "Iraq"
                        },
                        new
                        {
                            Id = 107,
                            Code = "IE",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6748),
                            Description = "Ireland",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6750),
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 108,
                            Code = "IM",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6754),
                            Description = "Isle of Man",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6756),
                            Name = "Isle of Man"
                        },
                        new
                        {
                            Id = 109,
                            Code = "IL",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6759),
                            Description = "Israel",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6761),
                            Name = "Israel"
                        },
                        new
                        {
                            Id = 110,
                            Code = "IT",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6765),
                            Description = "Italy",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6767),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 111,
                            Code = "JM",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6770),
                            Description = "Jamaica",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6772),
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = 112,
                            Code = "JP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6776),
                            Description = "Japan",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6778),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 113,
                            Code = "JE",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6781),
                            Description = "Jersey",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6783),
                            Name = "Jersey"
                        },
                        new
                        {
                            Id = 114,
                            Code = "JO",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6786),
                            Description = "Jordan",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6788),
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = 115,
                            Code = "KZ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6792),
                            Description = "Kazakhstan",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6793),
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = 116,
                            Code = "KE",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6797),
                            Description = "Kenya",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6799),
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = 117,
                            Code = "KI",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6818),
                            Description = "Kiribati",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6820),
                            Name = "Kiribati"
                        },
                        new
                        {
                            Id = 118,
                            Code = "KP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6827),
                            Description = "Korea (the Democratic People's Republic of)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6829),
                            Name = "Korea (the Democratic People's Republic of)"
                        },
                        new
                        {
                            Id = 119,
                            Code = "KR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6832),
                            Description = "Korea (the Republic of)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6834),
                            Name = "Korea (the Republic of)"
                        },
                        new
                        {
                            Id = 120,
                            Code = "KW",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6837),
                            Description = "Kuwait",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6839),
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = 121,
                            Code = "KG",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6843),
                            Description = "Kyrgyzstan",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6844),
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = 122,
                            Code = "LA",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6848),
                            Description = "Lao People's Democratic Republic (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6850),
                            Name = "Lao People's Democratic Republic (the)"
                        },
                        new
                        {
                            Id = 123,
                            Code = "LV",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6853),
                            Description = "Latvia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6855),
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = 124,
                            Code = "LB",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6859),
                            Description = "Lebanon",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6863),
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = 125,
                            Code = "LS",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6868),
                            Description = "Lesotho",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6871),
                            Name = "Lesotho"
                        },
                        new
                        {
                            Id = 126,
                            Code = "LR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6876),
                            Description = "Liberia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6878),
                            Name = "Liberia"
                        },
                        new
                        {
                            Id = 127,
                            Code = "LY",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6884),
                            Description = "Libya",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6887),
                            Name = "Libya"
                        },
                        new
                        {
                            Id = 128,
                            Code = "LI",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6892),
                            Description = "Liechtenstein",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6895),
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = 129,
                            Code = "LT",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6900),
                            Description = "Lithuania",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6909),
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = 130,
                            Code = "LU",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6915),
                            Description = "Luxembourg",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6917),
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = 131,
                            Code = "MO",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6922),
                            Description = "Macao",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6924),
                            Name = "Macao"
                        },
                        new
                        {
                            Id = 132,
                            Code = "MG",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6930),
                            Description = "Madagascar",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6932),
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = 133,
                            Code = "MW",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6936),
                            Description = "Malawi",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6939),
                            Name = "Malawi"
                        },
                        new
                        {
                            Id = 134,
                            Code = "MY",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6943),
                            Description = "Malaysia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6946),
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = 135,
                            Code = "MV",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6951),
                            Description = "Maldives",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6953),
                            Name = "Maldives"
                        },
                        new
                        {
                            Id = 136,
                            Code = "ML",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6959),
                            Description = "Mali",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6962),
                            Name = "Mali"
                        },
                        new
                        {
                            Id = 137,
                            Code = "MT",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6967),
                            Description = "Malta",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6969),
                            Name = "Malta"
                        },
                        new
                        {
                            Id = 138,
                            Code = "MH",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6974),
                            Description = "Marshall Islands (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6977),
                            Name = "Marshall Islands (the)"
                        },
                        new
                        {
                            Id = 139,
                            Code = "MQ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6982),
                            Description = "Martinique",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6984),
                            Name = "Martinique"
                        },
                        new
                        {
                            Id = 140,
                            Code = "MR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6989),
                            Description = "Mauritania",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(6992),
                            Name = "Mauritania"
                        },
                        new
                        {
                            Id = 141,
                            Code = "MU",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7001),
                            Description = "Mauritius",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7003),
                            Name = "Mauritius"
                        },
                        new
                        {
                            Id = 142,
                            Code = "YT",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7008),
                            Description = "Mayotte",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7011),
                            Name = "Mayotte"
                        },
                        new
                        {
                            Id = 143,
                            Code = "MX",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7017),
                            Description = "Mexico",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7019),
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 144,
                            Code = "FM",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7025),
                            Description = "Micronesia (Federated States of)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7027),
                            Name = "Micronesia (Federated States of)"
                        },
                        new
                        {
                            Id = 145,
                            Code = "MD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7032),
                            Description = "Moldova (the Republic of)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7035),
                            Name = "Moldova (the Republic of)"
                        },
                        new
                        {
                            Id = 146,
                            Code = "MC",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7040),
                            Description = "Monaco",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7043),
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = 147,
                            Code = "MN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7080),
                            Description = "Mongolia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7083),
                            Name = "Mongolia"
                        },
                        new
                        {
                            Id = 148,
                            Code = "ME",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7089),
                            Description = "Montenegro",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7091),
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = 149,
                            Code = "MS",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7096),
                            Description = "Montserrat",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7098),
                            Name = "Montserrat"
                        },
                        new
                        {
                            Id = 150,
                            Code = "MA",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7104),
                            Description = "Morocco",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7106),
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = 151,
                            Code = "MZ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7134),
                            Description = "Mozambique",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7138),
                            Name = "Mozambique"
                        },
                        new
                        {
                            Id = 152,
                            Code = "MM",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7143),
                            Description = "Myanmar",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7146),
                            Name = "Myanmar"
                        },
                        new
                        {
                            Id = 153,
                            Code = "NA",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7151),
                            Description = "Namibia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7154),
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = 154,
                            Code = "NR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7158),
                            Description = "Nauru",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7162),
                            Name = "Nauru"
                        },
                        new
                        {
                            Id = 155,
                            Code = "NP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7167),
                            Description = "Nepal",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7170),
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = 156,
                            Code = "NL",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7175),
                            Description = "Netherlands (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7177),
                            Name = "Netherlands (the)"
                        },
                        new
                        {
                            Id = 157,
                            Code = "NC",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7183),
                            Description = "New Caledonia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7186),
                            Name = "New Caledonia"
                        },
                        new
                        {
                            Id = 158,
                            Code = "NZ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7191),
                            Description = "New Zealand",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7197),
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = 159,
                            Code = "NI",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7202),
                            Description = "Nicaragua",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7204),
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = 160,
                            Code = "NE",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7209),
                            Description = "Niger (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7212),
                            Name = "Niger (the)"
                        },
                        new
                        {
                            Id = 161,
                            Code = "NG",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7222),
                            Description = "Nigeria",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7224),
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = 162,
                            Code = "NU",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7229),
                            Description = "Niue",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7232),
                            Name = "Niue"
                        },
                        new
                        {
                            Id = 163,
                            Code = "NF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7238),
                            Description = "Norfolk Island",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7241),
                            Name = "Norfolk Island"
                        },
                        new
                        {
                            Id = 164,
                            Code = "MP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7245),
                            Description = "Northern Mariana Islands (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7247),
                            Name = "Northern Mariana Islands (the)"
                        },
                        new
                        {
                            Id = 165,
                            Code = "NO",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7252),
                            Description = "Norway",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7254),
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 166,
                            Code = "OM",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7259),
                            Description = "Oman",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7262),
                            Name = "Oman"
                        },
                        new
                        {
                            Id = 167,
                            Code = "PK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7268),
                            Description = "Pakistan",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7270),
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = 168,
                            Code = "PW",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7275),
                            Description = "Palau",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7278),
                            Name = "Palau"
                        },
                        new
                        {
                            Id = 169,
                            Code = "PS",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7285),
                            Description = "Palestine, State of",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7288),
                            Name = "Palestine, State of"
                        },
                        new
                        {
                            Id = 170,
                            Code = "PA",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7293),
                            Description = "Panama",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7296),
                            Name = "Panama"
                        },
                        new
                        {
                            Id = 171,
                            Code = "PG",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7301),
                            Description = "Papua New Guinea",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7304),
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            Id = 172,
                            Code = "PY",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7309),
                            Description = "Paraguay",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7311),
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = 173,
                            Code = "PE",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7316),
                            Description = "Peru",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7319),
                            Name = "Peru"
                        },
                        new
                        {
                            Id = 174,
                            Code = "PH",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7324),
                            Description = "Philippines (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7326),
                            Name = "Philippines (the)"
                        },
                        new
                        {
                            Id = 175,
                            Code = "PN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7332),
                            Description = "Pitcairn",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7335),
                            Name = "Pitcairn"
                        },
                        new
                        {
                            Id = 176,
                            Code = "PL",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7340),
                            Description = "Poland",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7343),
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 177,
                            Code = "PT",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7349),
                            Description = "Portugal",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7352),
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 178,
                            Code = "PR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7357),
                            Description = "Puerto Rico",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7360),
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Id = 179,
                            Code = "QA",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7367),
                            Description = "Qatar",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7369),
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = 180,
                            Code = "MK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7375),
                            Description = "Republic of North Macedonia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7378),
                            Name = "Republic of North Macedonia"
                        },
                        new
                        {
                            Id = 181,
                            Code = "RO",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7383),
                            Description = "Romania",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7386),
                            Name = "Romania"
                        },
                        new
                        {
                            Id = 182,
                            Code = "RU",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7392),
                            Description = "Russian Federation (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7395),
                            Name = "Russian Federation (the)"
                        },
                        new
                        {
                            Id = 183,
                            Code = "RW",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7401),
                            Description = "Rwanda",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7404),
                            Name = "Rwanda"
                        },
                        new
                        {
                            Id = 184,
                            Code = "RE",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7410),
                            Description = "Réunion",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7413),
                            Name = "Réunion"
                        },
                        new
                        {
                            Id = 185,
                            Code = "BL",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7437),
                            Description = "Saint Barthélemy",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7441),
                            Name = "Saint Barthélemy"
                        },
                        new
                        {
                            Id = 186,
                            Code = "SH",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7447),
                            Description = "Saint Helena, Ascension and Tristan da Cunha",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7450),
                            Name = "Saint Helena, Ascension and Tristan da Cunha"
                        },
                        new
                        {
                            Id = 187,
                            Code = "KN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7455),
                            Description = "Saint Kitts and Nevis",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7458),
                            Name = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            Id = 188,
                            Code = "LC",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7464),
                            Description = "Saint Lucia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7466),
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            Id = 189,
                            Code = "MF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7471),
                            Description = "Saint Martin (French part)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7474),
                            Name = "Saint Martin (French part)"
                        },
                        new
                        {
                            Id = 190,
                            Code = "PM",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7479),
                            Description = "Saint Pierre and Miquelon",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7482),
                            Name = "Saint Pierre and Miquelon"
                        },
                        new
                        {
                            Id = 191,
                            Code = "VC",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7488),
                            Description = "Saint Vincent and the Grenadines",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7491),
                            Name = "Saint Vincent and the Grenadines"
                        },
                        new
                        {
                            Id = 192,
                            Code = "WS",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7500),
                            Description = "Samoa",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7502),
                            Name = "Samoa"
                        },
                        new
                        {
                            Id = 193,
                            Code = "SM",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7507),
                            Description = "San Marino",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7509),
                            Name = "San Marino"
                        },
                        new
                        {
                            Id = 194,
                            Code = "ST",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7515),
                            Description = "Sao Tome and Principe",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7517),
                            Name = "Sao Tome and Principe"
                        },
                        new
                        {
                            Id = 195,
                            Code = "SA",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7523),
                            Description = "Saudi Arabia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7526),
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 196,
                            Code = "SN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7535),
                            Description = "Senegal",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7538),
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = 197,
                            Code = "RS",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7544),
                            Description = "Serbia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7547),
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 198,
                            Code = "SC",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7551),
                            Description = "Seychelles",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7554),
                            Name = "Seychelles"
                        },
                        new
                        {
                            Id = 199,
                            Code = "SL",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7559),
                            Description = "Sierra Leone",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7562),
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            Id = 200,
                            Code = "SG",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7568),
                            Description = "Singapore",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7571),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 201,
                            Code = "SX",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7576),
                            Description = "Sint Maarten (Dutch part)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7579),
                            Name = "Sint Maarten (Dutch part)"
                        },
                        new
                        {
                            Id = 202,
                            Code = "SK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7584),
                            Description = "Slovakia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7587),
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = 203,
                            Code = "SI",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7592),
                            Description = "Slovenia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7595),
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = 204,
                            Code = "SB",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7601),
                            Description = "Solomon Islands",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7604),
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            Id = 205,
                            Code = "SO",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7609),
                            Description = "Somalia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7611),
                            Name = "Somalia"
                        },
                        new
                        {
                            Id = 206,
                            Code = "ZA",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7616),
                            Description = "South Africa",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7619),
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = 207,
                            Code = "GS",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7623),
                            Description = "South Georgia and the South Sandwich Islands",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(7627),
                            Name = "South Georgia and the South Sandwich Islands"
                        },
                        new
                        {
                            Id = 208,
                            Code = "SS",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8165),
                            Description = "South Sudan",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8185),
                            Name = "South Sudan"
                        },
                        new
                        {
                            Id = 209,
                            Code = "ES",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8199),
                            Description = "Spain",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8202),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 210,
                            Code = "LK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8207),
                            Description = "Sri Lanka",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8210),
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = 211,
                            Code = "SD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8216),
                            Description = "Sudan (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8219),
                            Name = "Sudan (the)"
                        },
                        new
                        {
                            Id = 212,
                            Code = "SR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8225),
                            Description = "Suriname",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8228),
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = 213,
                            Code = "SJ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8235),
                            Description = "Svalbard and Jan Mayen",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8238),
                            Name = "Svalbard and Jan Mayen"
                        },
                        new
                        {
                            Id = 214,
                            Code = "SE",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8244),
                            Description = "Sweden",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8247),
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 215,
                            Code = "CH",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8253),
                            Description = "Switzerland",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8257),
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = 216,
                            Code = "SY",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8263),
                            Description = "Syrian Arab Republic",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8266),
                            Name = "Syrian Arab Republic"
                        },
                        new
                        {
                            Id = 217,
                            Code = "TW",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8273),
                            Description = "Taiwan (Province of China)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8276),
                            Name = "Taiwan (Province of China)"
                        },
                        new
                        {
                            Id = 218,
                            Code = "TJ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8282),
                            Description = "Tajikistan",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8286),
                            Name = "Tajikistan"
                        },
                        new
                        {
                            Id = 219,
                            Code = "TZ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8431),
                            Description = "Tanzania, United Republic of",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8435),
                            Name = "Tanzania, United Republic of"
                        },
                        new
                        {
                            Id = 220,
                            Code = "TH",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8441),
                            Description = "Thailand",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8445),
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = 221,
                            Code = "TL",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8451),
                            Description = "Timor-Leste",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8454),
                            Name = "Timor-Leste"
                        },
                        new
                        {
                            Id = 222,
                            Code = "TG",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8459),
                            Description = "Togo",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8463),
                            Name = "Togo"
                        },
                        new
                        {
                            Id = 223,
                            Code = "TK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8468),
                            Description = "Tokelau",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8472),
                            Name = "Tokelau"
                        },
                        new
                        {
                            Id = 224,
                            Code = "TO",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8477),
                            Description = "Tonga",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8481),
                            Name = "Tonga"
                        },
                        new
                        {
                            Id = 225,
                            Code = "TT",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8487),
                            Description = "Trinidad and Tobago",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8491),
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = 226,
                            Code = "TN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8497),
                            Description = "Tunisia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8501),
                            Name = "Tunisia"
                        },
                        new
                        {
                            Id = 227,
                            Code = "TR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8508),
                            Description = "Turkey",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8511),
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 228,
                            Code = "TM",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8518),
                            Description = "Turkmenistan",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8521),
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Id = 229,
                            Code = "TC",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8527),
                            Description = "Turks and Caicos Islands (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8530),
                            Name = "Turks and Caicos Islands (the)"
                        },
                        new
                        {
                            Id = 230,
                            Code = "TV",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8537),
                            Description = "Tuvalu",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8540),
                            Name = "Tuvalu"
                        },
                        new
                        {
                            Id = 231,
                            Code = "UG",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8547),
                            Description = "Uganda",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8551),
                            Name = "Uganda"
                        },
                        new
                        {
                            Id = 232,
                            Code = "UA",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8558),
                            Description = "Ukraine",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8561),
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 233,
                            Code = "AE",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8567),
                            Description = "United Arab Emirates (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8570),
                            Name = "United Arab Emirates (the)"
                        },
                        new
                        {
                            Id = 234,
                            Code = "GB",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8576),
                            Description = "United Kingdom of Great Britain and Northern Ireland (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8580),
                            Name = "United Kingdom of Great Britain and Northern Ireland (the)"
                        },
                        new
                        {
                            Id = 235,
                            Code = "UM",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8586),
                            Description = "United States Minor Outlying Islands (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8589),
                            Name = "United States Minor Outlying Islands (the)"
                        },
                        new
                        {
                            Id = 236,
                            Code = "US",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8595),
                            Description = "United States of America (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8598),
                            Name = "United States of America (the)"
                        },
                        new
                        {
                            Id = 237,
                            Code = "UY",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8604),
                            Description = "Uruguay",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8607),
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = 238,
                            Code = "UZ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8613),
                            Description = "Uzbekistan",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8616),
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Id = 239,
                            Code = "VU",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8623),
                            Description = "Vanuatu",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8626),
                            Name = "Vanuatu"
                        },
                        new
                        {
                            Id = 240,
                            Code = "VE",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8632),
                            Description = "Venezuela (Bolivarian Republic of)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8634),
                            Name = "Venezuela (Bolivarian Republic of)"
                        },
                        new
                        {
                            Id = 241,
                            Code = "VN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8639),
                            Description = "Viet Nam",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8642),
                            Name = "Viet Nam"
                        },
                        new
                        {
                            Id = 242,
                            Code = "VG",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8647),
                            Description = "Virgin Islands (British)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8649),
                            Name = "Virgin Islands (British)"
                        },
                        new
                        {
                            Id = 243,
                            Code = "VI",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8655),
                            Description = "Virgin Islands (U.S.)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8657),
                            Name = "Virgin Islands (U.S.)"
                        },
                        new
                        {
                            Id = 244,
                            Code = "WF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8663),
                            Description = "Wallis and Futuna",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8666),
                            Name = "Wallis and Futuna"
                        },
                        new
                        {
                            Id = 245,
                            Code = "EH",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8672),
                            Description = "Western Sahara",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8675),
                            Name = "Western Sahara"
                        },
                        new
                        {
                            Id = 246,
                            Code = "YE",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8682),
                            Description = "Yemen",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8685),
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = 247,
                            Code = "ZM",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(8691),
                            Description = "Zambia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(9016),
                            Name = "Zambia"
                        },
                        new
                        {
                            Id = 248,
                            Code = "ZW",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(9039),
                            Description = "Zimbabwe",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(9042),
                            Name = "Zimbabwe"
                        },
                        new
                        {
                            Id = 249,
                            Code = "AX",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(9050),
                            Description = "Åland Islands",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(9053),
                            Name = "Åland Islands"
                        },
                        new
                        {
                            Id = 250,
                            Code = "SZ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(9059),
                            Description = "SWAZILAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 828, DateTimeKind.Local).AddTicks(9062),
                            Name = "SWAZILAND"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Cpd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CpdawardedById")
                        .HasColumnName("CPDAwardedById")
                        .HasColumnType("int");

                    b.Property<int>("Cpdearned")
                        .HasColumnName("CPDEarned")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CpdawardedById");

                    b.HasIndex("MemberId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("CPD");
                });

            modelBuilder.Entity("MM.ClientModels.CpdmemberCategorySetUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cpdcount")
                        .HasColumnName("CPDCount")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("MemberCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberCategoryId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("CPDMemberCategorySetUp");
                });

            modelBuilder.Entity("MM.ClientModels.CpdmemberLevelSetUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cpdcount")
                        .HasColumnName("CPDCount")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("MemberLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberLevelId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("CPDMemberLevelSetUp");
                });

            modelBuilder.Entity("MM.ClientModels.CpdmemberTeamSetUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cpdcount")
                        .HasColumnName("CPDCount")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("MemberTeamId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberTeamId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("CPDMemberTeamSetUp");
                });

            modelBuilder.Entity("MM.ClientModels.CpdmemberTypeSetUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cpdcount")
                        .HasColumnName("CPDCount")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("MemberTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberTypeId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("CPDMemberTypeSetUp");
                });

            modelBuilder.Entity("MM.ClientModels.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(3) CHARACTER SET utf8mb4")
                        .HasMaxLength(3);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Symbol")
                        .HasColumnType("varchar(5) CHARACTER SET utf8mb4")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "AFN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(1830),
                            Description = "Currency for  AFGHANISTAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(2766),
                            Name = "Afghani",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 2,
                            Code = "ALL",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3680),
                            Description = "ALBANIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3703),
                            Name = "Lek",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 3,
                            Code = "DZD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3720),
                            Description = "ALGERIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3722),
                            Name = "Algerian Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 4,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3727),
                            Description = "AMERICAN SAMOA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3730),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 5,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3734),
                            Description = "ANDORRA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3736),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 6,
                            Code = "AOA",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3741),
                            Description = "ANGOLA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3743),
                            Name = "Kwanza",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 7,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3747),
                            Description = "ANGUILLA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3749),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 8,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3754),
                            Description = "ANTIGUA AND BARBUDA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3756),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 9,
                            Code = "ARS",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3760),
                            Description = "ARGENTINA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3762),
                            Name = "Argentine Peso",
                            Symbol = ""
                        },
                        new
                        {
                            Id = 10,
                            Code = "AMD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3767),
                            Description = "ARMENIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3768),
                            Name = "Armenian Dram",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 11,
                            Code = "AWG",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3774),
                            Description = "ARUBA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3776),
                            Name = "Aruban Florin",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 12,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3875),
                            Description = "AUSTRALIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3877),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 13,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3882),
                            Description = "AUSTRIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3884),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 14,
                            Code = "AZN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3889),
                            Description = "AZERBAIJAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3891),
                            Name = "Azerbaijanian Manat",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 15,
                            Code = "BSD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3896),
                            Description = "BAHAMAS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3898),
                            Name = "Bahamian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 16,
                            Code = "BHD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3903),
                            Description = "BAHRAIN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3904),
                            Name = "Bahraini Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 17,
                            Code = "BDT",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3909),
                            Description = "BANGLADESH",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3911),
                            Name = "Taka",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 18,
                            Code = "BBD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3916),
                            Description = "BARBADOS",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3917),
                            Name = "Barbados Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 19,
                            Code = "BYN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3922),
                            Description = "BELARUS",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3924),
                            Name = "Belarussian Ruble",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 20,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3929),
                            Description = "BELGIUM",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3931),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 21,
                            Code = "BZD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3938),
                            Description = "BELIZE",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3940),
                            Name = "Belize Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 22,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3946),
                            Description = "BENIN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3948),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 23,
                            Code = "BMD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3952),
                            Description = "BERMUDA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3954),
                            Name = "Bermudian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 24,
                            Code = "BTN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3959),
                            Description = "BHUTAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3960),
                            Name = "Ngultrum",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 25,
                            Code = "INR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3965),
                            Description = "BHUTAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3967),
                            Name = "Indian Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 26,
                            Code = "BOB",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3971),
                            Description = "BOLIVIA (PLURINATIONAL STATE OF)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3973),
                            Name = "Boliviano",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 27,
                            Code = "BOV",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3977),
                            Description = "BOLIVIA (PLURINATIONAL STATE OF)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3979),
                            Name = "Mvdol",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 28,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3983),
                            Description = "BONAIRE, SINT EUSTATIUS AND SABA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3985),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 29,
                            Code = "BAM",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3989),
                            Description = "BOSNIA AND HERZEGOVINA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3991),
                            Name = "Convertible Mark",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 30,
                            Code = "BWP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3996),
                            Description = "BOTSWANA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(3998),
                            Name = "Pula",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 31,
                            Code = "NOK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4002),
                            Description = "BOUVET ISLAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4004),
                            Name = "Norwegian Krone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 32,
                            Code = "BRL",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4008),
                            Description = "BRAZIL",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4010),
                            Name = "Brazilian Real",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 33,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4014),
                            Description = "BRITISH INDIAN OCEAN TERRITORY (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4016),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 34,
                            Code = "BND",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4020),
                            Description = "BRUNEI DARUSSALAM",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4022),
                            Name = "Brunei Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 35,
                            Code = "BGN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4026),
                            Description = "BULGARIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4028),
                            Name = "Bulgarian Lev",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 36,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4032),
                            Description = "BURKINA FASO",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4034),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 37,
                            Code = "BIF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4056),
                            Description = "BURUNDI",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4058),
                            Name = "Burundi Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 38,
                            Code = "CVE",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4062),
                            Description = "CABO VERDE",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4064),
                            Name = "Cabo Verde Escudo",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 39,
                            Code = "KHR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4068),
                            Description = "CAMBODIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4069),
                            Name = "Riel",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 40,
                            Code = "XAF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4074),
                            Description = "CAMEROON",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4076),
                            Name = "CFA Franc BEAC",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 41,
                            Code = "CAD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4080),
                            Description = "CANADA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4082),
                            Name = "Canadian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 42,
                            Code = "KYD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4087),
                            Description = "CAYMAN ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4089),
                            Name = "Cayman Islands Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 43,
                            Code = "XAF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4093),
                            Description = "CENTRAL AFRICAN REPUBLIC (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4095),
                            Name = "CFA Franc BEAC",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 44,
                            Code = "XAF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4099),
                            Description = "CHAD",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4101),
                            Name = "CFA Franc BEAC",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 45,
                            Code = "CLF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4105),
                            Description = "CHILE",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4107),
                            Name = "Unidad de Fomento",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 46,
                            Code = "CLP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4111),
                            Description = "CHILE",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4113),
                            Name = "Chilean Peso",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 47,
                            Code = "CNY",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4117),
                            Description = "CHINA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4119),
                            Name = "Yuan Renminbi",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 48,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4124),
                            Description = "CHRISTMAS ISLAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4125),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 49,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4130),
                            Description = "COCOS (KEELING) ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4132),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 50,
                            Code = "COP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4136),
                            Description = "COLOMBIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4138),
                            Name = "Colombian Peso",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 51,
                            Code = "COU",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4142),
                            Description = "COLOMBIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4143),
                            Name = "Unidad de Valor Real",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 52,
                            Code = "KMF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4148),
                            Description = "COMOROS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4150),
                            Name = "Comoro Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 53,
                            Code = "CDF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4154),
                            Description = "CONGO (THE DEMOCRATIC REPUBLIC OF THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4156),
                            Name = "Congolese Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 54,
                            Code = "XAF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4161),
                            Description = "CONGO (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4162),
                            Name = "CFA Franc BEAC",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 55,
                            Code = "NZD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4166),
                            Description = "COOK ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4168),
                            Name = "New Zealand Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 56,
                            Code = "CRC",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4172),
                            Description = "COSTA RICA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4174),
                            Name = "Costa Rican Colon",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 57,
                            Code = "HRK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4178),
                            Description = "CROATIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4180),
                            Name = "Kuna",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 58,
                            Code = "CUC",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4184),
                            Description = "CUBA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4186),
                            Name = "Peso Convertible",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 59,
                            Code = "CUP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4190),
                            Description = "CUBA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4192),
                            Name = "Cuban Peso",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 60,
                            Code = "ANG",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4196),
                            Description = "CURAÇAO",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4198),
                            Name = "Netherlands Antillean Guilder",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 61,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4202),
                            Description = "CYPRUS",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4204),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 62,
                            Code = "CZK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4208),
                            Description = "CZECH REPUBLIC (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4210),
                            Name = "Czech Koruna",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 63,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4229),
                            Description = "CÔTE D'IVOIRE",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4231),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 64,
                            Code = "DKK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4235),
                            Description = "DENMARK",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4237),
                            Name = "Danish Krone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 65,
                            Code = "DJF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4242),
                            Description = "DJIBOUTI",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4243),
                            Name = "Djibouti Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 66,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4247),
                            Description = "DOMINICA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4249),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 67,
                            Code = "DOP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4254),
                            Description = "DOMINICAN REPUBLIC (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4255),
                            Name = "Dominican Peso",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 68,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4259),
                            Description = "ECUADOR",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4261),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 69,
                            Code = "EGP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4265),
                            Description = "EGYPT",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4267),
                            Name = "Egyptian Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 70,
                            Code = "SVC",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4271),
                            Description = "EL SALVADOR",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4273),
                            Name = "El Salvador Colon",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 71,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4277),
                            Description = "EL SALVADOR",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4279),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 72,
                            Code = "XAF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4283),
                            Description = "EQUATORIAL GUINEA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4285),
                            Name = "CFA Franc BEAC",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 73,
                            Code = "ERN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4290),
                            Description = "ERITREA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4292),
                            Name = "Nakfa",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 74,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4296),
                            Description = "ESTONIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4298),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 75,
                            Code = "ETB",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4302),
                            Description = "ETHIOPIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4304),
                            Name = "Ethiopian Birr",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 76,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4308),
                            Description = "EUROPEAN UNION",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4310),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 77,
                            Code = "FKP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4314),
                            Description = "FALKLAND ISLANDS (THE) [MALVINAS]",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4316),
                            Name = "Falkland Islands Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 78,
                            Code = "DKK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4320),
                            Description = "FAROE ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4322),
                            Name = "Danish Krone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 79,
                            Code = "FJD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4326),
                            Description = "FIJI",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4328),
                            Name = "Fiji Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 80,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4332),
                            Description = "FINLAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4334),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 81,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4341),
                            Description = "FRANCE",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4342),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 82,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4346),
                            Description = "FRENCH GUIANA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4348),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 83,
                            Code = "XPF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4353),
                            Description = "FRENCH POLYNESIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4354),
                            Name = "CFP Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 84,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4359),
                            Description = "FRENCH SOUTHERN TERRITORIES (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4361),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 85,
                            Code = "XAF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4365),
                            Description = "GABON",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4366),
                            Name = "CFA Franc BEAC",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 86,
                            Code = "GMD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4371),
                            Description = "GAMBIA (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4373),
                            Name = "Dalasi",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 87,
                            Code = "GEL",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4377),
                            Description = "GEORGIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4379),
                            Name = "Lari",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 88,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4399),
                            Description = "GERMANY",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4400),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 89,
                            Code = "GHS",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4405),
                            Description = "GHANA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4407),
                            Name = "Ghana Cedi",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 90,
                            Code = "GIP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4411),
                            Description = "GIBRALTAR",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4413),
                            Name = "Gibraltar Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 91,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4417),
                            Description = "GREECE",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4418),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 92,
                            Code = "DKK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4423),
                            Description = "GREENLAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4424),
                            Name = "Danish Krone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 93,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4429),
                            Description = "GRENADA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4430),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 94,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4437),
                            Description = "GUADELOUPE",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4439),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 95,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4443),
                            Description = "GUAM",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4444),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 96,
                            Code = "GTQ",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4449),
                            Description = "GUATEMALA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4450),
                            Name = "Quetzal",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 97,
                            Code = "GBP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4454),
                            Description = "GUERNSEY",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4456),
                            Name = "Pound Sterling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 98,
                            Code = "GNF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4460),
                            Description = "GUINEA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4462),
                            Name = "Guinea Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 99,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4466),
                            Description = "GUINEA-BISSAU",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4468),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 100,
                            Code = "GYD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4472),
                            Description = "GUYANA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4474),
                            Name = "Guyana Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 101,
                            Code = "HTG",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4478),
                            Description = "HAITI",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4480),
                            Name = "Gourde",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 102,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4484),
                            Description = "HAITI",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4486),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 103,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4490),
                            Description = "HEARD ISLAND AND McDONALD ISLANDS",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4492),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 104,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4496),
                            Description = "HOLY SEE (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4498),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 105,
                            Code = "HNL",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4502),
                            Description = "HONDURAS",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4504),
                            Name = "Lempira",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 106,
                            Code = "HKD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4508),
                            Description = "HONG KONG",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4510),
                            Name = "Hong Kong Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 107,
                            Code = "HUF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4514),
                            Description = "HUNGARY",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4516),
                            Name = "Forint",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 108,
                            Code = "ISK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4520),
                            Description = "ICELAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4522),
                            Name = "Iceland Krona",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 109,
                            Code = "INR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4526),
                            Description = "INDIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4528),
                            Name = "Indian Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 110,
                            Code = "IDR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4532),
                            Description = "INDONESIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4534),
                            Name = "Rupiah",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 111,
                            Code = "XDR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4539),
                            Description = "INTERNATIONAL MONETARY FUND (IMF) ",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4541),
                            Name = "SDR (Special Drawing Right)",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 112,
                            Code = "IRR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4545),
                            Description = "IRAN (ISLAMIC REPUBLIC OF)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4546),
                            Name = "Iranian Rial",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 113,
                            Code = "IQD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4551),
                            Description = "IRAQ",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4552),
                            Name = "Iraqi Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 114,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4571),
                            Description = "IRELAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4573),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 115,
                            Code = "GBP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4579),
                            Description = "ISLE OF MAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4580),
                            Name = "Pound Sterling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 116,
                            Code = "ILS",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4585),
                            Description = "ISRAEL",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4587),
                            Name = "New Israeli Sheqel",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 117,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4591),
                            Description = "ITALY",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4593),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 118,
                            Code = "JMD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4597),
                            Description = "JAMAICA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4599),
                            Name = "Jamaican Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 119,
                            Code = "JPY",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4603),
                            Description = "JAPAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4605),
                            Name = "Yen",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 120,
                            Code = "GBP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4609),
                            Description = "JERSEY",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4611),
                            Name = "Pound Sterling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 121,
                            Code = "JOD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4615),
                            Description = "JORDAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4617),
                            Name = "Jordanian Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 122,
                            Code = "KZT",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4621),
                            Description = "KAZAKHSTAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4623),
                            Name = "Tenge",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 123,
                            Code = "KES",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4627),
                            Description = "KENYA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4629),
                            Name = "Kenyan Shilling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 124,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4633),
                            Description = "KIRIBATI",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4635),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 125,
                            Code = "KPW",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4640),
                            Description = "KOREA (THE DEMOCRATIC PEOPLE’S REPUBLIC OF)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4642),
                            Name = "North Korean Won",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 126,
                            Code = "KRW",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4646),
                            Description = "KOREA (THE REPUBLIC OF)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4648),
                            Name = "Won",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 127,
                            Code = "KWD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4652),
                            Description = "KUWAIT",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4654),
                            Name = "Kuwaiti Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 128,
                            Code = "KGS",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4658),
                            Description = "KYRGYZSTAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4660),
                            Name = "Som",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 129,
                            Code = "LAK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4664),
                            Description = "LAO PEOPLE’S DEMOCRATIC REPUBLIC (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4666),
                            Name = "Kip",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 130,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4670),
                            Description = "LATVIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4672),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 131,
                            Code = "LBP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4676),
                            Description = "LEBANON",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4678),
                            Name = "Lebanese Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 132,
                            Code = "LSL",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4682),
                            Description = "LESOTHO",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4684),
                            Name = "Loti",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 133,
                            Code = "ZAR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4688),
                            Description = "LESOTHO",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4690),
                            Name = "Rand",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 134,
                            Code = "LRD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4694),
                            Description = "LIBERIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4696),
                            Name = "Liberian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 135,
                            Code = "LYD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4700),
                            Description = "LIBYA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4702),
                            Name = "Libyan Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 136,
                            Code = "CHF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4706),
                            Description = "LIECHTENSTEIN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4708),
                            Name = "Swiss Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 137,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4712),
                            Description = "LITHUANIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4714),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 138,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4718),
                            Description = "LUXEMBOURG",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4720),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 139,
                            Code = "MOP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4724),
                            Description = "MACAO",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4726),
                            Name = "Pataca",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 140,
                            Code = "MGA",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4745),
                            Description = "MADAGASCAR",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4746),
                            Name = "Malagasy Ariary",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 141,
                            Code = "MWK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4751),
                            Description = "MALAWI",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4752),
                            Name = "Kwacha",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 142,
                            Code = "MYR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4757),
                            Description = "MALAYSIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4759),
                            Name = "Malaysian Ringgit",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 143,
                            Code = "MVR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4763),
                            Description = "MALDIVES",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4765),
                            Name = "Rufiyaa",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 144,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4770),
                            Description = "MALI",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4771),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 145,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4776),
                            Description = "MALTA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4777),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 146,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4782),
                            Description = "MARSHALL ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4784),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 147,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4789),
                            Description = "MARTINIQUE",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4790),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 148,
                            Code = "MRU",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4794),
                            Description = "MAURITANIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4796),
                            Name = "Ouguiya",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 149,
                            Code = "MUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4800),
                            Description = "MAURITIUS",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4802),
                            Name = "Mauritius Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 150,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4806),
                            Description = "MAYOTTE",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4808),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 151,
                            Code = "MXN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4812),
                            Description = "MEXICO",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4814),
                            Name = "Mexican Peso",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 152,
                            Code = "MXV",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4819),
                            Description = "MEXICO",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4820),
                            Name = "Mexican Unidad de Inversion (UDI)",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 153,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4825),
                            Description = "MICRONESIA (FEDERATED STATES OF)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4826),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 154,
                            Code = "MDL",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4831),
                            Description = "MOLDOVA (THE REPUBLIC OF)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4832),
                            Name = "Moldovan Leu",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 155,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4837),
                            Description = "MONACO",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4838),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 156,
                            Code = "MNT",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4843),
                            Description = "MONGOLIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4844),
                            Name = "Tugrik",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 157,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4848),
                            Description = "MONTENEGRO",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4850),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 158,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4854),
                            Description = "MONTSERRAT",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4856),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 159,
                            Code = "MAD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4860),
                            Description = "MOROCCO",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4862),
                            Name = "Moroccan Dirham",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 160,
                            Code = "MZN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4866),
                            Description = "MOZAMBIQUE",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4868),
                            Name = "Mozambique Metical",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 161,
                            Code = "MMK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4872),
                            Description = "MYANMAR",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4874),
                            Name = "Kyat",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 162,
                            Code = "NAD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4878),
                            Description = "NAMIBIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4880),
                            Name = "Namibia Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 163,
                            Code = "ZAR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4884),
                            Description = "NAMIBIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4886),
                            Name = "Rand",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 164,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4890),
                            Description = "NAURU",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4892),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 165,
                            Code = "NPR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4912),
                            Description = "NEPAL",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4914),
                            Name = "Nepalese Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 166,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4918),
                            Description = "NETHERLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4920),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 167,
                            Code = "XPF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4925),
                            Description = "NEW CALEDONIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4927),
                            Name = "CFP Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 168,
                            Code = "NZD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4931),
                            Description = "NEW ZEALAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4933),
                            Name = "New Zealand Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 169,
                            Code = "NIO",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4937),
                            Description = "NICARAGUA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4939),
                            Name = "Cordoba Oro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 170,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4943),
                            Description = "NIGER (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4945),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 171,
                            Code = "NGN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4949),
                            Description = "NIGERIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4951),
                            Name = "Naira",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 172,
                            Code = "NZD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4956),
                            Description = "NIUE",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4957),
                            Name = "New Zealand Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 173,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4962),
                            Description = "NORFOLK ISLAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4963),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 174,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4968),
                            Description = "NORTHERN MARIANA ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4970),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 175,
                            Code = "NOK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4975),
                            Description = "NORWAY",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4977),
                            Name = "Norwegian Krone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 176,
                            Code = "OMR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4981),
                            Description = "OMAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4983),
                            Name = "Rial Omani",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 177,
                            Code = "PKR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4987),
                            Description = "PAKISTAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4989),
                            Name = "Pakistan Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 178,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4993),
                            Description = "PALAU",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(4995),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 179,
                            Code = "PAB",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5000),
                            Description = "PANAMA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5001),
                            Name = "Balboa",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 180,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5006),
                            Description = "PANAMA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5007),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 181,
                            Code = "PGK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5012),
                            Description = "PAPUA NEW GUINEA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5013),
                            Name = "Kina",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 182,
                            Code = "PYG",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5018),
                            Description = "PARAGUAY",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5020),
                            Name = "Guarani",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 183,
                            Code = "PEN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5024),
                            Description = "PERU",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5026),
                            Name = "Nuevo Sol",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 184,
                            Code = "PHP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5031),
                            Description = "PHILIPPINES (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5033),
                            Name = "Philippine Peso",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 185,
                            Code = "NZD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5037),
                            Description = "PITCAIRN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5039),
                            Name = "New Zealand Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 186,
                            Code = "PLN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5043),
                            Description = "POLAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5045),
                            Name = "Zloty",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 187,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5049),
                            Description = "PORTUGAL",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5051),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 188,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5056),
                            Description = "PUERTO RICO",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5057),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 189,
                            Code = "QAR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5062),
                            Description = "QATAR",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5063),
                            Name = "Qatari Rial",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 190,
                            Code = "MKD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5068),
                            Description = "REPUBLIC OF NORTH MACEDONIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5069),
                            Name = "Denar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 191,
                            Code = "RON",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5089),
                            Description = "ROMANIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5091),
                            Name = "Romanian Leu",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 192,
                            Code = "RUB",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5095),
                            Description = "RUSSIAN FEDERATION (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5097),
                            Name = "Russian Ruble",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 193,
                            Code = "RWF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5102),
                            Description = "RWANDA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5104),
                            Name = "Rwanda Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 194,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5108),
                            Description = "RÉUNION",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5110),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 195,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5114),
                            Description = "SAINT BARTHÉLEMY",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5116),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 196,
                            Code = "SHP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5120),
                            Description = "SAINT HELENA, ASCENSION AND TRISTAN DA CUNHA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5122),
                            Name = "Saint Helena Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 197,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5126),
                            Description = "SAINT KITTS AND NEVIS",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5128),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 198,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5135),
                            Description = "SAINT LUCIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5136),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 199,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5141),
                            Description = "SAINT MARTIN (FRENCH PART)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5143),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 200,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5147),
                            Description = "SAINT PIERRE AND MIQUELON",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5149),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 201,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5154),
                            Description = "SAINT VINCENT AND THE GRENADINES",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5155),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 202,
                            Code = "WST",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5160),
                            Description = "SAMOA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5162),
                            Name = "Tala",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 203,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5166),
                            Description = "SAN MARINO",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5168),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 204,
                            Code = "STN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5174),
                            Description = "SAO TOME AND PRINCIPE",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5175),
                            Name = "Dobra",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 205,
                            Code = "SAR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5182),
                            Description = "SAUDI ARABIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5184),
                            Name = "Saudi Riyal",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 206,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5189),
                            Description = "SENEGAL",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5190),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 207,
                            Code = "RSD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5195),
                            Description = "SERBIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5196),
                            Name = "Serbian Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 208,
                            Code = "SCR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5201),
                            Description = "SEYCHELLES",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5203),
                            Name = "Seychelles Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 209,
                            Code = "SLL",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5207),
                            Description = "SIERRA LEONE",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5209),
                            Name = "Leone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 210,
                            Code = "SGD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5214),
                            Description = "SINGAPORE",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5215),
                            Name = "Singapore Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 211,
                            Code = "ANG",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5220),
                            Description = "SINT MAARTEN (DUTCH PART)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5221),
                            Name = "Netherlands Antillean Guilder",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 212,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5225),
                            Description = "SLOVAKIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5227),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 213,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5231),
                            Description = "SLOVENIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5233),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 214,
                            Code = "SBD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5237),
                            Description = "SOLOMON ISLANDS",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5239),
                            Name = "Solomon Islands Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 215,
                            Code = "SOS",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5243),
                            Description = "SOMALIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5245),
                            Name = "Somali Shilling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 216,
                            Code = "ZAR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5264),
                            Description = "SOUTH AFRICA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5266),
                            Name = "Rand",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 217,
                            Code = "SSP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5270),
                            Description = "SOUTH SUDAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5272),
                            Name = "South Sudanese Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 218,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5276),
                            Description = "SPAIN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5278),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 219,
                            Code = "LKR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5282),
                            Description = "SRI LANKA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5284),
                            Name = "Sri Lanka Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 220,
                            Code = "SDG",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5288),
                            Description = "SUDAN (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5290),
                            Name = "Sudanese Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 221,
                            Code = "SRD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5294),
                            Description = "SURINAME",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5296),
                            Name = "Surinam Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 222,
                            Code = "NOK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5300),
                            Description = "SVALBARD AND JAN MAYEN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5302),
                            Name = "Norwegian Krone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 223,
                            Code = "SZL",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5307),
                            Description = "SWAZILAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5308),
                            Name = "Lilangeni",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 224,
                            Code = "SEK",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5312),
                            Description = "SWEDEN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5314),
                            Name = "Swedish Krona",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 225,
                            Code = "CHE",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5319),
                            Description = "SWITZERLAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5320),
                            Name = "WIR Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 226,
                            Code = "CHF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5324),
                            Description = "SWITZERLAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5327),
                            Name = "Swiss Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 227,
                            Code = "CHW",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5331),
                            Description = "SWITZERLAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5332),
                            Name = "WIR Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 228,
                            Code = "SYP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5337),
                            Description = "SYRIAN ARAB REPUBLIC",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5338),
                            Name = "Syrian Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 229,
                            Code = "TWD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5343),
                            Description = "TAIWAN (PROVINCE OF CHINA)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5344),
                            Name = "New Taiwan Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 230,
                            Code = "TJS",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5348),
                            Description = "TAJIKISTAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5350),
                            Name = "Somoni",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 231,
                            Code = "TZS",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5354),
                            Description = "TANZANIA, UNITED REPUBLIC OF",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5356),
                            Name = "Tanzanian Shilling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 232,
                            Code = "THB",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5360),
                            Description = "THAILAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5362),
                            Name = "Baht",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 233,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5366),
                            Description = "TIMOR-LESTE",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5368),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 234,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5372),
                            Description = "TOGO",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5374),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 235,
                            Code = "NZD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5378),
                            Description = "TOKELAU",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5380),
                            Name = "New Zealand Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 236,
                            Code = "TOP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5384),
                            Description = "TONGA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5386),
                            Name = "Pa’anga",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 237,
                            Code = "TTD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5390),
                            Description = "TRINIDAD AND TOBAGO",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5392),
                            Name = "Trinidad and Tobago Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 238,
                            Code = "TND",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5396),
                            Description = "TUNISIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5398),
                            Name = "Tunisian Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 239,
                            Code = "TRY",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5402),
                            Description = "TURKEY",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5404),
                            Name = "Turkish Lira",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 240,
                            Code = "TMT",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5408),
                            Description = "TURKMENISTAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5410),
                            Name = "Turkmenistan New Manat",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 241,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5414),
                            Description = "TURKS AND CAICOS ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5416),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 242,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5435),
                            Description = "TUVALU",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5436),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 243,
                            Code = "UGX",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5441),
                            Description = "UGANDA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5442),
                            Name = "Uganda Shilling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 244,
                            Code = "UAH",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5447),
                            Description = "UKRAINE",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5448),
                            Name = "Hryvnia",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 245,
                            Code = "AED",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5453),
                            Description = "UNITED ARAB EMIRATES (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5455),
                            Name = "UAE Dirham",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 246,
                            Code = "GBP",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5459),
                            Description = "UNITED KINGDOM OF GREAT BRITAIN AND NORTHERN IRELAND (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5461),
                            Name = "Pound Sterling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 247,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5465),
                            Description = "UNITED STATES MINOR OUTLYING ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5467),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 248,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5471),
                            Description = "UNITED STATES OF AMERICA (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5473),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 249,
                            Code = "USN",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5477),
                            Description = "UNITED STATES OF AMERICA (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5479),
                            Name = "US Dollar (Next day)",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 250,
                            Code = "UYI",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5484),
                            Description = "URUGUAY",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5485),
                            Name = "Uruguay Peso en Unidades Indexadas (URUIURUI)",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 251,
                            Code = "UYU",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5490),
                            Description = "URUGUAY",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5491),
                            Name = "Peso Uruguayo",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 252,
                            Code = "UZS",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5496),
                            Description = "UZBEKISTAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5497),
                            Name = "Uzbekistan Sum",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 253,
                            Code = "VUV",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5502),
                            Description = "VANUATU",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5503),
                            Name = "Vatu",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 254,
                            Code = "VEF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5507),
                            Description = "VENEZUELA (BOLIVARIAN REPUBLIC OF)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5509),
                            Name = "Bolivar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 255,
                            Code = "VND",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5513),
                            Description = "VIET NAM",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5515),
                            Name = "Dong",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 256,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5519),
                            Description = "VIRGIN ISLANDS (BRITISH)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5521),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 257,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5525),
                            Description = "VIRGIN ISLANDS (U.S.)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5527),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 258,
                            Code = "XPF",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5531),
                            Description = "WALLIS AND FUTUNA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5533),
                            Name = "CFP Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 259,
                            Code = "MAD",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5537),
                            Description = "WESTERN SAHARA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5539),
                            Name = "Moroccan Dirham",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 260,
                            Code = "YER",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5544),
                            Description = "YEMEN",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5545),
                            Name = "Yemeni Rial",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 261,
                            Code = "ZMW",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5550),
                            Description = "ZAMBIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5552),
                            Name = "Zambian Kwacha",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 262,
                            Code = "ZWL",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5556),
                            Description = "ZIMBABWE",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5557),
                            Name = "Zimbabwe Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 263,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5562),
                            Description = "ÅLAND ISLANDS",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 914, DateTimeKind.Local).AddTicks(5564),
                            Name = "Euro",
                            Symbol = " "
                        });
                });

            modelBuilder.Entity("MM.ClientModels.CustomField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime1")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime10")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime11")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime12")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime13")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime14")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime15")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime16")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime17")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime18")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime19")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime2")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime20")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime3")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime4")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime5")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime6")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime7")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime8")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime9")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("Decimal1")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal10")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal11")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal12")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal13")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal14")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal15")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal16")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal17")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal18")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal19")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal2")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal20")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal3")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal4")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal5")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal6")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal7")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal8")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal9")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("Int1")
                        .HasColumnType("int");

                    b.Property<int?>("Int10")
                        .HasColumnType("int");

                    b.Property<int?>("Int11")
                        .HasColumnType("int");

                    b.Property<int?>("Int12")
                        .HasColumnType("int");

                    b.Property<int?>("Int13")
                        .HasColumnType("int");

                    b.Property<int?>("Int14")
                        .HasColumnType("int");

                    b.Property<int?>("Int15")
                        .HasColumnType("int");

                    b.Property<int?>("Int16")
                        .HasColumnType("int");

                    b.Property<int?>("Int17")
                        .HasColumnType("int");

                    b.Property<int?>("Int18")
                        .HasColumnType("int");

                    b.Property<int?>("Int19")
                        .HasColumnType("int");

                    b.Property<int?>("Int2")
                        .HasColumnType("int");

                    b.Property<int?>("Int20")
                        .HasColumnType("int");

                    b.Property<int?>("Int3")
                        .HasColumnType("int");

                    b.Property<int?>("Int4")
                        .HasColumnType("int");

                    b.Property<int?>("Int5")
                        .HasColumnType("int");

                    b.Property<int?>("Int6")
                        .HasColumnType("int");

                    b.Property<int?>("Int7")
                        .HasColumnType("int");

                    b.Property<int?>("Int8")
                        .HasColumnType("int");

                    b.Property<int?>("Int9")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup1")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup10")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup11")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup12")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup13")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup14")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup15")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup16")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup17")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup18")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup19")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup2")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup20")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup3")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup4")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup5")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup6")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup7")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup8")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup9")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TableName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TablePrimaryKeyValue")
                        .HasColumnType("int");

                    b.Property<string>("Text1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text10")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text11")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text12")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text13")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text14")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text15")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text16")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text17")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text18")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text19")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text20")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text6")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text7")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text8")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text9")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("CustomField");
                });

            modelBuilder.Entity("MM.ClientModels.CustomFieldLookUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("FieldIndex")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("CustomFieldLookUp");
                });

            modelBuilder.Entity("MM.ClientModels.CustomFieldName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DataType")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("FieldIndex")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("CustomFieldName");
                });

            modelBuilder.Entity("MM.ClientModels.DateSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("DateSetting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 924, DateTimeKind.Local).AddTicks(7953),
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(5280),
                            Name = "12/03/2020"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7453),
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7489),
                            Name = "03/12/2020"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7516),
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7519),
                            Name = "03.12.2020"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7524),
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7527),
                            Name = "03-12-2020"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7533),
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7536),
                            Name = "03 Dec 2020"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7542),
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7545),
                            Name = "03-Dec-2020"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7551),
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7554),
                            Name = "2020-12-03"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7559),
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7562),
                            Name = "Friday, December 03, 2020"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7567),
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7571),
                            Name = "Fri, December 03, 2020"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7576),
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7579),
                            Name = "December 03, 2020"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7585),
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7588),
                            Name = "03 December 2020"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7593),
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 925, DateTimeKind.Local).AddTicks(7596),
                            Name = "3 Dec 2020"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Designation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Designation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(5771),
                            Description = "Operations manager",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(7088),
                            Name = "Operations manager"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8371),
                            Description = "Quality control, safety, environmental manager",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8399),
                            Name = "Quality control, safety, environmental manager"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8422),
                            Description = "Accountant, bookkeeper, controller",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8425),
                            Name = "Accountant, bookkeeper, controller"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8430),
                            Description = "Office manager",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8434),
                            Name = "Office manager"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8439),
                            Description = "Receptionist",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8442),
                            Name = "Receptionist"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8448),
                            Description = "Foreperson, supervisor, lead person",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8451),
                            Name = "Foreperson, supervisor, lead person"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8456),
                            Description = "Marketing manager",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8460),
                            Name = "Marketing manager"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8465),
                            Description = "Purchasing manager",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8468),
                            Name = "Purchasing manager"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8474),
                            Description = "Shipping and receiving person or manager",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8477),
                            Name = "Shipping and receiving person or manager"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8482),
                            Description = "Professional staff",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8485),
                            Name = "Professional staff"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8491),
                            Description = "Production Manager",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8494),
                            Name = "Production Manager"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8499),
                            Description = "Chief Financial Officer (CFO)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8502),
                            Name = "Chief Financial Officer (CFO)"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8507),
                            Description = "Vice President of Marketing or Marketing Manager",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8511),
                            Name = "Vice President of Marketing or Marketing Manager"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8516),
                            Description = "Chief Operating Officer (COO)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 37, 931, DateTimeKind.Local).AddTicks(8519),
                            Name = "Chief Operating Officer (COO)"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Chief Executive Officer (CEO) or President",
                            Name = "Chief Executive Officer (CEO) or President"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DonatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DonorNotes")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("PromotionDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PromotionDetailId");

                    b.ToTable("Donation");
                });

            modelBuilder.Entity("MM.ClientModels.EmailCcrule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EmailTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailTypeId");

                    b.HasIndex("RoleId");

                    b.ToTable("EmailCCRule");
                });

            modelBuilder.Entity("MM.ClientModels.EmailTemplateContent", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailContent")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<int>("EmailTemplateNameId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EmailTemplateNameId");

                    b.ToTable("EmailTemplateContent");
                });

            modelBuilder.Entity("MM.ClientModels.EmailTemplateName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EmailTemplateName");
                });

            modelBuilder.Entity("MM.ClientModels.EmailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EmailType");
                });

            modelBuilder.Entity("MM.ClientModels.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("MM.ClientModels.EquipmentCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AvaialbleCount")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.ToTable("EquipmentCount");
                });

            modelBuilder.Entity("MM.ClientModels.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<bool>("AllowCancellations")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("AllowGuestRegistrations")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowRegistration")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CancellationbeforeDays")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(2)");

                    b.Property<string>("EventUniqueName")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<int?>("GuestLimitPerRegistrant")
                        .HasColumnType("int");

                    b.Property<bool>("InternalOrExternal")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsChargableEvent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCpdevent")
                        .HasColumnName("IsCPDEvent")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxRegistrationsAllowed")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegEndDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("RegEndTime")
                        .HasColumnType("time(2)");

                    b.Property<DateTime>("RegStartDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("RegStartTime")
                        .HasColumnType("time(2)");

                    b.Property<bool>("ShowMaxRegistrationsAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(2)");

                    b.Property<int>("TimeZoneId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("TimeZoneId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("MM.ClientModels.EventAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("AdminOnly")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Anyone")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("RestrictedList")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventAccess");
                });

            modelBuilder.Entity("MM.ClientModels.EventAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("SignInTime")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("SingOutTime")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberId");

                    b.ToTable("EventAttendance");
                });

            modelBuilder.Entity("MM.ClientModels.EventCommunication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Announcement1ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Announcement1Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Announcement1SentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Announcement2ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Announcement2Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Announcement2SentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Announcement3ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Announcement3Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Announcement3SentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Reminder1ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Reminder1Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Reminder1SentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Reminder2ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Reminder2Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Reminder2SentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Reminder3ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Reminder3Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Reminder3SentDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventCommunication");
                });

            modelBuilder.Entity("MM.ClientModels.EventCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventCostItemId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("EventCost");
                });

            modelBuilder.Entity("MM.ClientModels.EventCostItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EventCostItem");
                });

            modelBuilder.Entity("MM.ClientModels.EventEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RequiredCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("EventId");

                    b.ToTable("EventEquipment");
                });

            modelBuilder.Entity("MM.ClientModels.EventMinute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Heading")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Minute")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("MinuteStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RaisedBy")
                        .HasColumnType("int");

                    b.Property<string>("SubHeading")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MinuteStatusId");

                    b.ToTable("EventMinute");
                });

            modelBuilder.Entity("MM.ClientModels.EventMinuteStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("EventMinuteStatus");
                });

            modelBuilder.Entity("MM.ClientModels.EventPreRequisiteEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PreRequisiteEventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PreRequisiteEventId");

                    b.ToTable("EventPreRequisiteEvent");
                });

            modelBuilder.Entity("MM.ClientModels.EventRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("EventResponseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<bool>("Paid")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventResponseTypeId");

                    b.HasIndex("MemberId");

                    b.ToTable("EventRegistration");
                });

            modelBuilder.Entity("MM.ClientModels.EventResponseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("EventResponseType");
                });

            modelBuilder.Entity("MM.ClientModels.EventRestrictionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberTeamId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberLevelId");

                    b.HasIndex("MemberTeamId");

                    b.ToTable("EventRestrictionList");
                });

            modelBuilder.Entity("MM.ClientModels.EventRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventRole");
                });

            modelBuilder.Entity("MM.ClientModels.EventRoleUserXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int>("EventRoleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("EventRoleUserXRef");
                });

            modelBuilder.Entity("MM.ClientModels.FileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("FileType");
                });

            modelBuilder.Entity("MM.ClientModels.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 76, DateTimeKind.Local).AddTicks(2087),
                            Description = "Male",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 76, DateTimeKind.Local).AddTicks(3475),
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 76, DateTimeKind.Local).AddTicks(4948),
                            Description = "Female",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 76, DateTimeKind.Local).AddTicks(4983),
                            Name = "Female"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 76, DateTimeKind.Local).AddTicks(5006),
                            Description = "Other",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 76, DateTimeKind.Local).AddTicks(5009),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommentsForPayer")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<decimal>("InvoiceAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InvoiceItem")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("InvoiceStatusId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentGatewayId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceStatusId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PaymentGatewayId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("MM.ClientModels.InvoiceSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CopyInvToOrgContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CopyRecToOrgContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("NextInvoiceNumber")
                        .HasColumnType("int");

                    b.Property<bool>("SendInvForPendingPayments")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SendRecToPayer")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("InvoiceSetting");
                });

            modelBuilder.Entity("MM.ClientModels.InvoiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("InvoiceStatus");
                });

            modelBuilder.Entity("MM.ClientModels.LandingPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberTypeId");

                    b.HasIndex("PageId");

                    b.ToTable("LandingPage");
                });

            modelBuilder.Entity("MM.ClientModels.MarketingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MarketingGroup");
                });

            modelBuilder.Entity("MM.ClientModels.MarketingGroupXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MarketingGroupId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MarketingGroupId");

                    b.HasIndex("MemberId");

                    b.ToTable("MarketingGroupXRef");
                });

            modelBuilder.Entity("MM.ClientModels.MarketingProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MarketingProfile");
                });

            modelBuilder.Entity("MM.ClientModels.MarketingProfileXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MarketingProfileId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MarketingProfileId");

                    b.HasIndex("MemberId");

                    b.ToTable("MarketingProfileXRef");
                });

            modelBuilder.Entity("MM.ClientModels.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ConfirmedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<bool>("EmailActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBillingContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBranchContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("MemberBranchId")
                        .HasColumnType("int");

                    b.Property<string>("MemberCode")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("MemberLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberTeamId")
                        .HasColumnType("int");

                    b.Property<int>("MemberTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("MembershipConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("NextRenewalDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationStructureId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<byte[]>("Photo")
                        .HasColumnType("blob");

                    b.Property<int?>("ReferralTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("TermAccepted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("MemberBranchId");

                    b.HasIndex("MemberLevelId");

                    b.HasIndex("MemberStatusId");

                    b.HasIndex("MemberTeamId");

                    b.HasIndex("MemberTypeId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationStructureId");

                    b.HasIndex("ReferralTypeId");

                    b.HasIndex("TitleId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("MM.ClientModels.MemberAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BuidlingName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ComplexName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Gpscoordinates")
                        .HasColumnName("GPSCoordinates")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PrimaryContactNo")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PrimaryEmail")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("SecondaryContactNo")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("SecondaryEmail")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("MemberId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("MemberAddress");
                });

            modelBuilder.Entity("MM.ClientModels.MemberAffliationXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AffliatedFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("AffliatedTill")
                        .HasColumnType("datetime");

                    b.Property<int?>("AffliationId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActiveAffliatedNow")
                        .HasColumnName("isActiveAffliatedNow")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("MemberSpecificAffliationName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AffliationId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberAffliationXRef");
                });

            modelBuilder.Entity("MM.ClientModels.MemberBankingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<string>("BankName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("RoutingCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberBankingDetail");
                });

            modelBuilder.Entity("MM.ClientModels.MemberBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("MemberBranch");
                });

            modelBuilder.Entity("MM.ClientModels.MemberCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MemberCategory");
                });

            modelBuilder.Entity("MM.ClientModels.MemberCodeGenerator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CodeGenerationRule")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("LastNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Prefix")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Suffix")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("MemberCodeGenerator");
                });

            modelBuilder.Entity("MM.ClientModels.MemberCommunicationPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CommunicationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("PreferredTimeFrom")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan?>("PreferredTimeTo")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("CommunicationTypeId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberCommunicationPreference");
                });

            modelBuilder.Entity("MM.ClientModels.MemberFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberFile");
                });

            modelBuilder.Entity("MM.ClientModels.MemberLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MemberLevel");
                });

            modelBuilder.Entity("MM.ClientModels.MemberLoginAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LoginTime")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MemberLoginAudit");
                });

            modelBuilder.Entity("MM.ClientModels.MemberPlanHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsCurrentPlan")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("MemberPlanDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberPlanDetailId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("MemberPlanHistory");
                });

            modelBuilder.Entity("MM.ClientModels.MemberQualificationXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("MemberSpecificQualificationName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("QualificationFrom")
                        .HasColumnType("datetime");

                    b.Property<int?>("QualificationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("QualificationTill")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("QualificationId");

                    b.ToTable("MemberQualificationXRef");
                });

            modelBuilder.Entity("MM.ClientModels.MemberStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MemberStatus");
                });

            modelBuilder.Entity("MM.ClientModels.MemberTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MemberTeam");
                });

            modelBuilder.Entity("MM.ClientModels.MemberType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("MemberCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("MemberCategoryId");

                    b.ToTable("MemberType");
                });

            modelBuilder.Entity("MM.ClientModels.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Acronym")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("WebSite")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("MM.ClientModels.OrganizationStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("LevelOfMember")
                        .HasColumnType("int");

                    b.Property<int>("MaximumNumber")
                        .HasColumnType("int");

                    b.Property<int?>("MaximumTimeInYears")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool?>("ShowMaximumTimeInYears")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("OrganizationStructure");
                });

            modelBuilder.Entity("MM.ClientModels.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Page");
                });

            modelBuilder.Entity("MM.ClientModels.PayPalConnectionMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PayPalConnectionMode");
                });

            modelBuilder.Entity("MM.ClientModels.PayPalPreferredPaymentGateway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PayPalPreferredPaymentGateway");
                });

            modelBuilder.Entity("MM.ClientModels.PaymentCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PaymentCard");
                });

            modelBuilder.Entity("MM.ClientModels.PaymentGateway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClientApicodeForMerchant")
                        .HasColumnName("ClientAPICodeForMerchant")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ClientIdForMerchant")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ClientPasswordForMerchant")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<decimal?>("CommisionPercentage")
                        .HasColumnType("decimal(6, 3)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("MerchantLocation")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("MerchantName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("MerchantNumber")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PaymentGateway");
                });

            modelBuilder.Entity("MM.ClientModels.PaymentSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApplicationInstructions")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<int?>("ClientPayPalConnectionModeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultCountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("EventsInstructions")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("GeneralInstructions")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("PayPalAccountId")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("PayPalApipassword")
                        .HasColumnName("PayPalAPIPassword")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PayPalApisignature")
                        .HasColumnName("PayPalAPISignature")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("PayPalApiuserName")
                        .HasColumnName("PayPalAPIUserName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PayPalPdtidentityToken")
                        .HasColumnName("PayPalPDTIdentityToken")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("PayPalPreferredPaymentGatewayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("PaymentSetting");
                });

            modelBuilder.Entity("MM.ClientModels.PaymentSettingAllowedCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentCardId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentSettingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentCardId");

                    b.HasIndex("PaymentSettingId");

                    b.ToTable("PaymentSettingAllowedCard");
                });

            modelBuilder.Entity("MM.ClientModels.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 294, DateTimeKind.Local).AddTicks(4853),
                            Description = "Can create new contacts, modify all existing ones  ",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 294, DateTimeKind.Local).AddTicks(5879),
                            Name = "Membership manager"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 294, DateTimeKind.Local).AddTicks(6815),
                            Description = "Can create and manage all events",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 294, DateTimeKind.Local).AddTicks(6839),
                            Name = "Event manager"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 294, DateTimeKind.Local).AddTicks(6856),
                            Description = "Can manage all donations",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 294, DateTimeKind.Local).AddTicks(6859),
                            Name = "Donations manager"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 294, DateTimeKind.Local).AddTicks(6862),
                            Description = "Can send manual emails (e.g. newsletters)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 294, DateTimeKind.Local).AddTicks(6864),
                            Name = "Newsletter manager"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 294, DateTimeKind.Local).AddTicks(6868),
                            Description = "Can modify your website pages. With this option selected, you can provide access to all pages on your site or to selected pages. When you grant access to a page, you automatically grant access to all of its child or sub pages.",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 294, DateTimeKind.Local).AddTicks(6869),
                            Name = "Website editor"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.PlanCanChangeToXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("FromPlanMasterId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("ToPlanMasterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromPlanMasterId");

                    b.HasIndex("ToPlanMasterId");

                    b.ToTable("PlanCanChangeToXref");
                });

            modelBuilder.Entity("MM.ClientModels.PlanDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PlanFrequencyId")
                        .HasColumnType("int");

                    b.Property<int>("PlanMasterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PlanFrequencyId");

                    b.HasIndex("PlanMasterId");

                    b.ToTable("PlanDetail");
                });

            modelBuilder.Entity("MM.ClientModels.PlanFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PlanFrequency");
                });

            modelBuilder.Entity("MM.ClientModels.PlanMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("ApplyTaxSettings")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanPublicApply")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool?>("IsLimited")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LimitToMemberCount")
                        .HasColumnType("int");

                    b.Property<int>("MemberCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberCategoryId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("PlanMaster");
                });

            modelBuilder.Entity("MM.ClientModels.PromotionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(9, 3)");

                    b.Property<int?>("MemberLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PromotionMasterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberLevelId");

                    b.HasIndex("MemberTypeId");

                    b.HasIndex("PromotionMasterId");

                    b.ToTable("PromotionDetail");
                });

            modelBuilder.Entity("MM.ClientModels.PromotionMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BenefitEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("BenefitStartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("IsActive")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("PromotionMaster");
                });

            modelBuilder.Entity("MM.ClientModels.PromotionResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PromotionMasterId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionResponseType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ResponseDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PromotionMasterId");

                    b.HasIndex("PromotionResponseType");

                    b.ToTable("PromotionResponse");
                });

            modelBuilder.Entity("MM.ClientModels.PromotionResponseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("PromotionResponseType");
                });

            modelBuilder.Entity("MM.ClientModels.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Qualification");
                });

            modelBuilder.Entity("MM.ClientModels.ReferralType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ReferralType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 340, DateTimeKind.Local).AddTicks(9897),
                            Description = "Google",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 341, DateTimeKind.Local).AddTicks(868),
                            Name = "Google"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 341, DateTimeKind.Local).AddTicks(1807),
                            Description = "Facebook",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 341, DateTimeKind.Local).AddTicks(1832),
                            Name = "Facebook"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 341, DateTimeKind.Local).AddTicks(1850),
                            Description = "Twitter",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 341, DateTimeKind.Local).AddTicks(1852),
                            Name = "Twitter"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 341, DateTimeKind.Local).AddTicks(1858),
                            Description = "TV",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 341, DateTimeKind.Local).AddTicks(1860),
                            Name = "TV"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 341, DateTimeKind.Local).AddTicks(1864),
                            Description = "Friends",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 341, DateTimeKind.Local).AddTicks(1866),
                            Name = "Friends"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 341, DateTimeKind.Local).AddTicks(1871),
                            Description = "Other",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 341, DateTimeKind.Local).AddTicks(1873),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Refund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommentsForPayer")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentGatewayId")
                        .HasColumnType("int");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("RefundDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RefundItem")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PaymentGatewayId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("Refund");
                });

            modelBuilder.Entity("MM.ClientModels.RelatedTo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("RelatedTo");
                });

            modelBuilder.Entity("MM.ClientModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 355, DateTimeKind.Local).AddTicks(5108),
                            Description = "Select this option to remove admin access for existing administrators  ",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 355, DateTimeKind.Local).AddTicks(6029),
                            Name = "No administrative privileges"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 355, DateTimeKind.Local).AddTicks(7038),
                            Description = "Grants full access to all administrative functions. Take care when granting this level of access since full admins can delete other admins and even the entire site.",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 355, DateTimeKind.Local).AddTicks(7059),
                            Name = "Account administrator"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 355, DateTimeKind.Local).AddTicks(7086),
                            Description = "Allows viewing of everything in the admin backend without being able to make any changes.  ",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 355, DateTimeKind.Local).AddTicks(7088),
                            Name = "Account administrator (Read-only access)"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 355, DateTimeKind.Local).AddTicks(7124),
                            Description = "Provides administrative access to selected Wild Apricot modules. Use this option if you have dedicated personnel in charge of events, memberships, editing webpages, or managing donations. With this option selected, you can limit access to selected Functions",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 355, DateTimeKind.Local).AddTicks(7126),
                            Name = "Limited administrator"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.RolePermissionXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("Permissionid")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Permissionid");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissionXRef");
                });

            modelBuilder.Entity("MM.ClientModels.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("MM.ClientModels.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("MM.ClientModels.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Tax");
                });

            modelBuilder.Entity("MM.ClientModels.TaxPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TaxPolicy");
                });

            modelBuilder.Entity("MM.ClientModels.TaxScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("TaxScopeCode")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TaxScope");
                });

            modelBuilder.Entity("MM.ClientModels.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("ThemeNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Theme");
                });

            modelBuilder.Entity("MM.ClientModels.TimeFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TimeFormat");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 375, DateTimeKind.Local).AddTicks(7983),
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 375, DateTimeKind.Local).AddTicks(9345),
                            Name = "12:00 AM/PM"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 376, DateTimeKind.Local).AddTicks(704),
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 376, DateTimeKind.Local).AddTicks(738),
                            Name = "24 Hours"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.TimeZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TimeZone");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(1417),
                            Description = "(GMT-12:00) International Date Line West",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(2379),
                            Name = "Dateline Standard Time"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3309),
                            Description = "(GMT-11:00) MIdway Island, Samoa",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3339),
                            Name = "Samoa Standard Time"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3361),
                            Description = "(GMT-10:00) Hawaii",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3363),
                            Name = "Hawaiian Standard Time"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3367),
                            Description = "(GMT-09:00) Alaska",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3369),
                            Name = "Alaskan Standard Time"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3378),
                            Description = "(GMT-08:00) Pacific Time (US and Canada); Tijuana",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3380),
                            Name = "Pacific Standard Time"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3385),
                            Description = "(GMT-07:00) Mountain Time (US and Canada)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3387),
                            Name = "Mountain Standard Time"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3392),
                            Description = "(GMT-07:00) Chihuahua, La Paz, Mazatlan",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3394),
                            Name = "Mexico Standard Time 2"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3399),
                            Description = "(GMT-07:00) Arizona",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3401),
                            Name = "U.S. Mountain Standard Time"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3406),
                            Description = "(GMT-06:00) Central Time (US and Canada)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3407),
                            Name = "Central Standard Time"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3412),
                            Description = "(GMT-06:00) Saskatchewan",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3414),
                            Name = "Canada Central Standard Time"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3418),
                            Description = "(GMT-06:00) Guadalajara, Mexico City, Monterrey",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3420),
                            Name = "Mexico Standard Time"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3426),
                            Description = "(GMT-06:00) Central America",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3428),
                            Name = "Central America Standard Time"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3432),
                            Description = "(GMT-05:00) Eastern Time (US and Canada)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3434),
                            Name = "Eastern Standard Time"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3438),
                            Description = "(GMT-05:00) Indiana (East)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3440),
                            Name = "U.S. Eastern Standard Time"
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3445),
                            Description = "(GMT-05:00) Bogota, Lima, Quito",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3447),
                            Name = "S.A. Pacific Standard Time"
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3451),
                            Description = "(GMT-04:00) Atlantic Time (Canada)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3453),
                            Name = "Atlantic Standard Time"
                        },
                        new
                        {
                            Id = 17,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3457),
                            Description = "(GMT-04:00) Georgetown, La Paz, San Juan",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3459),
                            Name = "S.A. Western Standard Time"
                        },
                        new
                        {
                            Id = 18,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3462),
                            Description = "(GMT-04:00) Santiago",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3464),
                            Name = "Pacific S.A. Standard Time"
                        },
                        new
                        {
                            Id = 19,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3468),
                            Description = "(GMT-03:30) Newfoundland",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3470),
                            Name = "Newfoundland and Labrador Standard Time"
                        },
                        new
                        {
                            Id = 20,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3474),
                            Description = "(GMT-03:00) Brasilia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3476),
                            Name = "E. South America Standard Time"
                        },
                        new
                        {
                            Id = 21,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3480),
                            Description = "(GMT-03:00) Georgetown",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3482),
                            Name = "S.A. Eastern Standard Time"
                        },
                        new
                        {
                            Id = 22,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3486),
                            Description = "(GMT-03:00) Greenland",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3487),
                            Name = "Greenland Standard Time"
                        },
                        new
                        {
                            Id = 23,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3491),
                            Description = "(GMT-02:00) MId-Atlantic",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3493),
                            Name = "MId-Atlantic Standard Time"
                        },
                        new
                        {
                            Id = 24,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3496),
                            Description = "(GMT-01:00) Azores",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3498),
                            Name = "Azores Standard Time"
                        },
                        new
                        {
                            Id = 25,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3502),
                            Description = "(GMT-01:00) Cape Verde Islands",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3504),
                            Name = "Cape Verde Standard Time"
                        },
                        new
                        {
                            Id = 26,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3507),
                            Description = "(GMT) Greenwich Mean Time: Dublin, Edinburgh, Lisbon, London",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3509),
                            Name = "GMT Standard Time"
                        },
                        new
                        {
                            Id = 27,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3513),
                            Description = "(GMT) Monrovia, Reykjavik",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3515),
                            Name = "Greenwich Standard Time"
                        },
                        new
                        {
                            Id = 28,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3518),
                            Description = "(GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3520),
                            Name = "Central Europe Standard Time"
                        },
                        new
                        {
                            Id = 29,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3524),
                            Description = "(GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3526),
                            Name = "Central European Standard Time"
                        },
                        new
                        {
                            Id = 30,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3530),
                            Description = "(GMT+01:00) Brussels, Copenhagen, MadrId, Paris",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3532),
                            Name = "Romance Standard Time"
                        },
                        new
                        {
                            Id = 31,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3536),
                            Description = "(GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3537),
                            Name = "W. Europe Standard Time"
                        },
                        new
                        {
                            Id = 32,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3541),
                            Description = "(GMT+01:00) West Central Africa",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3543),
                            Name = "W. Central Africa Standard Time"
                        },
                        new
                        {
                            Id = 33,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3547),
                            Description = "(GMT+02:00) Minsk",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3549),
                            Name = "E. Europe Standard Time"
                        },
                        new
                        {
                            Id = 34,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3553),
                            Description = "(GMT+02:00) Cairo",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3555),
                            Name = "Egypt Standard Time"
                        },
                        new
                        {
                            Id = 35,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3559),
                            Description = "(GMT+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3561),
                            Name = "FLE Standard Time"
                        },
                        new
                        {
                            Id = 36,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3593),
                            Description = "(GMT+02:00) Athens, Bucharest, Istanbul",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3595),
                            Name = "GTB Standard Time"
                        },
                        new
                        {
                            Id = 37,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3601),
                            Description = "(GMT+02:00) Jerusalem",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3602),
                            Name = "Israel Standard Time"
                        },
                        new
                        {
                            Id = 38,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3606),
                            Description = "(GMT+02:00) Harare, Pretoria",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3608),
                            Name = "South Africa Standard Time"
                        },
                        new
                        {
                            Id = 39,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3611),
                            Description = "(GMT+03:00) Moscow, St. Petersburg, Volgograd",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3613),
                            Name = "Russian Standard Time"
                        },
                        new
                        {
                            Id = 40,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3617),
                            Description = "(GMT+03:00) Kuwait, Riyadh",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3619),
                            Name = "Arab Standard Time"
                        },
                        new
                        {
                            Id = 41,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3623),
                            Description = "(GMT+03:00) Nairobi",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3625),
                            Name = "E. Africa Standard Time"
                        },
                        new
                        {
                            Id = 42,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3629),
                            Description = "(GMT+03:00) Baghdad",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3630),
                            Name = "Arabic Standard Time"
                        },
                        new
                        {
                            Id = 43,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3634),
                            Description = "(GMT+03:30) Tehran",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3636),
                            Name = "Iran Standard Time"
                        },
                        new
                        {
                            Id = 44,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3640),
                            Description = "(GMT+04:00) Abu Dhabi, Muscat",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3641),
                            Name = "Arabian Standard Time"
                        },
                        new
                        {
                            Id = 45,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3645),
                            Description = "(GMT+04:00) Baku, Tbilisi, Yerevan",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3647),
                            Name = "Caucasus Standard Time"
                        },
                        new
                        {
                            Id = 46,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3651),
                            Description = "(GMT+04:30) Kabul",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3652),
                            Name = "Transitional Islamic State of Afghanistan Standard Time"
                        },
                        new
                        {
                            Id = 47,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3657),
                            Description = "(GMT+05:00) Ekaterinburg",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3659),
                            Name = "Ekaterinburg Standard Time"
                        },
                        new
                        {
                            Id = 48,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3662),
                            Description = "(GMT+05:00) Tashkent",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3664),
                            Name = "West Asia Standard Time"
                        },
                        new
                        {
                            Id = 49,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3668),
                            Description = "(GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3670),
                            Name = "India Standard Time"
                        },
                        new
                        {
                            Id = 50,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3674),
                            Description = "(GMT+05:45) Kathmandu",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3676),
                            Name = "Nepal Standard Time"
                        },
                        new
                        {
                            Id = 51,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3680),
                            Description = "(GMT+06:00) Astana, Dhaka",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3682),
                            Name = "Central Asia Standard Time"
                        },
                        new
                        {
                            Id = 52,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3686),
                            Description = "(GMT+06:00) Sri Jayawardenepura",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3688),
                            Name = "Sri Lanka Standard Time"
                        },
                        new
                        {
                            Id = 53,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3692),
                            Description = "(GMT+06:00) Almaty, Novosibirsk",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3694),
                            Name = "N. Central Asia Standard Time"
                        },
                        new
                        {
                            Id = 54,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3698),
                            Description = "(GMT+06:30) Yangon (Rangoon)",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3699),
                            Name = "Myanmar Standard Time"
                        },
                        new
                        {
                            Id = 55,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3703),
                            Description = "(GMT+07:00) Bangkok, Hanoi, Jakarta",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3705),
                            Name = "S.E. Asia Standard Time"
                        },
                        new
                        {
                            Id = 56,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3709),
                            Description = "(GMT+07:00) Krasnoyarsk",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3711),
                            Name = "North Asia Standard Time"
                        },
                        new
                        {
                            Id = 57,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3716),
                            Description = "(GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3717),
                            Name = "China Standard Time"
                        },
                        new
                        {
                            Id = 58,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3721),
                            Description = "(GMT+08:00) Kuala Lumpur, Singapore",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3723),
                            Name = "Singapore Standard Time"
                        },
                        new
                        {
                            Id = 59,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3727),
                            Description = "(GMT+08:00) Taipei",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3728),
                            Name = "Taipei Standard Time"
                        },
                        new
                        {
                            Id = 60,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3732),
                            Description = "(GMT+08:00) Perth",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3734),
                            Name = "W. Australia Standard Time"
                        },
                        new
                        {
                            Id = 61,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3740),
                            Description = "(GMT+08:00) Irkutsk, Ulaanbaatar",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3741),
                            Name = "North Asia East Standard Time"
                        },
                        new
                        {
                            Id = 62,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3745),
                            Description = "(GMT+09:00) Seoul",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3747),
                            Name = "Korea Standard Time"
                        },
                        new
                        {
                            Id = 63,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3751),
                            Description = "(GMT+09:00) Osaka, Sapporo, Tokyo",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3752),
                            Name = "Tokyo Standard Time"
                        },
                        new
                        {
                            Id = 64,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3757),
                            Description = "(GMT+09:00) Yakutsk",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3759),
                            Name = "Yakutsk Standard Time"
                        },
                        new
                        {
                            Id = 65,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3763),
                            Description = "(GMT+09:30) Darwin",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3764),
                            Name = "A.U.S. Central Standard Time"
                        },
                        new
                        {
                            Id = 66,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3768),
                            Description = "(GMT+09:30) AdelaIde",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3770),
                            Name = "Cen. Australia Standard Time"
                        },
                        new
                        {
                            Id = 67,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3774),
                            Description = "(GMT+10:00) Canberra, Melbourne, Sydney",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3776),
                            Name = "A.U.S. Eastern Standard Time"
                        },
                        new
                        {
                            Id = 68,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3780),
                            Description = "(GMT+10:00) Brisbane",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3782),
                            Name = "E. Australia Standard Time"
                        },
                        new
                        {
                            Id = 69,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3787),
                            Description = "(GMT+10:00) Hobart",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3789),
                            Name = "Tasmania Standard Time"
                        },
                        new
                        {
                            Id = 70,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3794),
                            Description = "(GMT+10:00) Vladivostok",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3796),
                            Name = "Vladivostok Standard Time"
                        },
                        new
                        {
                            Id = 71,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3819),
                            Description = "(GMT+10:00) Guam, Port Moresby",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3822),
                            Name = "West Pacific Standard Time"
                        },
                        new
                        {
                            Id = 72,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3828),
                            Description = "(GMT+11:00) Magadan, Solomon Islands, New Caledonia",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3829),
                            Name = "Central Pacific Standard Time"
                        },
                        new
                        {
                            Id = 73,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3834),
                            Description = "(GMT+12:00) Fiji, Kamchatka, Marshall Is.",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3836),
                            Name = "Fiji Islands Standard Time"
                        },
                        new
                        {
                            Id = 74,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3840),
                            Description = "(GMT+12:00) Auckland, Wellington",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3841),
                            Name = "New Zealand Standard Time"
                        },
                        new
                        {
                            Id = 75,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3845),
                            Description = "(GMT+13:00) Nuku'alofa",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3847),
                            Name = "Tonga Standard Time"
                        },
                        new
                        {
                            Id = 76,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3851),
                            Description = "(GMT-03:00) Buenos Aires",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3853),
                            Name = "Azerbaijan Standard Time "
                        },
                        new
                        {
                            Id = 77,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3857),
                            Description = "(GMT+02:00) Beirut",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3859),
                            Name = "MIddle East Standard Time"
                        },
                        new
                        {
                            Id = 78,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3862),
                            Description = "(GMT+02:00) Amman",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3864),
                            Name = "Jordan Standard Time"
                        },
                        new
                        {
                            Id = 79,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3868),
                            Description = "(GMT-06:00) Guadalajara, Mexico City, Monterrey - New",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3870),
                            Name = "Central Standard Time (Mexico)"
                        },
                        new
                        {
                            Id = 80,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3874),
                            Description = "(GMT-07:00) Chihuahua, La Paz, Mazatlan - New",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3876),
                            Name = "Mountain Standard Time (Mexico)"
                        },
                        new
                        {
                            Id = 81,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3881),
                            Description = "(GMT-08:00) Tijuana, Baja California",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3882),
                            Name = "Pacific Standard Time (Mexico)"
                        },
                        new
                        {
                            Id = 82,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3886),
                            Description = "(GMT+02:00) Windhoek",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3888),
                            Name = "Namibia Standard Time"
                        },
                        new
                        {
                            Id = 83,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3891),
                            Description = "(GMT+03:00) Tbilisi",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3893),
                            Name = "Georgian Standard Time"
                        },
                        new
                        {
                            Id = 84,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3897),
                            Description = "(GMT-04:00) Manaus",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3898),
                            Name = "Central Brazilian Standard Time"
                        },
                        new
                        {
                            Id = 85,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3903),
                            Description = "(GMT-03:00) MontevIdeo",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3904),
                            Name = "MontevIdeo Standard Time"
                        },
                        new
                        {
                            Id = 86,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3909),
                            Description = "(GMT+04:00) Yerevan",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3910),
                            Name = "Armenian Standard Time"
                        },
                        new
                        {
                            Id = 87,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3914),
                            Description = "(GMT-04:30) Caracas",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3916),
                            Name = "Venezuela Standard Time"
                        },
                        new
                        {
                            Id = 88,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3919),
                            Description = "(GMT-03:00) Buenos Aires",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3921),
                            Name = "Argentina Standard Time"
                        },
                        new
                        {
                            Id = 89,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3925),
                            Description = "(GMT) Casablanca",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3926),
                            Name = "Morocco Standard Time"
                        },
                        new
                        {
                            Id = 90,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3931),
                            Description = "(GMT+05:00) Islamabad, Karachi",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3933),
                            Name = "Pakistan Standard Time"
                        },
                        new
                        {
                            Id = 91,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3937),
                            Description = "(GMT+04:00) Port Louis",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3938),
                            Name = "Mauritius Standard Time"
                        },
                        new
                        {
                            Id = 92,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3943),
                            Description = "(GMT) Coordinated Universal Time",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3944),
                            Name = "UTC"
                        },
                        new
                        {
                            Id = 93,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3948),
                            Description = "(GMT-04:00) Asuncion",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3950),
                            Name = "Paraguay Standard Time"
                        },
                        new
                        {
                            Id = 94,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3955),
                            Description = "(GMT+12:00) Petropavlovsk-Kamchatsky",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 388, DateTimeKind.Local).AddTicks(3957),
                            Name = "Kamchatka Standard Time"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Title");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 392, DateTimeKind.Local).AddTicks(8638),
                            Description = "Mr",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 392, DateTimeKind.Local).AddTicks(9639),
                            Name = "Mr"
                        },
                        new
                        {
                            Id = 20,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 393, DateTimeKind.Local).AddTicks(577),
                            Description = "Mrs",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 393, DateTimeKind.Local).AddTicks(602),
                            Name = "Mrs"
                        },
                        new
                        {
                            Id = 30,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 393, DateTimeKind.Local).AddTicks(619),
                            Description = "Ms",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 393, DateTimeKind.Local).AddTicks(622),
                            Name = "Ms"
                        },
                        new
                        {
                            Id = 40,
                            CreatedOn = new DateTime(2020, 7, 12, 15, 15, 38, 393, DateTimeKind.Local).AddTicks(626),
                            Description = "Dr",
                            ModifiedOn = new DateTime(2020, 7, 12, 15, 15, 38, 393, DateTimeKind.Local).AddTicks(628),
                            Name = "Dr"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.UserLoginAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LoginTime")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserLoginAudit");
                });

            modelBuilder.Entity("MM.ClientModels.UserRoleXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleXRef");
                });

            modelBuilder.Entity("MM.ClientModels.Address", b =>
                {
                    b.HasOne("MM.ClientModels.AddressType", "AddressType")
                        .WithMany("Address")
                        .HasForeignKey("AddressTypeId")
                        .HasConstraintName("FK_Address_AddressType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.City", "City")
                        .WithMany("Address")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Address_City");

                    b.HasOne("MM.ClientModels.Country", "Country")
                        .WithMany("Address")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Address_Country")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.State", "State")
                        .WithMany("Address")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_Address_State")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.BankingDetail", b =>
                {
                    b.HasOne("MM.ClientModels.AccountType", "AccountType")
                        .WithMany("BankingDetail")
                        .HasForeignKey("AccountTypeId")
                        .HasConstraintName("FK_BankingDetail_AccountType")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.Billing", b =>
                {
                    b.HasOne("MM.ClientModels.Invoice", "Invoice")
                        .WithMany("Billing")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_Payment_Invoice");

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("Billing")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Payment_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PaymentGateway", "PaymentGateway")
                        .WithMany("Billing")
                        .HasForeignKey("PaymentGatewayId")
                        .HasConstraintName("FK_Payment_PaymentGateway")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("Billing")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_Billing_RelatedTo")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.BillingCommunication", b =>
                {
                    b.HasOne("MM.ClientModels.Billing", "Billing")
                        .WithOne("BillingCommunication")
                        .HasForeignKey("MM.ClientModels.BillingCommunication", "Id")
                        .HasConstraintName("FK_PaymentCommunication_Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.City", b =>
                {
                    b.HasOne("MM.ClientModels.State", "State")
                        .WithMany("City")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_City_State");
                });

            modelBuilder.Entity("MM.ClientModels.ClientOrganization", b =>
                {
                    b.HasOne("MM.ClientModels.Currency", "Currency")
                        .WithMany("Client")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_Client_Currency");

                    b.HasOne("MM.ClientModels.DateSetting", "DateSetting")
                        .WithMany("Client")
                        .HasForeignKey("DateSettingId")
                        .HasConstraintName("FK_Client_DateSetting");

                    b.HasOne("MM.ClientModels.TimeFormat", "TimeFormat")
                        .WithMany("Client")
                        .HasForeignKey("TimeFormatId")
                        .HasConstraintName("FK_Client_TimeFormat");

                    b.HasOne("MM.ClientModels.TimeZone", "TimeZone")
                        .WithMany("Client")
                        .HasForeignKey("TimeZoneId")
                        .HasConstraintName("FK_Client_TimeZone");
                });

            modelBuilder.Entity("MM.ClientModels.ClientPlanHistory", b =>
                {
                    b.HasOne("MM.ClientModels.ClientUser", "BillingUser")
                        .WithMany("ClientPlanHistory")
                        .HasForeignKey("BillingUserId")
                        .HasConstraintName("FK_ClientPlanHistory_User")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.ClientUser", b =>
                {
                    b.HasOne("MM.ClientModels.Designation", "Designation")
                        .WithMany("User")
                        .HasForeignKey("DesignationId")
                        .HasConstraintName("FK_User_Designation");

                    b.HasOne("MM.ClientModels.Gender", "Gender")
                        .WithMany("User")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_User_Gender")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.ReferralType", "ReferralType")
                        .WithMany("User")
                        .HasForeignKey("ReferralTypeId")
                        .HasConstraintName("FK_User_ReferralType");

                    b.HasOne("MM.ClientModels.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_User_Role")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Title", "Title")
                        .WithMany("User")
                        .HasForeignKey("TitleId")
                        .HasConstraintName("FK_User_Title")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.CommunicationPreference", b =>
                {
                    b.HasOne("MM.ClientModels.CommunicationType", "CommunicationType")
                        .WithMany("CommunicationPreference")
                        .HasForeignKey("CommunicationTypeId")
                        .HasConstraintName("FK_CommunicationPreference_CommunicationType")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.Cpd", b =>
                {
                    b.HasOne("MM.ClientModels.ClientUser", "CpdawardedBy")
                        .WithMany("Cpd")
                        .HasForeignKey("CpdawardedById")
                        .HasConstraintName("FK_CPD_User")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("Cpd")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_CPD_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("Cpd")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_CPD_RelatedTo")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.CpdmemberCategorySetUp", b =>
                {
                    b.HasOne("MM.ClientModels.MemberCategory", "MemberCategory")
                        .WithMany("CpdmemberCategorySetUp")
                        .HasForeignKey("MemberCategoryId")
                        .HasConstraintName("FK_CPDMemberCategorySetUp_MemberCategory");

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("CpdmemberCategorySetUp")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_CPDMemberCategorySetUp_RelatedTo")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.CpdmemberLevelSetUp", b =>
                {
                    b.HasOne("MM.ClientModels.MemberLevel", "MemberLevel")
                        .WithMany("CpdmemberLevelSetUp")
                        .HasForeignKey("MemberLevelId")
                        .HasConstraintName("FK_CPDMemberLevelSetUp_MemberLevel");

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("CpdmemberLevelSetUp")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_CPDMemberLevelSetUp_RelatedTo")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.CpdmemberTeamSetUp", b =>
                {
                    b.HasOne("MM.ClientModels.MemberTeam", "MemberTeam")
                        .WithMany("CpdmemberTeamSetUp")
                        .HasForeignKey("MemberTeamId")
                        .HasConstraintName("FK_CPDMemberTeamSetUp_MemberTeam");

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("CpdmemberTeamSetUp")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_CPDMemberTeamSetUp_RelatedTo")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.CpdmemberTypeSetUp", b =>
                {
                    b.HasOne("MM.ClientModels.MemberType", "MemberType")
                        .WithMany("CpdmemberTypeSetUp")
                        .HasForeignKey("MemberTypeId")
                        .HasConstraintName("FK_CPDMemberTypeSetUp_MemberType");

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("CpdmemberTypeSetUp")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_CPDMemberTypeSetUp_RelatedTo")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.Donation", b =>
                {
                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("Donation")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Donation_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PromotionDetail", "PromotionDetail")
                        .WithMany("Donation")
                        .HasForeignKey("PromotionDetailId")
                        .HasConstraintName("FK_Donation_PromotionDetail");
                });

            modelBuilder.Entity("MM.ClientModels.EmailCcrule", b =>
                {
                    b.HasOne("MM.ClientModels.EmailType", "EmailType")
                        .WithMany("EmailCcrule")
                        .HasForeignKey("EmailTypeId")
                        .HasConstraintName("FK_EmailCCRule_EmailType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Role", "Role")
                        .WithMany("EmailCcrule")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_EmailCCRule_Role")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EmailTemplateContent", b =>
                {
                    b.HasOne("MM.ClientModels.EmailTemplateName", "EmailTemplateName")
                        .WithMany("EmailTemplateContent")
                        .HasForeignKey("EmailTemplateNameId")
                        .HasConstraintName("FK_EmailTemplateContent_EmailTemplateName")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EquipmentCount", b =>
                {
                    b.HasOne("MM.ClientModels.Equipment", "Equipment")
                        .WithMany("EquipmentCount")
                        .HasForeignKey("EquipmentId")
                        .HasConstraintName("FK_EquipmentCount_Equipment")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.Event", b =>
                {
                    b.HasOne("MM.ClientModels.Address", "Address")
                        .WithMany("Event")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Event_Address")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.ClientUser", "Organizer")
                        .WithMany("Event")
                        .HasForeignKey("OrganizerId")
                        .HasConstraintName("FK_Event_User")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.TimeZone", "TimeZone")
                        .WithMany("Event")
                        .HasForeignKey("TimeZoneId")
                        .HasConstraintName("FK_Event_TimeZone")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventAccess", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventAccess")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventAccess_Event")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventAttendance", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventAttendance")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventAttendance_Event")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("EventAttendance")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_EventAttendance_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventCommunication", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventCommunication")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventCommunication_Event")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventEquipment", b =>
                {
                    b.HasOne("MM.ClientModels.Equipment", "Equipment")
                        .WithMany("EventEquipment")
                        .HasForeignKey("EquipmentId")
                        .HasConstraintName("FK_EventEquipmentRequirement_Equipment")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventEquipment")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventEquipmentRequirement_Event")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventMinute", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventMinute")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventMinute_Event")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.EventMinuteStatus", "MinuteStatus")
                        .WithMany("EventMinute")
                        .HasForeignKey("MinuteStatusId")
                        .HasConstraintName("FK_EventMinute_EventMinuteStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventPreRequisiteEvent", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventPreRequisiteEventEvent")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventPreRequisiteEvent_Event")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Event", "PreRequisiteEvent")
                        .WithMany("EventPreRequisiteEventPreRequisiteEvent")
                        .HasForeignKey("PreRequisiteEventId")
                        .HasConstraintName("FK_EventPreRequisiteEvent_PreRequisiteEventId_Event")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventRegistration", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventRegistration")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventRegistration_Event")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.EventResponseType", "EventResponseType")
                        .WithMany("EventRegistration")
                        .HasForeignKey("EventResponseTypeId")
                        .HasConstraintName("FK_EventRegistration_EventResponseType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("EventRegistration")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_EventRegistration_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventRestrictionList", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventRestrictionList")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventRestrictionList_Event")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.MemberLevel", "MemberLevel")
                        .WithMany("EventRestrictionList")
                        .HasForeignKey("MemberLevelId")
                        .HasConstraintName("FK_EventRestrictionList_MemberLevel");

                    b.HasOne("MM.ClientModels.MemberTeam", "MemberTeam")
                        .WithMany("EventRestrictionList")
                        .HasForeignKey("MemberTeamId")
                        .HasConstraintName("FK_EventRestrictionList_MemberTeam");
                });

            modelBuilder.Entity("MM.ClientModels.EventRole", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventRole")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventRole_Event")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventRoleUserXref", b =>
                {
                    b.HasOne("MM.ClientModels.EventRole", "EventRole")
                        .WithMany("EventRoleUserXref")
                        .HasForeignKey("EventRoleId")
                        .HasConstraintName("FK_EventRoleUserXRef_EventRole")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.ClientUser", "User")
                        .WithMany("EventRoleUserXref")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_EventRoleUserXRef_User")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.Invoice", b =>
                {
                    b.HasOne("MM.ClientModels.InvoiceStatus", "InvoiceStatus")
                        .WithMany("Invoice")
                        .HasForeignKey("InvoiceStatusId")
                        .HasConstraintName("FK_Invoice_InvoiceStatus")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("Invoice")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Invoice_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PaymentGateway", "PaymentGateway")
                        .WithMany("Invoice")
                        .HasForeignKey("PaymentGatewayId")
                        .HasConstraintName("FK_Invoice_PaymentGateway")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("Invoice")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_Invoice_RelatedTo");
                });

            modelBuilder.Entity("MM.ClientModels.LandingPage", b =>
                {
                    b.HasOne("MM.ClientModels.MemberType", "MemberType")
                        .WithMany("LandingPage")
                        .HasForeignKey("MemberTypeId")
                        .HasConstraintName("FK_LandingPage_MemberType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Page", "Page")
                        .WithMany("LandingPage")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_LandingPage_Page")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.MarketingGroupXref", b =>
                {
                    b.HasOne("MM.ClientModels.MarketingGroup", "MarketingGroup")
                        .WithMany("MarketingGroupXref")
                        .HasForeignKey("MarketingGroupId")
                        .HasConstraintName("FK_MarketingGroupXRef_MarketingGroup")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("MarketingGroupXref")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MarketingGroupXRef_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.MarketingProfileXref", b =>
                {
                    b.HasOne("MM.ClientModels.MarketingProfile", "MarketingProfile")
                        .WithMany("MarketingProfileXref")
                        .HasForeignKey("MarketingProfileId")
                        .HasConstraintName("FK_MarketingProfileXRef_MarketingProfile")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("MarketingProfileXref")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MarketingProfileXRef_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.Member", b =>
                {
                    b.HasOne("MM.ClientModels.Gender", "Gender")
                        .WithMany("Member")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_Member_Gender")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.MemberBranch", "MemberBranch")
                        .WithMany("Member")
                        .HasForeignKey("MemberBranchId")
                        .HasConstraintName("FK_Member_MemberBranch");

                    b.HasOne("MM.ClientModels.MemberLevel", "MemberLevel")
                        .WithMany("Member")
                        .HasForeignKey("MemberLevelId")
                        .HasConstraintName("FK_Member_MemberLevel");

                    b.HasOne("MM.ClientModels.MemberStatus", "MemberStatus")
                        .WithMany("Member")
                        .HasForeignKey("MemberStatusId")
                        .HasConstraintName("FK_Member_MemberStatus");

                    b.HasOne("MM.ClientModels.MemberTeam", "MemberTeam")
                        .WithMany("Member")
                        .HasForeignKey("MemberTeamId")
                        .HasConstraintName("FK_Member_MemberTeam");

                    b.HasOne("MM.ClientModels.MemberType", "MemberType")
                        .WithMany("Member")
                        .HasForeignKey("MemberTypeId")
                        .HasConstraintName("FK_Member_MemberType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Organization", "Organization")
                        .WithMany("Member")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_Member_Organization");

                    b.HasOne("MM.ClientModels.OrganizationStructure", "OrganizationStructure")
                        .WithMany("Member")
                        .HasForeignKey("OrganizationStructureId")
                        .HasConstraintName("FK_Member_OrganizationStructure");

                    b.HasOne("MM.ClientModels.ReferralType", "ReferralType")
                        .WithMany("Member")
                        .HasForeignKey("ReferralTypeId")
                        .HasConstraintName("FK_Member_ReferralType");

                    b.HasOne("MM.ClientModels.Title", "Title")
                        .WithMany("Member")
                        .HasForeignKey("TitleId")
                        .HasConstraintName("FK_Member_Title")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.MemberAddress", b =>
                {
                    b.HasOne("MM.ClientModels.AddressType", "AddressType")
                        .WithMany("MemberAddress")
                        .HasForeignKey("AddressTypeId")
                        .HasConstraintName("FK_MemberAddress_AddressType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.MemberBranch", "Branch")
                        .WithMany("MemberAddress")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_MemberAddress_MemberBranch");

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("MemberAddress")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MemberAddress_Member");

                    b.HasOne("MM.ClientModels.Organization", "Organization")
                        .WithMany("MemberAddress")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_MemberAddress_Organization");
                });

            modelBuilder.Entity("MM.ClientModels.MemberAffliationXref", b =>
                {
                    b.HasOne("MM.ClientModels.Affliation", "Affliation")
                        .WithMany("MemberAffliationXref")
                        .HasForeignKey("AffliationId")
                        .HasConstraintName("FK_MemberAffliationXRef_Affliation");

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("MemberAffliationXref")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MemberAffliationXRef_Member");
                });

            modelBuilder.Entity("MM.ClientModels.MemberBankingDetail", b =>
                {
                    b.HasOne("MM.ClientModels.AccountType", "AccountType")
                        .WithMany("MemberBankingDetail")
                        .HasForeignKey("AccountTypeId")
                        .HasConstraintName("FK_MemberBankingDetail_AccountType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("MemberBankingDetail")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MemberBankingDetail_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.MemberBranch", b =>
                {
                    b.HasOne("MM.ClientModels.Organization", "Organization")
                        .WithMany("MemberBranch")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_MemberBranch_Organization")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.MemberCommunicationPreference", b =>
                {
                    b.HasOne("MM.ClientModels.CommunicationType", "CommunicationType")
                        .WithMany("MemberCommunicationPreference")
                        .HasForeignKey("CommunicationTypeId")
                        .HasConstraintName("FK_MemberCommunicationPreference_CommunicationType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("MemberCommunicationPreference")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MemberCommunicationPreference_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.MemberFile", b =>
                {
                    b.HasOne("MM.ClientModels.FileType", "FileType")
                        .WithMany("MemberFile")
                        .HasForeignKey("FileTypeId")
                        .HasConstraintName("FK_MemberFile_FileType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("MemberFile")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MemberFile_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.MemberPlanHistory", b =>
                {
                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("MemberPlanHistory")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MembershipHistory_Member");

                    b.HasOne("MM.ClientModels.PlanDetail", "MemberPlanDetail")
                        .WithMany("MemberPlanHistory")
                        .HasForeignKey("MemberPlanDetailId")
                        .HasConstraintName("FK_MemberPlanHistory_PlanDetail")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PlanMaster", "MemberPlanDetailNavigation")
                        .WithMany("MemberPlanHistory")
                        .HasForeignKey("MemberPlanDetailId")
                        .HasConstraintName("FK_MembershipHistory_PlanMaster")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Organization", "Organization")
                        .WithMany("MemberPlanHistory")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_MembershipHistory_Organization");
                });

            modelBuilder.Entity("MM.ClientModels.MemberQualificationXref", b =>
                {
                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("MemberQualificationXref")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MemberQualificationXRef_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Qualification", "Qualification")
                        .WithMany("MemberQualificationXref")
                        .HasForeignKey("QualificationId")
                        .HasConstraintName("FK_MemberQualificationXRef_Qualification");
                });

            modelBuilder.Entity("MM.ClientModels.MemberType", b =>
                {
                    b.HasOne("MM.ClientModels.MemberCategory", "MemberCategory")
                        .WithMany("MemberType")
                        .HasForeignKey("MemberCategoryId")
                        .HasConstraintName("FK_MemberType_MemberCategory")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.PaymentSetting", b =>
                {
                    b.HasOne("MM.ClientModels.Currency", "Currency")
                        .WithMany("PaymentSetting")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_PaymentSetting_Currency");
                });

            modelBuilder.Entity("MM.ClientModels.PaymentSettingAllowedCard", b =>
                {
                    b.HasOne("MM.ClientModels.PaymentCard", "PaymentCard")
                        .WithMany("PaymentSettingAllowedCard")
                        .HasForeignKey("PaymentCardId")
                        .HasConstraintName("FK_PaymentSettingAllowedCard_PaymentCard")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PaymentSetting", "PaymentSetting")
                        .WithMany("PaymentSettingAllowedCard")
                        .HasForeignKey("PaymentSettingId")
                        .HasConstraintName("FK_PaymentSettingAllowedCard_PaymentSetting")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.PlanCanChangeToXref", b =>
                {
                    b.HasOne("MM.ClientModels.PlanMaster", "FromPlanMaster")
                        .WithMany("PlanCanChangeToXrefFromPlanMaster")
                        .HasForeignKey("FromPlanMasterId")
                        .HasConstraintName("FK_MemberPlanCanChangeTo_PlanMaster")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PlanMaster", "ToPlanMaster")
                        .WithMany("PlanCanChangeToXrefToPlanMaster")
                        .HasForeignKey("ToPlanMasterId")
                        .HasConstraintName("FK_MemberPlanCanChangeTo_PlanMaster2")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.PlanDetail", b =>
                {
                    b.HasOne("MM.ClientModels.Currency", "Currency")
                        .WithMany("PlanDetail")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_PlanDetail_Currency")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PlanFrequency", "PlanFrequency")
                        .WithMany("PlanDetail")
                        .HasForeignKey("PlanFrequencyId")
                        .HasConstraintName("FK_PlanDetail_PlanFrequency")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PlanMaster", "PlanMaster")
                        .WithMany("PlanDetail")
                        .HasForeignKey("PlanMasterId")
                        .HasConstraintName("FK_PlanDetail_PlanMaster")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.PlanMaster", b =>
                {
                    b.HasOne("MM.ClientModels.MemberCategory", "MemberCategory")
                        .WithMany("PlanMaster")
                        .HasForeignKey("MemberCategoryId")
                        .HasConstraintName("FK_PlanMaster_MemberCategory")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PaymentSetting", "PaymentMethod")
                        .WithMany("PlanMaster")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK_PlanMaster_PaymentSetting")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.PromotionDetail", b =>
                {
                    b.HasOne("MM.ClientModels.MemberLevel", "MemberLevel")
                        .WithMany("PromotionDetail")
                        .HasForeignKey("MemberLevelId")
                        .HasConstraintName("FK_PromotionDetail_MemberLevel");

                    b.HasOne("MM.ClientModels.MemberType", "MemberType")
                        .WithMany("PromotionDetail")
                        .HasForeignKey("MemberTypeId")
                        .HasConstraintName("FK_PromotionDetail_MemberType");

                    b.HasOne("MM.ClientModels.PromotionMaster", "PromotionMaster")
                        .WithMany("PromotionDetail")
                        .HasForeignKey("PromotionMasterId")
                        .HasConstraintName("FK_PromotionDetail_PromotionMaster")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.PromotionResponse", b =>
                {
                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("PromotionResponse")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_PromotionResponse_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PromotionMaster", "PromotionMaster")
                        .WithMany("PromotionResponse")
                        .HasForeignKey("PromotionMasterId")
                        .HasConstraintName("FK_PromotionResponse_PromotionMaster")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PromotionResponseType", "PromotionResponseTypeNavigation")
                        .WithMany("PromotionResponse")
                        .HasForeignKey("PromotionResponseType")
                        .HasConstraintName("FK_PromotionResponse_PromotionResponseType")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.Refund", b =>
                {
                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("Refund")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Refund_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PaymentGateway", "PaymentGateway")
                        .WithMany("Refund")
                        .HasForeignKey("PaymentGatewayId")
                        .HasConstraintName("FK_Refund_PaymentGateway")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("Refund")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_Refund_RelatedTo");
                });

            modelBuilder.Entity("MM.ClientModels.RolePermissionXref", b =>
                {
                    b.HasOne("MM.ClientModels.Permission", "Permission")
                        .WithMany("RolePermissionXref")
                        .HasForeignKey("Permissionid")
                        .HasConstraintName("FK_RolePermissionXRef_Permission")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Role", "Role")
                        .WithMany("RolePermissionXref")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RolePermissionXRef_Role")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.State", b =>
                {
                    b.HasOne("MM.ClientModels.Country", "Country")
                        .WithMany("State")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_State_Country");
                });

            modelBuilder.Entity("MM.ClientModels.UserRoleXref", b =>
                {
                    b.HasOne("MM.ClientModels.Role", "Role")
                        .WithMany("UserRoleXref")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRole_Role")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.ClientUser", "User")
                        .WithMany("UserRoleXref")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRole_User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
