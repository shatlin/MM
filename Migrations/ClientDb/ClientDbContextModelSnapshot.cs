// <auto-generated />
using System;
using MM.ClientModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MM.Migrations.ClientDb
{
    [DbContext(typeof(ClientDbContext))]
    partial class ClientDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MM.ClientModels.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AccountType");
                });

            modelBuilder.Entity("MM.ClientModels.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<string>("BuidlingName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ComplexName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Gpscoordinates")
                        .HasColumnName("GPSCoordinates")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PrimaryContactNo")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PrimaryEmail")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("SecondaryContactNo")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("SecondaryEmail")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("StateId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("MM.ClientModels.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AddressType");
                });

            modelBuilder.Entity("MM.ClientModels.Affliation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Affliation");
                });

            modelBuilder.Entity("MM.ClientModels.BankingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("RoutingCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("BankingDetail");
                });

            modelBuilder.Entity("MM.ClientModels.Billing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommentsForPayer")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("PaidAmount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<DateTime?>("PaymentDueDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentGatewayId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentItem")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PaymentGatewayId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("Billing");
                });

            modelBuilder.Entity("MM.ClientModels.BillingCommunication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BillingId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Reminder1ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Reminder1Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Reminder1SentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Reminder2ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Reminder2Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Reminder2SentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Reminder3ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Reminder3Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Reminder3SentDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("BillingCommunication");
                });

            modelBuilder.Entity("MM.ClientModels.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("MM.ClientModels.ClientOrganization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AgreedToTerms")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ClientTimeZoneId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("CurrencyDecimalPlaces")
                        .HasColumnType("int");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("DateSettingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("TimeFormatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientTimeZoneId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DateSettingId");

                    b.HasIndex("TimeFormatId");

                    b.ToTable("ClientOrganization");
                });

            modelBuilder.Entity("MM.ClientModels.ClientPlanHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BillingUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsCurrentPlan")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int>("PlanDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BillingUserId");

                    b.ToTable("ClientPlanHistory");
                });

            modelBuilder.Entity("MM.ClientModels.ClientTimeZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ClientTimeZone");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(4992),
                            Description = "(GMT-12:00) International Date Line West",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(5972),
                            Name = "Dateline Standard Time"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6888),
                            Description = "(GMT-11:00) MIdway Island, Samoa",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6910),
                            Name = "Samoa Standard Time"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6927),
                            Description = "(GMT-10:00) Hawaii",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6930),
                            Name = "Hawaiian Standard Time"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6936),
                            Description = "(GMT-09:00) Alaska",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6938),
                            Name = "Alaskan Standard Time"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6942),
                            Description = "(GMT-08:00) Pacific Time (US and Canada); Tijuana",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6944),
                            Name = "Pacific Standard Time"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6947),
                            Description = "(GMT-07:00) Mountain Time (US and Canada)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6949),
                            Name = "Mountain Standard Time"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6953),
                            Description = "(GMT-07:00) Chihuahua, La Paz, Mazatlan",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6955),
                            Name = "Mexico Standard Time 2"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6959),
                            Description = "(GMT-07:00) Arizona",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6961),
                            Name = "U.S. Mountain Standard Time"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6965),
                            Description = "(GMT-06:00) Central Time (US and Canada)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6966),
                            Name = "Central Standard Time"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6970),
                            Description = "(GMT-06:00) Saskatchewan",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6972),
                            Name = "Canada Central Standard Time"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6976),
                            Description = "(GMT-06:00) Guadalajara, Mexico City, Monterrey",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6978),
                            Name = "Mexico Standard Time"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6982),
                            Description = "(GMT-06:00) Central America",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6984),
                            Name = "Central America Standard Time"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6988),
                            Description = "(GMT-05:00) Eastern Time (US and Canada)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6990),
                            Name = "Eastern Standard Time"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6993),
                            Description = "(GMT-05:00) Indiana (East)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6995),
                            Name = "U.S. Eastern Standard Time"
                        },
                        new
                        {
                            Id = 15,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(6999),
                            Description = "(GMT-05:00) Bogota, Lima, Quito",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7001),
                            Name = "S.A. Pacific Standard Time"
                        },
                        new
                        {
                            Id = 16,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7005),
                            Description = "(GMT-04:00) Atlantic Time (Canada)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7006),
                            Name = "Atlantic Standard Time"
                        },
                        new
                        {
                            Id = 17,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7010),
                            Description = "(GMT-04:00) Georgetown, La Paz, San Juan",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7012),
                            Name = "S.A. Western Standard Time"
                        },
                        new
                        {
                            Id = 18,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7089),
                            Description = "(GMT-04:00) Santiago",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7092),
                            Name = "Pacific S.A. Standard Time"
                        },
                        new
                        {
                            Id = 19,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7095),
                            Description = "(GMT-03:30) Newfoundland",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7097),
                            Name = "Newfoundland and Labrador Standard Time"
                        },
                        new
                        {
                            Id = 20,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7101),
                            Description = "(GMT-03:00) Brasilia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7103),
                            Name = "E. South America Standard Time"
                        },
                        new
                        {
                            Id = 21,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7107),
                            Description = "(GMT-03:00) Georgetown",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7109),
                            Name = "S.A. Eastern Standard Time"
                        },
                        new
                        {
                            Id = 22,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7113),
                            Description = "(GMT-03:00) Greenland",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7115),
                            Name = "Greenland Standard Time"
                        },
                        new
                        {
                            Id = 23,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7118),
                            Description = "(GMT-02:00) MId-Atlantic",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7120),
                            Name = "MId-Atlantic Standard Time"
                        },
                        new
                        {
                            Id = 24,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7124),
                            Description = "(GMT-01:00) Azores",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7126),
                            Name = "Azores Standard Time"
                        },
                        new
                        {
                            Id = 25,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7130),
                            Description = "(GMT-01:00) Cape Verde Islands",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7131),
                            Name = "Cape Verde Standard Time"
                        },
                        new
                        {
                            Id = 26,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7135),
                            Description = "(GMT) Greenwich Mean Time: Dublin, Edinburgh, Lisbon, London",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7137),
                            Name = "GMT Standard Time"
                        },
                        new
                        {
                            Id = 27,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7143),
                            Description = "(GMT) Monrovia, Reykjavik",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7145),
                            Name = "Greenwich Standard Time"
                        },
                        new
                        {
                            Id = 28,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7150),
                            Description = "(GMT+01:00) Belgrade, Bratislava, Budapest, Ljubljana, Prague",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7152),
                            Name = "Central Europe Standard Time"
                        },
                        new
                        {
                            Id = 29,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7155),
                            Description = "(GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7157),
                            Name = "Central European Standard Time"
                        },
                        new
                        {
                            Id = 30,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7161),
                            Description = "(GMT+01:00) Brussels, Copenhagen, MadrId, Paris",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7163),
                            Name = "Romance Standard Time"
                        },
                        new
                        {
                            Id = 31,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7167),
                            Description = "(GMT+01:00) Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7168),
                            Name = "W. Europe Standard Time"
                        },
                        new
                        {
                            Id = 32,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7173),
                            Description = "(GMT+01:00) West Central Africa",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7174),
                            Name = "W. Central Africa Standard Time"
                        },
                        new
                        {
                            Id = 33,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7178),
                            Description = "(GMT+02:00) Minsk",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7180),
                            Name = "E. Europe Standard Time"
                        },
                        new
                        {
                            Id = 34,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7183),
                            Description = "(GMT+02:00) Cairo",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7185),
                            Name = "Egypt Standard Time"
                        },
                        new
                        {
                            Id = 35,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7192),
                            Description = "(GMT+02:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7194),
                            Name = "FLE Standard Time"
                        },
                        new
                        {
                            Id = 36,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7198),
                            Description = "(GMT+02:00) Athens, Bucharest, Istanbul",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7200),
                            Name = "GTB Standard Time"
                        },
                        new
                        {
                            Id = 37,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7204),
                            Description = "(GMT+02:00) Jerusalem",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7206),
                            Name = "Israel Standard Time"
                        },
                        new
                        {
                            Id = 38,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7209),
                            Description = "(GMT+02:00) Harare, Pretoria",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7211),
                            Name = "South Africa Standard Time"
                        },
                        new
                        {
                            Id = 39,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7215),
                            Description = "(GMT+03:00) Moscow, St. Petersburg, Volgograd",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7216),
                            Name = "Russian Standard Time"
                        },
                        new
                        {
                            Id = 40,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7220),
                            Description = "(GMT+03:00) Kuwait, Riyadh",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7222),
                            Name = "Arab Standard Time"
                        },
                        new
                        {
                            Id = 41,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7226),
                            Description = "(GMT+03:00) Nairobi",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7228),
                            Name = "E. Africa Standard Time"
                        },
                        new
                        {
                            Id = 42,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7231),
                            Description = "(GMT+03:00) Baghdad",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7234),
                            Name = "Arabic Standard Time"
                        },
                        new
                        {
                            Id = 43,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7237),
                            Description = "(GMT+03:30) Tehran",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7239),
                            Name = "Iran Standard Time"
                        },
                        new
                        {
                            Id = 44,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7243),
                            Description = "(GMT+04:00) Abu Dhabi, Muscat",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7245),
                            Name = "Arabian Standard Time"
                        },
                        new
                        {
                            Id = 45,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7249),
                            Description = "(GMT+04:00) Baku, Tbilisi, Yerevan",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7251),
                            Name = "Caucasus Standard Time"
                        },
                        new
                        {
                            Id = 46,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7254),
                            Description = "(GMT+04:30) Kabul",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7256),
                            Name = "Transitional Islamic State of Afghanistan Standard Time"
                        },
                        new
                        {
                            Id = 47,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7260),
                            Description = "(GMT+05:00) Ekaterinburg",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7262),
                            Name = "Ekaterinburg Standard Time"
                        },
                        new
                        {
                            Id = 48,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7266),
                            Description = "(GMT+05:00) Tashkent",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7268),
                            Name = "West Asia Standard Time"
                        },
                        new
                        {
                            Id = 49,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7272),
                            Description = "(GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7273),
                            Name = "India Standard Time"
                        },
                        new
                        {
                            Id = 50,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7277),
                            Description = "(GMT+05:45) Kathmandu",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7279),
                            Name = "Nepal Standard Time"
                        },
                        new
                        {
                            Id = 51,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7283),
                            Description = "(GMT+06:00) Astana, Dhaka",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7284),
                            Name = "Central Asia Standard Time"
                        },
                        new
                        {
                            Id = 52,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7288),
                            Description = "(GMT+06:00) Sri Jayawardenepura",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7290),
                            Name = "Sri Lanka Standard Time"
                        },
                        new
                        {
                            Id = 53,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7303),
                            Description = "(GMT+06:00) Almaty, Novosibirsk",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7305),
                            Name = "N. Central Asia Standard Time"
                        },
                        new
                        {
                            Id = 54,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7309),
                            Description = "(GMT+06:30) Yangon (Rangoon)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7311),
                            Name = "Myanmar Standard Time"
                        },
                        new
                        {
                            Id = 55,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7314),
                            Description = "(GMT+07:00) Bangkok, Hanoi, Jakarta",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7316),
                            Name = "S.E. Asia Standard Time"
                        },
                        new
                        {
                            Id = 56,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7320),
                            Description = "(GMT+07:00) Krasnoyarsk",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7322),
                            Name = "North Asia Standard Time"
                        },
                        new
                        {
                            Id = 57,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7325),
                            Description = "(GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7327),
                            Name = "China Standard Time"
                        },
                        new
                        {
                            Id = 58,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7332),
                            Description = "(GMT+08:00) Kuala Lumpur, Singapore",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7334),
                            Name = "Singapore Standard Time"
                        },
                        new
                        {
                            Id = 59,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7337),
                            Description = "(GMT+08:00) Taipei",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7339),
                            Name = "Taipei Standard Time"
                        },
                        new
                        {
                            Id = 60,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7343),
                            Description = "(GMT+08:00) Perth",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7345),
                            Name = "W. Australia Standard Time"
                        },
                        new
                        {
                            Id = 61,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7349),
                            Description = "(GMT+08:00) Irkutsk, Ulaanbaatar",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7350),
                            Name = "North Asia East Standard Time"
                        },
                        new
                        {
                            Id = 62,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7355),
                            Description = "(GMT+09:00) Seoul",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7356),
                            Name = "Korea Standard Time"
                        },
                        new
                        {
                            Id = 63,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7360),
                            Description = "(GMT+09:00) Osaka, Sapporo, Tokyo",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7362),
                            Name = "Tokyo Standard Time"
                        },
                        new
                        {
                            Id = 64,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7366),
                            Description = "(GMT+09:00) Yakutsk",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7368),
                            Name = "Yakutsk Standard Time"
                        },
                        new
                        {
                            Id = 65,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7372),
                            Description = "(GMT+09:30) Darwin",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7373),
                            Name = "A.U.S. Central Standard Time"
                        },
                        new
                        {
                            Id = 66,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7377),
                            Description = "(GMT+09:30) AdelaIde",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7379),
                            Name = "Cen. Australia Standard Time"
                        },
                        new
                        {
                            Id = 67,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7382),
                            Description = "(GMT+10:00) Canberra, Melbourne, Sydney",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7384),
                            Name = "A.U.S. Eastern Standard Time"
                        },
                        new
                        {
                            Id = 68,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7388),
                            Description = "(GMT+10:00) Brisbane",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7390),
                            Name = "E. Australia Standard Time"
                        },
                        new
                        {
                            Id = 69,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7393),
                            Description = "(GMT+10:00) Hobart",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7395),
                            Name = "Tasmania Standard Time"
                        },
                        new
                        {
                            Id = 70,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7400),
                            Description = "(GMT+10:00) Vladivostok",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7402),
                            Name = "Vladivostok Standard Time"
                        },
                        new
                        {
                            Id = 71,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7406),
                            Description = "(GMT+10:00) Guam, Port Moresby",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7408),
                            Name = "West Pacific Standard Time"
                        },
                        new
                        {
                            Id = 72,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7411),
                            Description = "(GMT+11:00) Magadan, Solomon Islands, New Caledonia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7413),
                            Name = "Central Pacific Standard Time"
                        },
                        new
                        {
                            Id = 73,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7417),
                            Description = "(GMT+12:00) Fiji, Kamchatka, Marshall Is.",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7418),
                            Name = "Fiji Islands Standard Time"
                        },
                        new
                        {
                            Id = 74,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7422),
                            Description = "(GMT+12:00) Auckland, Wellington",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7424),
                            Name = "New Zealand Standard Time"
                        },
                        new
                        {
                            Id = 75,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7427),
                            Description = "(GMT+13:00) Nuku'alofa",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7429),
                            Name = "Tonga Standard Time"
                        },
                        new
                        {
                            Id = 76,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7433),
                            Description = "(GMT-03:00) Buenos Aires",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7435),
                            Name = "Azerbaijan Standard Time "
                        },
                        new
                        {
                            Id = 77,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7439),
                            Description = "(GMT+02:00) Beirut",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7441),
                            Name = "MIddle East Standard Time"
                        },
                        new
                        {
                            Id = 78,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7444),
                            Description = "(GMT+02:00) Amman",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7446),
                            Name = "Jordan Standard Time"
                        },
                        new
                        {
                            Id = 79,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7450),
                            Description = "(GMT-06:00) Guadalajara, Mexico City, Monterrey - New",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7451),
                            Name = "Central Standard Time (Mexico)"
                        },
                        new
                        {
                            Id = 80,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7455),
                            Description = "(GMT-07:00) Chihuahua, La Paz, Mazatlan - New",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7457),
                            Name = "Mountain Standard Time (Mexico)"
                        },
                        new
                        {
                            Id = 81,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7461),
                            Description = "(GMT-08:00) Tijuana, Baja California",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7462),
                            Name = "Pacific Standard Time (Mexico)"
                        },
                        new
                        {
                            Id = 82,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7466),
                            Description = "(GMT+02:00) Windhoek",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7468),
                            Name = "Namibia Standard Time"
                        },
                        new
                        {
                            Id = 83,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7471),
                            Description = "(GMT+03:00) Tbilisi",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7473),
                            Name = "Georgian Standard Time"
                        },
                        new
                        {
                            Id = 84,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7477),
                            Description = "(GMT-04:00) Manaus",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7479),
                            Name = "Central Brazilian Standard Time"
                        },
                        new
                        {
                            Id = 85,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7482),
                            Description = "(GMT-03:00) MontevIdeo",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7484),
                            Name = "MontevIdeo Standard Time"
                        },
                        new
                        {
                            Id = 86,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7488),
                            Description = "(GMT+04:00) Yerevan",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7489),
                            Name = "Armenian Standard Time"
                        },
                        new
                        {
                            Id = 87,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7493),
                            Description = "(GMT-04:30) Caracas",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7495),
                            Name = "Venezuela Standard Time"
                        },
                        new
                        {
                            Id = 88,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7505),
                            Description = "(GMT-03:00) Buenos Aires",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7507),
                            Name = "Argentina Standard Time"
                        },
                        new
                        {
                            Id = 89,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7510),
                            Description = "(GMT) Casablanca",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7512),
                            Name = "Morocco Standard Time"
                        },
                        new
                        {
                            Id = 90,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7516),
                            Description = "(GMT+05:00) Islamabad, Karachi",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7518),
                            Name = "Pakistan Standard Time"
                        },
                        new
                        {
                            Id = 91,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7521),
                            Description = "(GMT+04:00) Port Louis",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7523),
                            Name = "Mauritius Standard Time"
                        },
                        new
                        {
                            Id = 92,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7531),
                            Description = "(GMT) Coordinated Universal Time",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7533),
                            Name = "UTC"
                        },
                        new
                        {
                            Id = 93,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7537),
                            Description = "(GMT-04:00) Asuncion",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7538),
                            Name = "Paraguay Standard Time"
                        },
                        new
                        {
                            Id = 94,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7542),
                            Description = "(GMT+12:00) Petropavlovsk-Kamchatsky",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 652, DateTimeKind.Local).AddTicks(7544),
                            Name = "Kamchatka Standard Time"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.ClientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ClientType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 0, DateTimeKind.Local).AddTicks(6702),
                            Description = "Individual",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 2, DateTimeKind.Local).AddTicks(9594),
                            Name = "Individual"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 3, DateTimeKind.Local).AddTicks(3361),
                            Description = "Organization",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 3, DateTimeKind.Local).AddTicks(3416),
                            Name = "Organization"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.ClientUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("BillingContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("DesignationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<bool>("EmailActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsInternalUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("PrimaryContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ReferralTypeId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("TermsAccepted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DesignationId");

                    b.HasIndex("GenderId");

                    b.HasIndex("ReferralTypeId");

                    b.HasIndex("RoleId");

                    b.HasIndex("TitleId");

                    b.ToTable("ClientUser");
                });

            modelBuilder.Entity("MM.ClientModels.CommunicationPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CommunicationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("PreferredTimeFrom")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan?>("PreferredTimeTo")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("CommunicationTypeId");

                    b.ToTable("CommunicationPreference");
                });

            modelBuilder.Entity("MM.ClientModels.CommunicationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CommunicationType");
                });

            modelBuilder.Entity("MM.ClientModels.CorrespondenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CorrespondenceType");
                });

            modelBuilder.Entity("MM.ClientModels.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(5) CHARACTER SET utf8mb4")
                        .HasMaxLength(5);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "AF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(7391),
                            Description = "Afghanistan",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(8310),
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = 2,
                            Code = "AL",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9400),
                            Description = "Albania",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9422),
                            Name = "Albania"
                        },
                        new
                        {
                            Id = 3,
                            Code = "DZ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9439),
                            Description = "Algeria",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9441),
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = 4,
                            Code = "AS",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9446),
                            Description = "American Samoa",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9448),
                            Name = "American Samoa"
                        },
                        new
                        {
                            Id = 5,
                            Code = "AD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9454),
                            Description = "Andorra",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9455),
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = 6,
                            Code = "AO",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9460),
                            Description = "Angola",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9462),
                            Name = "Angola"
                        },
                        new
                        {
                            Id = 7,
                            Code = "AI",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9466),
                            Description = "Anguilla",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9468),
                            Name = "Anguilla"
                        },
                        new
                        {
                            Id = 8,
                            Code = "AQ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9472),
                            Description = "Antarctica",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9474),
                            Name = "Antarctica"
                        },
                        new
                        {
                            Id = 9,
                            Code = "AG",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9478),
                            Description = "Antigua and Barbuda",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9480),
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = 10,
                            Code = "AR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9484),
                            Description = "Argentina",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9486),
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 11,
                            Code = "AM",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9490),
                            Description = "Armenia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9492),
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = 12,
                            Code = "AW",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9497),
                            Description = "Aruba",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9498),
                            Name = "Aruba"
                        },
                        new
                        {
                            Id = 13,
                            Code = "AU",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9502),
                            Description = "Australia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9504),
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 14,
                            Code = "AT",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9508),
                            Description = "Austria",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9509),
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 15,
                            Code = "AZ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9515),
                            Description = "Azerbaijan",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9517),
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = 16,
                            Code = "BS",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9520),
                            Description = "Bahamas (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9522),
                            Name = "Bahamas (the)"
                        },
                        new
                        {
                            Id = 17,
                            Code = "BH",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9526),
                            Description = "Bahrain",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9527),
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = 18,
                            Code = "BD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9531),
                            Description = "Bangladesh",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9533),
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = 19,
                            Code = "BB",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9537),
                            Description = "Barbados",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9538),
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = 20,
                            Code = "BY",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9544),
                            Description = "Belarus",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9546),
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = 21,
                            Code = "BE",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9549),
                            Description = "Belgium",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9551),
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 22,
                            Code = "BZ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9556),
                            Description = "Belize",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9557),
                            Name = "Belize"
                        },
                        new
                        {
                            Id = 23,
                            Code = "BJ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9562),
                            Description = "Benin",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9564),
                            Name = "Benin"
                        },
                        new
                        {
                            Id = 24,
                            Code = "BM",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9568),
                            Description = "Bermuda",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9570),
                            Name = "Bermuda"
                        },
                        new
                        {
                            Id = 25,
                            Code = "BT",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9574),
                            Description = "Bhutan",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9575),
                            Name = "Bhutan"
                        },
                        new
                        {
                            Id = 26,
                            Code = "BO",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9579),
                            Description = "Bolivia (Plurinational State of)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9581),
                            Name = "Bolivia (Plurinational State of)"
                        },
                        new
                        {
                            Id = 27,
                            Code = "BQ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9585),
                            Description = "Bonaire, Sint Eustatius and Saba",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9586),
                            Name = "Bonaire, Sint Eustatius and Saba"
                        },
                        new
                        {
                            Id = 28,
                            Code = "BA",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9591),
                            Description = "Bosnia and Herzegovina",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9593),
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = 29,
                            Code = "BW",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9596),
                            Description = "Botswana",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9598),
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = 30,
                            Code = "BV",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9602),
                            Description = "Bouvet Island",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9604),
                            Name = "Bouvet Island"
                        },
                        new
                        {
                            Id = 31,
                            Code = "BR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9625),
                            Description = "Brazil",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9627),
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = 32,
                            Code = "IO",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9631),
                            Description = "British Indian Ocean Territory (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9632),
                            Name = "British Indian Ocean Territory (the)"
                        },
                        new
                        {
                            Id = 33,
                            Code = "BN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9636),
                            Description = "Brunei Darussalam",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9638),
                            Name = "Brunei Darussalam"
                        },
                        new
                        {
                            Id = 34,
                            Code = "BG",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9642),
                            Description = "Bulgaria",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9643),
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 35,
                            Code = "BF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9647),
                            Description = "Burkina Faso",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9649),
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            Id = 36,
                            Code = "BI",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9653),
                            Description = "Burundi",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9655),
                            Name = "Burundi"
                        },
                        new
                        {
                            Id = 37,
                            Code = "CV",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9659),
                            Description = "Cabo Verde",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9661),
                            Name = "Cabo Verde"
                        },
                        new
                        {
                            Id = 38,
                            Code = "KH",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9665),
                            Description = "Cambodia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9667),
                            Name = "Cambodia"
                        },
                        new
                        {
                            Id = 39,
                            Code = "CM",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9670),
                            Description = "Cameroon",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9672),
                            Name = "Cameroon"
                        },
                        new
                        {
                            Id = 40,
                            Code = "CA",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9675),
                            Description = "Canada",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9677),
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 41,
                            Code = "KY",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9681),
                            Description = "Cayman Islands (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9682),
                            Name = "Cayman Islands (the)"
                        },
                        new
                        {
                            Id = 42,
                            Code = "CF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9688),
                            Description = "Central African Republic (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9689),
                            Name = "Central African Republic (the)"
                        },
                        new
                        {
                            Id = 43,
                            Code = "TD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9693),
                            Description = "Chad",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9695),
                            Name = "Chad"
                        },
                        new
                        {
                            Id = 44,
                            Code = "CL",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9699),
                            Description = "Chile",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9701),
                            Name = "Chile"
                        },
                        new
                        {
                            Id = 45,
                            Code = "CN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9704),
                            Description = "China",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9706),
                            Name = "China"
                        },
                        new
                        {
                            Id = 46,
                            Code = "CX",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9710),
                            Description = "Christmas Island",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9712),
                            Name = "Christmas Island"
                        },
                        new
                        {
                            Id = 47,
                            Code = "CC",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9715),
                            Description = "Cocos (Keeling) Islands (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9717),
                            Name = "Cocos (Keeling) Islands (the)"
                        },
                        new
                        {
                            Id = 48,
                            Code = "CO",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9721),
                            Description = "Colombia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9722),
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = 49,
                            Code = "KM",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9726),
                            Description = "Comoros (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9728),
                            Name = "Comoros (the)"
                        },
                        new
                        {
                            Id = 50,
                            Code = "CD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9731),
                            Description = "Congo (the Democratic Republic of the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9733),
                            Name = "Congo (the Democratic Republic of the)"
                        },
                        new
                        {
                            Id = 51,
                            Code = "CG",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9737),
                            Description = "Congo (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9738),
                            Name = "Congo (the)"
                        },
                        new
                        {
                            Id = 52,
                            Code = "CK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9743),
                            Description = "Cook Islands (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9744),
                            Name = "Cook Islands (the)"
                        },
                        new
                        {
                            Id = 53,
                            Code = "CR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9748),
                            Description = "Costa Rica",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9751),
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = 54,
                            Code = "HR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9754),
                            Description = "Croatia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9756),
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = 55,
                            Code = "CU",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9760),
                            Description = "Cuba",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9762),
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = 56,
                            Code = "CW",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9765),
                            Description = "Curaçao",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9767),
                            Name = "Curaçao"
                        },
                        new
                        {
                            Id = 57,
                            Code = "CY",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9771),
                            Description = "Cyprus",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9772),
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = 58,
                            Code = "CZ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9776),
                            Description = "Czechia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9778),
                            Name = "Czechia"
                        },
                        new
                        {
                            Id = 59,
                            Code = "CI",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9782),
                            Description = "Côte d'Ivoire",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9784),
                            Name = "Côte d'Ivoire"
                        },
                        new
                        {
                            Id = 60,
                            Code = "DK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9788),
                            Description = "Denmark",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9790),
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 61,
                            Code = "DJ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9794),
                            Description = "Djibouti",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9795),
                            Name = "Djibouti"
                        },
                        new
                        {
                            Id = 62,
                            Code = "DM",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9799),
                            Description = "Dominica",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9801),
                            Name = "Dominica"
                        },
                        new
                        {
                            Id = 63,
                            Code = "DO",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9804),
                            Description = "Dominican Republic (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9806),
                            Name = "Dominican Republic (the)"
                        },
                        new
                        {
                            Id = 64,
                            Code = "EC",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9810),
                            Description = "Ecuador",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9813),
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = 65,
                            Code = "EG",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9827),
                            Description = "Egypt",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9829),
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 66,
                            Code = "SV",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9834),
                            Description = "El Salvador",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9835),
                            Name = "El Salvador"
                        },
                        new
                        {
                            Id = 67,
                            Code = "GQ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9839),
                            Description = "Equatorial Guinea",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9841),
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = 68,
                            Code = "ER",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9845),
                            Description = "Eritrea",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9847),
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = 69,
                            Code = "EE",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9851),
                            Description = "Estonia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9853),
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = 70,
                            Code = "SZ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9857),
                            Description = "Eswatini",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9859),
                            Name = "Eswatini"
                        },
                        new
                        {
                            Id = 71,
                            Code = "ET",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9862),
                            Description = "Ethiopia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9864),
                            Name = "Ethiopia"
                        },
                        new
                        {
                            Id = 72,
                            Code = "FK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9868),
                            Description = "Falkland Islands (the) [Malvinas]",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9870),
                            Name = "Falkland Islands (the) [Malvinas]"
                        },
                        new
                        {
                            Id = 73,
                            Code = "FO",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9873),
                            Description = "Faroe Islands (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9875),
                            Name = "Faroe Islands (the)"
                        },
                        new
                        {
                            Id = 74,
                            Code = "FJ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9879),
                            Description = "Fiji",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9880),
                            Name = "Fiji"
                        },
                        new
                        {
                            Id = 75,
                            Code = "FI",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9884),
                            Description = "Finland",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9886),
                            Name = "Finland"
                        },
                        new
                        {
                            Id = 76,
                            Code = "FR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9891),
                            Description = "France",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9892),
                            Name = "France"
                        },
                        new
                        {
                            Id = 77,
                            Code = "GF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9896),
                            Description = "French Guiana",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9898),
                            Name = "French Guiana"
                        },
                        new
                        {
                            Id = 78,
                            Code = "PF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9901),
                            Description = "French Polynesia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9903),
                            Name = "French Polynesia"
                        },
                        new
                        {
                            Id = 79,
                            Code = "TF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9907),
                            Description = "French Southern Territories (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9909),
                            Name = "French Southern Territories (the)"
                        },
                        new
                        {
                            Id = 80,
                            Code = "GA",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9913),
                            Description = "Gabon",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9914),
                            Name = "Gabon"
                        },
                        new
                        {
                            Id = 81,
                            Code = "GM",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9918),
                            Description = "Gambia (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9920),
                            Name = "Gambia (the)"
                        },
                        new
                        {
                            Id = 82,
                            Code = "GE",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9923),
                            Description = "Georgia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9925),
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 83,
                            Code = "DE",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9929),
                            Description = "Germany",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9930),
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 84,
                            Code = "GH",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9935),
                            Description = "Ghana",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9937),
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = 85,
                            Code = "GI",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9943),
                            Description = "Gibraltar",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9945),
                            Name = "Gibraltar"
                        },
                        new
                        {
                            Id = 86,
                            Code = "GR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9948),
                            Description = "Greece",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9950),
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 87,
                            Code = "GL",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9955),
                            Description = "Greenland",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9956),
                            Name = "Greenland"
                        },
                        new
                        {
                            Id = 88,
                            Code = "GD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9960),
                            Description = "Grenada",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9962),
                            Name = "Grenada"
                        },
                        new
                        {
                            Id = 89,
                            Code = "GP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9965),
                            Description = "Guadeloupe",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9967),
                            Name = "Guadeloupe"
                        },
                        new
                        {
                            Id = 90,
                            Code = "GU",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9971),
                            Description = "Guam",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9973),
                            Name = "Guam"
                        },
                        new
                        {
                            Id = 91,
                            Code = "GT",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9976),
                            Description = "Guatemala",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9978),
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = 92,
                            Code = "GG",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9983),
                            Description = "Guernsey",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9985),
                            Name = "Guernsey"
                        },
                        new
                        {
                            Id = 93,
                            Code = "GN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9989),
                            Description = "Guinea",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9991),
                            Name = "Guinea"
                        },
                        new
                        {
                            Id = 94,
                            Code = "GW",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9995),
                            Description = "Guinea-Bissau",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 116, DateTimeKind.Local).AddTicks(9996),
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            Id = 95,
                            Code = "GY",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local),
                            Description = "Guyana",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(2),
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = 96,
                            Code = "HT",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(6),
                            Description = "Haiti",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(7),
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = 97,
                            Code = "HM",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(11),
                            Description = "Heard Island and McDonald Islands",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(13),
                            Name = "Heard Island and McDonald Islands"
                        },
                        new
                        {
                            Id = 98,
                            Code = "VA",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(17),
                            Description = "Holy See (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(19),
                            Name = "Holy See (the)"
                        },
                        new
                        {
                            Id = 99,
                            Code = "HN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(29),
                            Description = "Honduras",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(31),
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = 100,
                            Code = "HK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(34),
                            Description = "Hong Kong",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(36),
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = 101,
                            Code = "HU",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(40),
                            Description = "Hungary",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(42),
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = 102,
                            Code = "IS",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(45),
                            Description = "Iceland",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(47),
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = 103,
                            Code = "IN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(51),
                            Description = "India",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(53),
                            Name = "India"
                        },
                        new
                        {
                            Id = 104,
                            Code = "ID",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(56),
                            Description = "Indonesia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(58),
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = 105,
                            Code = "IR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(62),
                            Description = "Iran (Islamic Republic of)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(63),
                            Name = "Iran (Islamic Republic of)"
                        },
                        new
                        {
                            Id = 106,
                            Code = "IQ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(67),
                            Description = "Iraq",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(69),
                            Name = "Iraq"
                        },
                        new
                        {
                            Id = 107,
                            Code = "IE",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(73),
                            Description = "Ireland",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(74),
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 108,
                            Code = "IM",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(78),
                            Description = "Isle of Man",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(80),
                            Name = "Isle of Man"
                        },
                        new
                        {
                            Id = 109,
                            Code = "IL",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(84),
                            Description = "Israel",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(86),
                            Name = "Israel"
                        },
                        new
                        {
                            Id = 110,
                            Code = "IT",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(90),
                            Description = "Italy",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(91),
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 111,
                            Code = "JM",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(95),
                            Description = "Jamaica",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(97),
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = 112,
                            Code = "JP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(100),
                            Description = "Japan",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(102),
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 113,
                            Code = "JE",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(106),
                            Description = "Jersey",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(107),
                            Name = "Jersey"
                        },
                        new
                        {
                            Id = 114,
                            Code = "JO",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(111),
                            Description = "Jordan",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(113),
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = 115,
                            Code = "KZ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(116),
                            Description = "Kazakhstan",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(118),
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = 116,
                            Code = "KE",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(122),
                            Description = "Kenya",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(123),
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = 117,
                            Code = "KI",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(127),
                            Description = "Kiribati",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(129),
                            Name = "Kiribati"
                        },
                        new
                        {
                            Id = 118,
                            Code = "KP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(132),
                            Description = "Korea (the Democratic People's Republic of)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(134),
                            Name = "Korea (the Democratic People's Republic of)"
                        },
                        new
                        {
                            Id = 119,
                            Code = "KR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(138),
                            Description = "Korea (the Republic of)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(140),
                            Name = "Korea (the Republic of)"
                        },
                        new
                        {
                            Id = 120,
                            Code = "KW",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(143),
                            Description = "Kuwait",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(146),
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = 121,
                            Code = "KG",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(149),
                            Description = "Kyrgyzstan",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(151),
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = 122,
                            Code = "LA",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(155),
                            Description = "Lao People's Democratic Republic (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(156),
                            Name = "Lao People's Democratic Republic (the)"
                        },
                        new
                        {
                            Id = 123,
                            Code = "LV",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(160),
                            Description = "Latvia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(162),
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = 124,
                            Code = "LB",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(166),
                            Description = "Lebanon",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(167),
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = 125,
                            Code = "LS",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(171),
                            Description = "Lesotho",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(173),
                            Name = "Lesotho"
                        },
                        new
                        {
                            Id = 126,
                            Code = "LR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(176),
                            Description = "Liberia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(178),
                            Name = "Liberia"
                        },
                        new
                        {
                            Id = 127,
                            Code = "LY",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(182),
                            Description = "Libya",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(184),
                            Name = "Libya"
                        },
                        new
                        {
                            Id = 128,
                            Code = "LI",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(188),
                            Description = "Liechtenstein",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(189),
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = 129,
                            Code = "LT",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(193),
                            Description = "Lithuania",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(195),
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = 130,
                            Code = "LU",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(199),
                            Description = "Luxembourg",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(200),
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = 131,
                            Code = "MO",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(204),
                            Description = "Macao",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(206),
                            Name = "Macao"
                        },
                        new
                        {
                            Id = 132,
                            Code = "MG",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(210),
                            Description = "Madagascar",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(212),
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = 133,
                            Code = "MW",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(224),
                            Description = "Malawi",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(226),
                            Name = "Malawi"
                        },
                        new
                        {
                            Id = 134,
                            Code = "MY",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(230),
                            Description = "Malaysia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(231),
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = 135,
                            Code = "MV",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(235),
                            Description = "Maldives",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(237),
                            Name = "Maldives"
                        },
                        new
                        {
                            Id = 136,
                            Code = "ML",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(240),
                            Description = "Mali",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(242),
                            Name = "Mali"
                        },
                        new
                        {
                            Id = 137,
                            Code = "MT",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(246),
                            Description = "Malta",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(248),
                            Name = "Malta"
                        },
                        new
                        {
                            Id = 138,
                            Code = "MH",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(251),
                            Description = "Marshall Islands (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(253),
                            Name = "Marshall Islands (the)"
                        },
                        new
                        {
                            Id = 139,
                            Code = "MQ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(257),
                            Description = "Martinique",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(258),
                            Name = "Martinique"
                        },
                        new
                        {
                            Id = 140,
                            Code = "MR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(262),
                            Description = "Mauritania",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(264),
                            Name = "Mauritania"
                        },
                        new
                        {
                            Id = 141,
                            Code = "MU",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(268),
                            Description = "Mauritius",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(270),
                            Name = "Mauritius"
                        },
                        new
                        {
                            Id = 142,
                            Code = "YT",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(273),
                            Description = "Mayotte",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(275),
                            Name = "Mayotte"
                        },
                        new
                        {
                            Id = 143,
                            Code = "MX",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(279),
                            Description = "Mexico",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(281),
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 144,
                            Code = "FM",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(285),
                            Description = "Micronesia (Federated States of)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(286),
                            Name = "Micronesia (Federated States of)"
                        },
                        new
                        {
                            Id = 145,
                            Code = "MD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(290),
                            Description = "Moldova (the Republic of)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(292),
                            Name = "Moldova (the Republic of)"
                        },
                        new
                        {
                            Id = 146,
                            Code = "MC",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(295),
                            Description = "Monaco",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(297),
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = 147,
                            Code = "MN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(301),
                            Description = "Mongolia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(302),
                            Name = "Mongolia"
                        },
                        new
                        {
                            Id = 148,
                            Code = "ME",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(306),
                            Description = "Montenegro",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(308),
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = 149,
                            Code = "MS",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(311),
                            Description = "Montserrat",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(313),
                            Name = "Montserrat"
                        },
                        new
                        {
                            Id = 150,
                            Code = "MA",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(317),
                            Description = "Morocco",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(318),
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = 151,
                            Code = "MZ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(322),
                            Description = "Mozambique",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(324),
                            Name = "Mozambique"
                        },
                        new
                        {
                            Id = 152,
                            Code = "MM",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(327),
                            Description = "Myanmar",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(329),
                            Name = "Myanmar"
                        },
                        new
                        {
                            Id = 153,
                            Code = "NA",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(333),
                            Description = "Namibia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(334),
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = 154,
                            Code = "NR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(339),
                            Description = "Nauru",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(340),
                            Name = "Nauru"
                        },
                        new
                        {
                            Id = 155,
                            Code = "NP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(344),
                            Description = "Nepal",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(346),
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = 156,
                            Code = "NL",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(349),
                            Description = "Netherlands (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(351),
                            Name = "Netherlands (the)"
                        },
                        new
                        {
                            Id = 157,
                            Code = "NC",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(354),
                            Description = "New Caledonia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(356),
                            Name = "New Caledonia"
                        },
                        new
                        {
                            Id = 158,
                            Code = "NZ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(360),
                            Description = "New Zealand",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(362),
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = 159,
                            Code = "NI",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(365),
                            Description = "Nicaragua",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(367),
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = 160,
                            Code = "NE",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(371),
                            Description = "Niger (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(372),
                            Name = "Niger (the)"
                        },
                        new
                        {
                            Id = 161,
                            Code = "NG",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(376),
                            Description = "Nigeria",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(378),
                            Name = "Nigeria"
                        },
                        new
                        {
                            Id = 162,
                            Code = "NU",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(381),
                            Description = "Niue",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(383),
                            Name = "Niue"
                        },
                        new
                        {
                            Id = 163,
                            Code = "NF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(387),
                            Description = "Norfolk Island",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(388),
                            Name = "Norfolk Island"
                        },
                        new
                        {
                            Id = 164,
                            Code = "MP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(392),
                            Description = "Northern Mariana Islands (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(394),
                            Name = "Northern Mariana Islands (the)"
                        },
                        new
                        {
                            Id = 165,
                            Code = "NO",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(398),
                            Description = "Norway",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(400),
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 166,
                            Code = "OM",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(404),
                            Description = "Oman",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(406),
                            Name = "Oman"
                        },
                        new
                        {
                            Id = 167,
                            Code = "PK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(416),
                            Description = "Pakistan",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(418),
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = 168,
                            Code = "PW",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(422),
                            Description = "Palau",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(423),
                            Name = "Palau"
                        },
                        new
                        {
                            Id = 169,
                            Code = "PS",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(427),
                            Description = "Palestine, State of",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(429),
                            Name = "Palestine, State of"
                        },
                        new
                        {
                            Id = 170,
                            Code = "PA",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(432),
                            Description = "Panama",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(434),
                            Name = "Panama"
                        },
                        new
                        {
                            Id = 171,
                            Code = "PG",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(438),
                            Description = "Papua New Guinea",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(440),
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            Id = 172,
                            Code = "PY",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(443),
                            Description = "Paraguay",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(445),
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = 173,
                            Code = "PE",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(449),
                            Description = "Peru",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(451),
                            Name = "Peru"
                        },
                        new
                        {
                            Id = 174,
                            Code = "PH",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(454),
                            Description = "Philippines (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(456),
                            Name = "Philippines (the)"
                        },
                        new
                        {
                            Id = 175,
                            Code = "PN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(460),
                            Description = "Pitcairn",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(461),
                            Name = "Pitcairn"
                        },
                        new
                        {
                            Id = 176,
                            Code = "PL",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(465),
                            Description = "Poland",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(467),
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 177,
                            Code = "PT",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(472),
                            Description = "Portugal",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(474),
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 178,
                            Code = "PR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(477),
                            Description = "Puerto Rico",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(479),
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Id = 179,
                            Code = "QA",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(483),
                            Description = "Qatar",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(484),
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = 180,
                            Code = "MK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(488),
                            Description = "Republic of North Macedonia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(490),
                            Name = "Republic of North Macedonia"
                        },
                        new
                        {
                            Id = 181,
                            Code = "RO",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(493),
                            Description = "Romania",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(495),
                            Name = "Romania"
                        },
                        new
                        {
                            Id = 182,
                            Code = "RU",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(499),
                            Description = "Russian Federation (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(501),
                            Name = "Russian Federation (the)"
                        },
                        new
                        {
                            Id = 183,
                            Code = "RW",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(504),
                            Description = "Rwanda",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(506),
                            Name = "Rwanda"
                        },
                        new
                        {
                            Id = 184,
                            Code = "RE",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(510),
                            Description = "Réunion",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(511),
                            Name = "Réunion"
                        },
                        new
                        {
                            Id = 185,
                            Code = "BL",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(515),
                            Description = "Saint Barthélemy",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(517),
                            Name = "Saint Barthélemy"
                        },
                        new
                        {
                            Id = 186,
                            Code = "SH",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(520),
                            Description = "Saint Helena, Ascension and Tristan da Cunha",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(522),
                            Name = "Saint Helena, Ascension and Tristan da Cunha"
                        },
                        new
                        {
                            Id = 187,
                            Code = "KN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(528),
                            Description = "Saint Kitts and Nevis",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(530),
                            Name = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            Id = 188,
                            Code = "LC",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(534),
                            Description = "Saint Lucia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(536),
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            Id = 189,
                            Code = "MF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(542),
                            Description = "Saint Martin (French part)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(544),
                            Name = "Saint Martin (French part)"
                        },
                        new
                        {
                            Id = 190,
                            Code = "PM",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(548),
                            Description = "Saint Pierre and Miquelon",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(549),
                            Name = "Saint Pierre and Miquelon"
                        },
                        new
                        {
                            Id = 191,
                            Code = "VC",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(553),
                            Description = "Saint Vincent and the Grenadines",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(555),
                            Name = "Saint Vincent and the Grenadines"
                        },
                        new
                        {
                            Id = 192,
                            Code = "WS",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(559),
                            Description = "Samoa",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(561),
                            Name = "Samoa"
                        },
                        new
                        {
                            Id = 193,
                            Code = "SM",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(565),
                            Description = "San Marino",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(566),
                            Name = "San Marino"
                        },
                        new
                        {
                            Id = 194,
                            Code = "ST",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(570),
                            Description = "Sao Tome and Principe",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(572),
                            Name = "Sao Tome and Principe"
                        },
                        new
                        {
                            Id = 195,
                            Code = "SA",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(576),
                            Description = "Saudi Arabia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(577),
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 196,
                            Code = "SN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(581),
                            Description = "Senegal",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(583),
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = 197,
                            Code = "RS",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(587),
                            Description = "Serbia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(588),
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 198,
                            Code = "SC",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(592),
                            Description = "Seychelles",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(594),
                            Name = "Seychelles"
                        },
                        new
                        {
                            Id = 199,
                            Code = "SL",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(598),
                            Description = "Sierra Leone",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(600),
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            Id = 200,
                            Code = "SG",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(604),
                            Description = "Singapore",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(606),
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 201,
                            Code = "SX",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(616),
                            Description = "Sint Maarten (Dutch part)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(618),
                            Name = "Sint Maarten (Dutch part)"
                        },
                        new
                        {
                            Id = 202,
                            Code = "SK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(621),
                            Description = "Slovakia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(623),
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = 203,
                            Code = "SI",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(628),
                            Description = "Slovenia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(629),
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = 204,
                            Code = "SB",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(633),
                            Description = "Solomon Islands",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(635),
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            Id = 205,
                            Code = "SO",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(639),
                            Description = "Somalia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(641),
                            Name = "Somalia"
                        },
                        new
                        {
                            Id = 206,
                            Code = "ZA",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(645),
                            Description = "South Africa",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(646),
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = 207,
                            Code = "GS",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(651),
                            Description = "South Georgia and the South Sandwich Islands",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(652),
                            Name = "South Georgia and the South Sandwich Islands"
                        },
                        new
                        {
                            Id = 208,
                            Code = "SS",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(656),
                            Description = "South Sudan",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(658),
                            Name = "South Sudan"
                        },
                        new
                        {
                            Id = 209,
                            Code = "ES",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(662),
                            Description = "Spain",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(664),
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 210,
                            Code = "LK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(667),
                            Description = "Sri Lanka",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(669),
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = 211,
                            Code = "SD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(673),
                            Description = "Sudan (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(674),
                            Name = "Sudan (the)"
                        },
                        new
                        {
                            Id = 212,
                            Code = "SR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(678),
                            Description = "Suriname",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(680),
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = 213,
                            Code = "SJ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(683),
                            Description = "Svalbard and Jan Mayen",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(685),
                            Name = "Svalbard and Jan Mayen"
                        },
                        new
                        {
                            Id = 214,
                            Code = "SE",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(689),
                            Description = "Sweden",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(690),
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 215,
                            Code = "CH",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(695),
                            Description = "Switzerland",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(696),
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = 216,
                            Code = "SY",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(700),
                            Description = "Syrian Arab Republic",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(702),
                            Name = "Syrian Arab Republic"
                        },
                        new
                        {
                            Id = 217,
                            Code = "TW",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(706),
                            Description = "Taiwan (Province of China)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(707),
                            Name = "Taiwan (Province of China)"
                        },
                        new
                        {
                            Id = 218,
                            Code = "TJ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(711),
                            Description = "Tajikistan",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(713),
                            Name = "Tajikistan"
                        },
                        new
                        {
                            Id = 219,
                            Code = "TZ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(716),
                            Description = "Tanzania, United Republic of",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(718),
                            Name = "Tanzania, United Republic of"
                        },
                        new
                        {
                            Id = 220,
                            Code = "TH",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(721),
                            Description = "Thailand",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(723),
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = 221,
                            Code = "TL",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(729),
                            Description = "Timor-Leste",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(730),
                            Name = "Timor-Leste"
                        },
                        new
                        {
                            Id = 222,
                            Code = "TG",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(734),
                            Description = "Togo",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(736),
                            Name = "Togo"
                        },
                        new
                        {
                            Id = 223,
                            Code = "TK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(740),
                            Description = "Tokelau",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(741),
                            Name = "Tokelau"
                        },
                        new
                        {
                            Id = 224,
                            Code = "TO",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(745),
                            Description = "Tonga",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(747),
                            Name = "Tonga"
                        },
                        new
                        {
                            Id = 225,
                            Code = "TT",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(750),
                            Description = "Trinidad and Tobago",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(752),
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = 226,
                            Code = "TN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(756),
                            Description = "Tunisia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(757),
                            Name = "Tunisia"
                        },
                        new
                        {
                            Id = 227,
                            Code = "TR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(762),
                            Description = "Turkey",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(764),
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 228,
                            Code = "TM",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(767),
                            Description = "Turkmenistan",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(769),
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Id = 229,
                            Code = "TC",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(773),
                            Description = "Turks and Caicos Islands (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(774),
                            Name = "Turks and Caicos Islands (the)"
                        },
                        new
                        {
                            Id = 230,
                            Code = "TV",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(778),
                            Description = "Tuvalu",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(780),
                            Name = "Tuvalu"
                        },
                        new
                        {
                            Id = 231,
                            Code = "UG",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(784),
                            Description = "Uganda",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(786),
                            Name = "Uganda"
                        },
                        new
                        {
                            Id = 232,
                            Code = "UA",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(789),
                            Description = "Ukraine",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(792),
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 233,
                            Code = "AE",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(795),
                            Description = "United Arab Emirates (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(797),
                            Name = "United Arab Emirates (the)"
                        },
                        new
                        {
                            Id = 234,
                            Code = "GB",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(801),
                            Description = "United Kingdom of Great Britain and Northern Ireland (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(803),
                            Name = "United Kingdom of Great Britain and Northern Ireland (the)"
                        },
                        new
                        {
                            Id = 235,
                            Code = "UM",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(813),
                            Description = "United States Minor Outlying Islands (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(815),
                            Name = "United States Minor Outlying Islands (the)"
                        },
                        new
                        {
                            Id = 236,
                            Code = "US",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(818),
                            Description = "United States of America (the)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(820),
                            Name = "United States of America (the)"
                        },
                        new
                        {
                            Id = 237,
                            Code = "UY",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(824),
                            Description = "Uruguay",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(825),
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = 238,
                            Code = "UZ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(829),
                            Description = "Uzbekistan",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(831),
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Id = 239,
                            Code = "VU",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(835),
                            Description = "Vanuatu",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(837),
                            Name = "Vanuatu"
                        },
                        new
                        {
                            Id = 240,
                            Code = "VE",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(840),
                            Description = "Venezuela (Bolivarian Republic of)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(842),
                            Name = "Venezuela (Bolivarian Republic of)"
                        },
                        new
                        {
                            Id = 241,
                            Code = "VN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(846),
                            Description = "Viet Nam",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(848),
                            Name = "Viet Nam"
                        },
                        new
                        {
                            Id = 242,
                            Code = "VG",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(851),
                            Description = "Virgin Islands (British)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(853),
                            Name = "Virgin Islands (British)"
                        },
                        new
                        {
                            Id = 243,
                            Code = "VI",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(857),
                            Description = "Virgin Islands (U.S.)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(858),
                            Name = "Virgin Islands (U.S.)"
                        },
                        new
                        {
                            Id = 244,
                            Code = "WF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(862),
                            Description = "Wallis and Futuna",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(864),
                            Name = "Wallis and Futuna"
                        },
                        new
                        {
                            Id = 245,
                            Code = "EH",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(867),
                            Description = "Western Sahara",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(869),
                            Name = "Western Sahara"
                        },
                        new
                        {
                            Id = 246,
                            Code = "YE",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(873),
                            Description = "Yemen",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(874),
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = 247,
                            Code = "ZM",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(879),
                            Description = "Zambia",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(880),
                            Name = "Zambia"
                        },
                        new
                        {
                            Id = 248,
                            Code = "ZW",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(884),
                            Description = "Zimbabwe",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(886),
                            Name = "Zimbabwe"
                        },
                        new
                        {
                            Id = 249,
                            Code = "AX",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(890),
                            Description = "Åland Islands",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(891),
                            Name = "Åland Islands"
                        },
                        new
                        {
                            Id = 250,
                            Code = "SZ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(895),
                            Description = "SWAZILAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 117, DateTimeKind.Local).AddTicks(897),
                            Name = "SWAZILAND"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Cpd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CpdawardedById")
                        .HasColumnName("CPDAwardedById")
                        .HasColumnType("int");

                    b.Property<int>("Cpdearned")
                        .HasColumnName("CPDEarned")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CpdawardedById");

                    b.HasIndex("MemberId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("CPD");
                });

            modelBuilder.Entity("MM.ClientModels.CpdmemberCategorySetUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cpdcount")
                        .HasColumnName("CPDCount")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("MemberCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberCategoryId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("CPDMemberCategorySetUp");
                });

            modelBuilder.Entity("MM.ClientModels.CpdmemberLevelSetUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cpdcount")
                        .HasColumnName("CPDCount")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("MemberLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberLevelId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("CPDMemberLevelSetUp");
                });

            modelBuilder.Entity("MM.ClientModels.CpdmemberTeamSetUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cpdcount")
                        .HasColumnName("CPDCount")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("MemberTeamId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberTeamId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("CPDMemberTeamSetUp");
                });

            modelBuilder.Entity("MM.ClientModels.CpdmemberTypeSetUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cpdcount")
                        .HasColumnName("CPDCount")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("MemberTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberTypeId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("CPDMemberTypeSetUp");
                });

            modelBuilder.Entity("MM.ClientModels.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(3) CHARACTER SET utf8mb4")
                        .HasMaxLength(3);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Symbol")
                        .HasColumnType("varchar(5) CHARACTER SET utf8mb4")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "AFN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(3529),
                            Description = "Currency for  AFGHANISTAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(4514),
                            Name = "Afghani",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 2,
                            Code = "ALL",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(5905),
                            Description = "ALBANIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(5941),
                            Name = "Lek",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 3,
                            Code = "DZD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(5973),
                            Description = "ALGERIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(5978),
                            Name = "Algerian Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 4,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(5986),
                            Description = "AMERICAN SAMOA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(5989),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 5,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(5996),
                            Description = "ANDORRA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(5999),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 6,
                            Code = "AOA",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6006),
                            Description = "ANGOLA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6009),
                            Name = "Kwanza",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 7,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6015),
                            Description = "ANGUILLA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6019),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 8,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6026),
                            Description = "ANTIGUA AND BARBUDA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6031),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 9,
                            Code = "ARS",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6040),
                            Description = "ARGENTINA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6044),
                            Name = "Argentine Peso",
                            Symbol = ""
                        },
                        new
                        {
                            Id = 10,
                            Code = "AMD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6055),
                            Description = "ARMENIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6057),
                            Name = "Armenian Dram",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 11,
                            Code = "AWG",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6066),
                            Description = "ARUBA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6069),
                            Name = "Aruban Florin",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 12,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6076),
                            Description = "AUSTRALIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6079),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 13,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6089),
                            Description = "AUSTRIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6091),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 14,
                            Code = "AZN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6098),
                            Description = "AZERBAIJAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6099),
                            Name = "Azerbaijanian Manat",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 15,
                            Code = "BSD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6106),
                            Description = "BAHAMAS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6108),
                            Name = "Bahamian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 16,
                            Code = "BHD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6114),
                            Description = "BAHRAIN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6116),
                            Name = "Bahraini Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 17,
                            Code = "BDT",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6121),
                            Description = "BANGLADESH",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6123),
                            Name = "Taka",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 18,
                            Code = "BBD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6131),
                            Description = "BARBADOS",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6134),
                            Name = "Barbados Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 19,
                            Code = "BYN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6140),
                            Description = "BELARUS",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6143),
                            Name = "Belarussian Ruble",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 20,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6151),
                            Description = "BELGIUM",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6153),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 21,
                            Code = "BZD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6160),
                            Description = "BELIZE",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6162),
                            Name = "Belize Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 22,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6168),
                            Description = "BENIN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6172),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 23,
                            Code = "BMD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6178),
                            Description = "BERMUDA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6181),
                            Name = "Bermudian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 24,
                            Code = "BTN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6224),
                            Description = "BHUTAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6227),
                            Name = "Ngultrum",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 25,
                            Code = "INR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6234),
                            Description = "BHUTAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6236),
                            Name = "Indian Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 26,
                            Code = "BOB",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6242),
                            Description = "BOLIVIA (PLURINATIONAL STATE OF)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6245),
                            Name = "Boliviano",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 27,
                            Code = "BOV",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6535),
                            Description = "BOLIVIA (PLURINATIONAL STATE OF)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6562),
                            Name = "Mvdol",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 28,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6574),
                            Description = "BONAIRE, SINT EUSTATIUS AND SABA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6577),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 29,
                            Code = "BAM",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6586),
                            Description = "BOSNIA AND HERZEGOVINA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6588),
                            Name = "Convertible Mark",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 30,
                            Code = "BWP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6595),
                            Description = "BOTSWANA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6597),
                            Name = "Pula",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 31,
                            Code = "NOK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6604),
                            Description = "BOUVET ISLAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6606),
                            Name = "Norwegian Krone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 32,
                            Code = "BRL",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6612),
                            Description = "BRAZIL",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6615),
                            Name = "Brazilian Real",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 33,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6622),
                            Description = "BRITISH INDIAN OCEAN TERRITORY (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6624),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 34,
                            Code = "BND",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6631),
                            Description = "BRUNEI DARUSSALAM",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6634),
                            Name = "Brunei Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 35,
                            Code = "BGN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6640),
                            Description = "BULGARIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6644),
                            Name = "Bulgarian Lev",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 36,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6650),
                            Description = "BURKINA FASO",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6652),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 37,
                            Code = "BIF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6659),
                            Description = "BURUNDI",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6663),
                            Name = "Burundi Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 38,
                            Code = "CVE",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6670),
                            Description = "CABO VERDE",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6674),
                            Name = "Cabo Verde Escudo",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 39,
                            Code = "KHR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6681),
                            Description = "CAMBODIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6684),
                            Name = "Riel",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 40,
                            Code = "XAF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6691),
                            Description = "CAMEROON",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6694),
                            Name = "CFA Franc BEAC",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 41,
                            Code = "CAD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6702),
                            Description = "CANADA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6706),
                            Name = "Canadian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 42,
                            Code = "KYD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6714),
                            Description = "CAYMAN ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6717),
                            Name = "Cayman Islands Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 43,
                            Code = "XAF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6725),
                            Description = "CENTRAL AFRICAN REPUBLIC (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6728),
                            Name = "CFA Franc BEAC",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 44,
                            Code = "XAF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6735),
                            Description = "CHAD",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6738),
                            Name = "CFA Franc BEAC",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 45,
                            Code = "CLF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6745),
                            Description = "CHILE",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6748),
                            Name = "Unidad de Fomento",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 46,
                            Code = "CLP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6755),
                            Description = "CHILE",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6761),
                            Name = "Chilean Peso",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 47,
                            Code = "CNY",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6768),
                            Description = "CHINA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6771),
                            Name = "Yuan Renminbi",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 48,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6779),
                            Description = "CHRISTMAS ISLAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6782),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 49,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6825),
                            Description = "COCOS (KEELING) ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6828),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 50,
                            Code = "COP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6835),
                            Description = "COLOMBIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6838),
                            Name = "Colombian Peso",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 51,
                            Code = "COU",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6845),
                            Description = "COLOMBIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6848),
                            Name = "Unidad de Valor Real",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 52,
                            Code = "KMF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6855),
                            Description = "COMOROS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6857),
                            Name = "Comoro Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 53,
                            Code = "CDF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6864),
                            Description = "CONGO (THE DEMOCRATIC REPUBLIC OF THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6866),
                            Name = "Congolese Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 54,
                            Code = "XAF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6874),
                            Description = "CONGO (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6878),
                            Name = "CFA Franc BEAC",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 55,
                            Code = "NZD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6884),
                            Description = "COOK ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6887),
                            Name = "New Zealand Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 56,
                            Code = "CRC",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6894),
                            Description = "COSTA RICA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6896),
                            Name = "Costa Rican Colon",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 57,
                            Code = "HRK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6903),
                            Description = "CROATIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6905),
                            Name = "Kuna",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 58,
                            Code = "CUC",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6913),
                            Description = "CUBA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6916),
                            Name = "Peso Convertible",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 59,
                            Code = "CUP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6923),
                            Description = "CUBA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6926),
                            Name = "Cuban Peso",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 60,
                            Code = "ANG",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6933),
                            Description = "CURAÇAO",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6935),
                            Name = "Netherlands Antillean Guilder",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 61,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6944),
                            Description = "CYPRUS",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6946),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 62,
                            Code = "CZK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6954),
                            Description = "CZECH REPUBLIC (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6957),
                            Name = "Czech Koruna",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 63,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6964),
                            Description = "CÔTE D'IVOIRE",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6967),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 64,
                            Code = "DKK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6974),
                            Description = "DENMARK",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6977),
                            Name = "Danish Krone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 65,
                            Code = "DJF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6985),
                            Description = "DJIBOUTI",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6987),
                            Name = "Djibouti Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 66,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6995),
                            Description = "DOMINICA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(6998),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 67,
                            Code = "DOP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7005),
                            Description = "DOMINICAN REPUBLIC (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7009),
                            Name = "Dominican Peso",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 68,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7015),
                            Description = "ECUADOR",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7017),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 69,
                            Code = "EGP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7024),
                            Description = "EGYPT",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7026),
                            Name = "Egyptian Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 70,
                            Code = "SVC",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7033),
                            Description = "EL SALVADOR",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7036),
                            Name = "El Salvador Colon",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 71,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7043),
                            Description = "EL SALVADOR",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7047),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 72,
                            Code = "XAF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7053),
                            Description = "EQUATORIAL GUINEA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7055),
                            Name = "CFA Franc BEAC",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 73,
                            Code = "ERN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7063),
                            Description = "ERITREA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7065),
                            Name = "Nakfa",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 74,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7072),
                            Description = "ESTONIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7075),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 75,
                            Code = "ETB",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7099),
                            Description = "ETHIOPIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7103),
                            Name = "Ethiopian Birr",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 76,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7110),
                            Description = "EUROPEAN UNION",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7113),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 77,
                            Code = "FKP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7120),
                            Description = "FALKLAND ISLANDS (THE) [MALVINAS]",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7123),
                            Name = "Falkland Islands Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 78,
                            Code = "DKK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7129),
                            Description = "FAROE ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7132),
                            Name = "Danish Krone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 79,
                            Code = "FJD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7139),
                            Description = "FIJI",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7143),
                            Name = "Fiji Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 80,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7150),
                            Description = "FINLAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7152),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 81,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7159),
                            Description = "FRANCE",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7161),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 82,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7167),
                            Description = "FRENCH GUIANA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7171),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 83,
                            Code = "XPF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7178),
                            Description = "FRENCH POLYNESIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7181),
                            Name = "CFP Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 84,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7189),
                            Description = "FRENCH SOUTHERN TERRITORIES (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7191),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 85,
                            Code = "XAF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7199),
                            Description = "GABON",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7202),
                            Name = "CFA Franc BEAC",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 86,
                            Code = "GMD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7209),
                            Description = "GAMBIA (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7212),
                            Name = "Dalasi",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 87,
                            Code = "GEL",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7219),
                            Description = "GEORGIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7223),
                            Name = "Lari",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 88,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7230),
                            Description = "GERMANY",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7232),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 89,
                            Code = "GHS",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7241),
                            Description = "GHANA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7244),
                            Name = "Ghana Cedi",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 90,
                            Code = "GIP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7253),
                            Description = "GIBRALTAR",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7256),
                            Name = "Gibraltar Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 91,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7263),
                            Description = "GREECE",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7266),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 92,
                            Code = "DKK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7273),
                            Description = "GREENLAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7276),
                            Name = "Danish Krone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 93,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7286),
                            Description = "GRENADA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7288),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 94,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7296),
                            Description = "GUADELOUPE",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7299),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 95,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7305),
                            Description = "GUAM",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7308),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 96,
                            Code = "GTQ",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7317),
                            Description = "GUATEMALA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7320),
                            Name = "Quetzal",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 97,
                            Code = "GBP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7327),
                            Description = "GUERNSEY",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7330),
                            Name = "Pound Sterling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 98,
                            Code = "GNF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7336),
                            Description = "GUINEA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7339),
                            Name = "Guinea Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 99,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7345),
                            Description = "GUINEA-BISSAU",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7348),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 100,
                            Code = "GYD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7369),
                            Description = "GUYANA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7372),
                            Name = "Guyana Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 101,
                            Code = "HTG",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7378),
                            Description = "HAITI",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7381),
                            Name = "Gourde",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 102,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7389),
                            Description = "HAITI",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7395),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 103,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7400),
                            Description = "HEARD ISLAND AND McDONALD ISLANDS",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7403),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 104,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7411),
                            Description = "HOLY SEE (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7415),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 105,
                            Code = "HNL",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7422),
                            Description = "HONDURAS",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7424),
                            Name = "Lempira",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 106,
                            Code = "HKD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7430),
                            Description = "HONG KONG",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7432),
                            Name = "Hong Kong Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 107,
                            Code = "HUF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7438),
                            Description = "HUNGARY",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7442),
                            Name = "Forint",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 108,
                            Code = "ISK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7449),
                            Description = "ICELAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7455),
                            Name = "Iceland Krona",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 109,
                            Code = "INR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7462),
                            Description = "INDIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7464),
                            Name = "Indian Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 110,
                            Code = "IDR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7472),
                            Description = "INDONESIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7476),
                            Name = "Rupiah",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 111,
                            Code = "XDR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7486),
                            Description = "INTERNATIONAL MONETARY FUND (IMF) ",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7490),
                            Name = "SDR (Special Drawing Right)",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 112,
                            Code = "IRR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7497),
                            Description = "IRAN (ISLAMIC REPUBLIC OF)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7500),
                            Name = "Iranian Rial",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 113,
                            Code = "IQD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7508),
                            Description = "IRAQ",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7514),
                            Name = "Iraqi Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 114,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7520),
                            Description = "IRELAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7523),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 115,
                            Code = "GBP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7530),
                            Description = "ISLE OF MAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7532),
                            Name = "Pound Sterling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 116,
                            Code = "ILS",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7538),
                            Description = "ISRAEL",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7541),
                            Name = "New Israeli Sheqel",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 117,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7548),
                            Description = "ITALY",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7554),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 118,
                            Code = "JMD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7562),
                            Description = "JAMAICA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7567),
                            Name = "Jamaican Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 119,
                            Code = "JPY",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7574),
                            Description = "JAPAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7577),
                            Name = "Yen",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 120,
                            Code = "GBP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7584),
                            Description = "JERSEY",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7587),
                            Name = "Pound Sterling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 121,
                            Code = "JOD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7594),
                            Description = "JORDAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7596),
                            Name = "Jordanian Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 122,
                            Code = "KZT",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7603),
                            Description = "KAZAKHSTAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7606),
                            Name = "Tenge",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 123,
                            Code = "KES",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7612),
                            Description = "KENYA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7616),
                            Name = "Kenyan Shilling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 124,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7622),
                            Description = "KIRIBATI",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7627),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 125,
                            Code = "KPW",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7635),
                            Description = "KOREA (THE DEMOCRATIC PEOPLE’S REPUBLIC OF)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7637),
                            Name = "North Korean Won",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 126,
                            Code = "KRW",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7655),
                            Description = "KOREA (THE REPUBLIC OF)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7659),
                            Name = "Won",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 127,
                            Code = "KWD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7665),
                            Description = "KUWAIT",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7668),
                            Name = "Kuwaiti Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 128,
                            Code = "KGS",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7674),
                            Description = "KYRGYZSTAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7676),
                            Name = "Som",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 129,
                            Code = "LAK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7683),
                            Description = "LAO PEOPLE’S DEMOCRATIC REPUBLIC (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7685),
                            Name = "Kip",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 130,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7693),
                            Description = "LATVIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7695),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 131,
                            Code = "LBP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7702),
                            Description = "LEBANON",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7705),
                            Name = "Lebanese Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 132,
                            Code = "LSL",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7711),
                            Description = "LESOTHO",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7714),
                            Name = "Loti",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 133,
                            Code = "ZAR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7721),
                            Description = "LESOTHO",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7723),
                            Name = "Rand",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 134,
                            Code = "LRD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7729),
                            Description = "LIBERIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7731),
                            Name = "Liberian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 135,
                            Code = "LYD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7737),
                            Description = "LIBYA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7740),
                            Name = "Libyan Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 136,
                            Code = "CHF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7746),
                            Description = "LIECHTENSTEIN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7749),
                            Name = "Swiss Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 137,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7757),
                            Description = "LITHUANIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7760),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 138,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7770),
                            Description = "LUXEMBOURG",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7773),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 139,
                            Code = "MOP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7780),
                            Description = "MACAO",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7783),
                            Name = "Pataca",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 140,
                            Code = "MGA",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7790),
                            Description = "MADAGASCAR",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7794),
                            Name = "Malagasy Ariary",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 141,
                            Code = "MWK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7804),
                            Description = "MALAWI",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7807),
                            Name = "Kwacha",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 142,
                            Code = "MYR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7813),
                            Description = "MALAYSIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7817),
                            Name = "Malaysian Ringgit",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 143,
                            Code = "MVR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7824),
                            Description = "MALDIVES",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7827),
                            Name = "Rufiyaa",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 144,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7834),
                            Description = "MALI",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7837),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 145,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7843),
                            Description = "MALTA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7846),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 146,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7854),
                            Description = "MARSHALL ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7856),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 147,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7863),
                            Description = "MARTINIQUE",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7866),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 148,
                            Code = "MRU",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7873),
                            Description = "MAURITANIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7875),
                            Name = "Ouguiya",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 149,
                            Code = "MUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7884),
                            Description = "MAURITIUS",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7887),
                            Name = "Mauritius Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 150,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7893),
                            Description = "MAYOTTE",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7895),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 151,
                            Code = "MXN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7916),
                            Description = "MEXICO",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7919),
                            Name = "Mexican Peso",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 152,
                            Code = "MXV",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7927),
                            Description = "MEXICO",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7929),
                            Name = "Mexican Unidad de Inversion (UDI)",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 153,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7938),
                            Description = "MICRONESIA (FEDERATED STATES OF)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7941),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 154,
                            Code = "MDL",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7948),
                            Description = "MOLDOVA (THE REPUBLIC OF)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7951),
                            Name = "Moldovan Leu",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 155,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7958),
                            Description = "MONACO",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7961),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 156,
                            Code = "MNT",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7968),
                            Description = "MONGOLIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7972),
                            Name = "Tugrik",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 157,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7980),
                            Description = "MONTENEGRO",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7982),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 158,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7989),
                            Description = "MONTSERRAT",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7992),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 159,
                            Code = "MAD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(7999),
                            Description = "MOROCCO",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8002),
                            Name = "Moroccan Dirham",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 160,
                            Code = "MZN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8009),
                            Description = "MOZAMBIQUE",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8012),
                            Name = "Mozambique Metical",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 161,
                            Code = "MMK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8021),
                            Description = "MYANMAR",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8023),
                            Name = "Kyat",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 162,
                            Code = "NAD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8032),
                            Description = "NAMIBIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8035),
                            Name = "Namibia Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 163,
                            Code = "ZAR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8042),
                            Description = "NAMIBIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8045),
                            Name = "Rand",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 164,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8055),
                            Description = "NAURU",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8057),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 165,
                            Code = "NPR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8064),
                            Description = "NEPAL",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8067),
                            Name = "Nepalese Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 166,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8073),
                            Description = "NETHERLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8076),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 167,
                            Code = "XPF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8085),
                            Description = "NEW CALEDONIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8087),
                            Name = "CFP Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 168,
                            Code = "NZD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8094),
                            Description = "NEW ZEALAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8097),
                            Name = "New Zealand Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 169,
                            Code = "NIO",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8103),
                            Description = "NICARAGUA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8105),
                            Name = "Cordoba Oro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 170,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8112),
                            Description = "NIGER (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8115),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 171,
                            Code = "NGN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8121),
                            Description = "NIGERIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8124),
                            Name = "Naira",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 172,
                            Code = "NZD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8131),
                            Description = "NIUE",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8134),
                            Name = "New Zealand Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 173,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8143),
                            Description = "NORFOLK ISLAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8146),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 174,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8153),
                            Description = "NORTHERN MARIANA ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8156),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 175,
                            Code = "NOK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8163),
                            Description = "NORWAY",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8166),
                            Name = "Norwegian Krone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 176,
                            Code = "OMR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8173),
                            Description = "OMAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8176),
                            Name = "Rial Omani",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 177,
                            Code = "PKR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8200),
                            Description = "PAKISTAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8203),
                            Name = "Pakistan Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 178,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8209),
                            Description = "PALAU",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8212),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 179,
                            Code = "PAB",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8219),
                            Description = "PANAMA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8222),
                            Name = "Balboa",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 180,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8228),
                            Description = "PANAMA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8230),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 181,
                            Code = "PGK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8237),
                            Description = "PAPUA NEW GUINEA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8239),
                            Name = "Kina",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 182,
                            Code = "PYG",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8245),
                            Description = "PARAGUAY",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8248),
                            Name = "Guarani",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 183,
                            Code = "PEN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8256),
                            Description = "PERU",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8258),
                            Name = "Nuevo Sol",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 184,
                            Code = "PHP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8264),
                            Description = "PHILIPPINES (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8267),
                            Name = "Philippine Peso",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 185,
                            Code = "NZD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8274),
                            Description = "PITCAIRN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8276),
                            Name = "New Zealand Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 186,
                            Code = "PLN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8283),
                            Description = "POLAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8286),
                            Name = "Zloty",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 187,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8293),
                            Description = "PORTUGAL",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8297),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 188,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8303),
                            Description = "PUERTO RICO",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8306),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 189,
                            Code = "QAR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8313),
                            Description = "QATAR",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8316),
                            Name = "Qatari Rial",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 190,
                            Code = "MKD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8323),
                            Description = "REPUBLIC OF NORTH MACEDONIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8326),
                            Name = "Denar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 191,
                            Code = "RON",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8333),
                            Description = "ROMANIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8336),
                            Name = "Romanian Leu",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 192,
                            Code = "RUB",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8343),
                            Description = "RUSSIAN FEDERATION (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8346),
                            Name = "Russian Ruble",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 193,
                            Code = "RWF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8353),
                            Description = "RWANDA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8356),
                            Name = "Rwanda Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 194,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8363),
                            Description = "RÉUNION",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8366),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 195,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8372),
                            Description = "SAINT BARTHÉLEMY",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8374),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 196,
                            Code = "SHP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8382),
                            Description = "SAINT HELENA, ASCENSION AND TRISTAN DA CUNHA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8385),
                            Name = "Saint Helena Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 197,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8391),
                            Description = "SAINT KITTS AND NEVIS",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8394),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 198,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8402),
                            Description = "SAINT LUCIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8405),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 199,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8411),
                            Description = "SAINT MARTIN (FRENCH PART)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8414),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 200,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8420),
                            Description = "SAINT PIERRE AND MIQUELON",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8423),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 201,
                            Code = "XCD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8430),
                            Description = "SAINT VINCENT AND THE GRENADINES",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8433),
                            Name = "East Caribbean Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 202,
                            Code = "WST",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8452),
                            Description = "SAMOA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8455),
                            Name = "Tala",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 203,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8463),
                            Description = "SAN MARINO",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8466),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 204,
                            Code = "STN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8473),
                            Description = "SAO TOME AND PRINCIPE",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8476),
                            Name = "Dobra",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 205,
                            Code = "SAR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8482),
                            Description = "SAUDI ARABIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8486),
                            Name = "Saudi Riyal",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 206,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8492),
                            Description = "SENEGAL",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8494),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 207,
                            Code = "RSD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8502),
                            Description = "SERBIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8505),
                            Name = "Serbian Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 208,
                            Code = "SCR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8513),
                            Description = "SEYCHELLES",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8515),
                            Name = "Seychelles Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 209,
                            Code = "SLL",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8522),
                            Description = "SIERRA LEONE",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8525),
                            Name = "Leone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 210,
                            Code = "SGD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8532),
                            Description = "SINGAPORE",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8535),
                            Name = "Singapore Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 211,
                            Code = "ANG",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8542),
                            Description = "SINT MAARTEN (DUTCH PART)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8546),
                            Name = "Netherlands Antillean Guilder",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 212,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8554),
                            Description = "SLOVAKIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8556),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 213,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8563),
                            Description = "SLOVENIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8566),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 214,
                            Code = "SBD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8574),
                            Description = "SOLOMON ISLANDS",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8578),
                            Name = "Solomon Islands Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 215,
                            Code = "SOS",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8584),
                            Description = "SOMALIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8587),
                            Name = "Somali Shilling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 216,
                            Code = "ZAR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8594),
                            Description = "SOUTH AFRICA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8596),
                            Name = "Rand",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 217,
                            Code = "SSP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8608),
                            Description = "SOUTH SUDAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8610),
                            Name = "South Sudanese Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 218,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8617),
                            Description = "SPAIN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8619),
                            Name = "Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 219,
                            Code = "LKR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8629),
                            Description = "SRI LANKA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8631),
                            Name = "Sri Lanka Rupee",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 220,
                            Code = "SDG",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8639),
                            Description = "SUDAN (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8641),
                            Name = "Sudanese Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 221,
                            Code = "SRD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8648),
                            Description = "SURINAME",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8650),
                            Name = "Surinam Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 222,
                            Code = "NOK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8657),
                            Description = "SVALBARD AND JAN MAYEN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8660),
                            Name = "Norwegian Krone",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 223,
                            Code = "SZL",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8667),
                            Description = "SWAZILAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8709),
                            Name = "Lilangeni",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 224,
                            Code = "SEK",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8719),
                            Description = "SWEDEN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8722),
                            Name = "Swedish Krona",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 225,
                            Code = "CHE",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8729),
                            Description = "SWITZERLAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8732),
                            Name = "WIR Euro",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 226,
                            Code = "CHF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8738),
                            Description = "SWITZERLAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8741),
                            Name = "Swiss Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 227,
                            Code = "CHW",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8748),
                            Description = "SWITZERLAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8751),
                            Name = "WIR Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 228,
                            Code = "SYP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8780),
                            Description = "SYRIAN ARAB REPUBLIC",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8784),
                            Name = "Syrian Pound",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 229,
                            Code = "TWD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8793),
                            Description = "TAIWAN (PROVINCE OF CHINA)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8796),
                            Name = "New Taiwan Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 230,
                            Code = "TJS",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8808),
                            Description = "TAJIKISTAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8810),
                            Name = "Somoni",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 231,
                            Code = "TZS",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8824),
                            Description = "TANZANIA, UNITED REPUBLIC OF",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8827),
                            Name = "Tanzanian Shilling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 232,
                            Code = "THB",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8836),
                            Description = "THAILAND",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8838),
                            Name = "Baht",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 233,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8847),
                            Description = "TIMOR-LESTE",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8850),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 234,
                            Code = "XOF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8859),
                            Description = "TOGO",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8862),
                            Name = "CFA Franc BCEAO",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 235,
                            Code = "NZD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8870),
                            Description = "TOKELAU",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8874),
                            Name = "New Zealand Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 236,
                            Code = "TOP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8882),
                            Description = "TONGA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8885),
                            Name = "Pa’anga",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 237,
                            Code = "TTD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8893),
                            Description = "TRINIDAD AND TOBAGO",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8896),
                            Name = "Trinidad and Tobago Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 238,
                            Code = "TND",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8904),
                            Description = "TUNISIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8906),
                            Name = "Tunisian Dinar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 239,
                            Code = "TRY",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8915),
                            Description = "TURKEY",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8919),
                            Name = "Turkish Lira",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 240,
                            Code = "TMT",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8928),
                            Description = "TURKMENISTAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8931),
                            Name = "Turkmenistan New Manat",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 241,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8940),
                            Description = "TURKS AND CAICOS ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8942),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 242,
                            Code = "AUD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8949),
                            Description = "TUVALU",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8952),
                            Name = "Australian Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 243,
                            Code = "UGX",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8961),
                            Description = "UGANDA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8964),
                            Name = "Uganda Shilling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 244,
                            Code = "UAH",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8971),
                            Description = "UKRAINE",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8974),
                            Name = "Hryvnia",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 245,
                            Code = "AED",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8982),
                            Description = "UNITED ARAB EMIRATES (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8985),
                            Name = "UAE Dirham",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 246,
                            Code = "GBP",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8992),
                            Description = "UNITED KINGDOM OF GREAT BRITAIN AND NORTHERN IRELAND (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(8994),
                            Name = "Pound Sterling",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 247,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9003),
                            Description = "UNITED STATES MINOR OUTLYING ISLANDS (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9005),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 248,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9012),
                            Description = "UNITED STATES OF AMERICA (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9014),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 249,
                            Code = "USN",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9022),
                            Description = "UNITED STATES OF AMERICA (THE)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9025),
                            Name = "US Dollar (Next day)",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 250,
                            Code = "UYI",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9039),
                            Description = "URUGUAY",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9042),
                            Name = "Uruguay Peso en Unidades Indexadas (URUIURUI)",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 251,
                            Code = "UYU",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9052),
                            Description = "URUGUAY",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9054),
                            Name = "Peso Uruguayo",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 252,
                            Code = "UZS",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9064),
                            Description = "UZBEKISTAN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9067),
                            Name = "Uzbekistan Sum",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 253,
                            Code = "VUV",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9510),
                            Description = "VANUATU",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9539),
                            Name = "Vatu",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 254,
                            Code = "VEF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9555),
                            Description = "VENEZUELA (BOLIVARIAN REPUBLIC OF)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9558),
                            Name = "Bolivar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 255,
                            Code = "VND",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9570),
                            Description = "VIET NAM",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9572),
                            Name = "Dong",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 256,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9584),
                            Description = "VIRGIN ISLANDS (BRITISH)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9586),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 257,
                            Code = "USD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9597),
                            Description = "VIRGIN ISLANDS (U.S.)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9599),
                            Name = "US Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 258,
                            Code = "XPF",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9608),
                            Description = "WALLIS AND FUTUNA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9610),
                            Name = "CFP Franc",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 259,
                            Code = "MAD",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9622),
                            Description = "WESTERN SAHARA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9624),
                            Name = "Moroccan Dirham",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 260,
                            Code = "YER",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9630),
                            Description = "YEMEN",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9633),
                            Name = "Yemeni Rial",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 261,
                            Code = "ZMW",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9643),
                            Description = "ZAMBIA",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9646),
                            Name = "Zambian Kwacha",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 262,
                            Code = "ZWL",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9652),
                            Description = "ZIMBABWE",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9654),
                            Name = "Zimbabwe Dollar",
                            Symbol = " "
                        },
                        new
                        {
                            Id = 263,
                            Code = "EUR",
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9664),
                            Description = "ÅLAND ISLANDS",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 243, DateTimeKind.Local).AddTicks(9666),
                            Name = "Euro",
                            Symbol = " "
                        });
                });

            modelBuilder.Entity("MM.ClientModels.CustomField", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime1")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime10")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime11")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime12")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime13")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime14")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime15")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime16")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime17")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime18")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime19")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime2")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime20")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime3")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime4")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime5")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime6")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime7")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime8")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Datetime9")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("Decimal1")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal10")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal11")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal12")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal13")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal14")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal15")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal16")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal17")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal18")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal19")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal2")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal20")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal3")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal4")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal5")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal6")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal7")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal8")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("Decimal9")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("Int1")
                        .HasColumnType("int");

                    b.Property<int?>("Int10")
                        .HasColumnType("int");

                    b.Property<int?>("Int11")
                        .HasColumnType("int");

                    b.Property<int?>("Int12")
                        .HasColumnType("int");

                    b.Property<int?>("Int13")
                        .HasColumnType("int");

                    b.Property<int?>("Int14")
                        .HasColumnType("int");

                    b.Property<int?>("Int15")
                        .HasColumnType("int");

                    b.Property<int?>("Int16")
                        .HasColumnType("int");

                    b.Property<int?>("Int17")
                        .HasColumnType("int");

                    b.Property<int?>("Int18")
                        .HasColumnType("int");

                    b.Property<int?>("Int19")
                        .HasColumnType("int");

                    b.Property<int?>("Int2")
                        .HasColumnType("int");

                    b.Property<int?>("Int20")
                        .HasColumnType("int");

                    b.Property<int?>("Int3")
                        .HasColumnType("int");

                    b.Property<int?>("Int4")
                        .HasColumnType("int");

                    b.Property<int?>("Int5")
                        .HasColumnType("int");

                    b.Property<int?>("Int6")
                        .HasColumnType("int");

                    b.Property<int?>("Int7")
                        .HasColumnType("int");

                    b.Property<int?>("Int8")
                        .HasColumnType("int");

                    b.Property<int?>("Int9")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup1")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup10")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup11")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup12")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup13")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup14")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup15")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup16")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup17")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup18")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup19")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup2")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup20")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup3")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup4")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup5")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup6")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup7")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup8")
                        .HasColumnType("int");

                    b.Property<int?>("Lookup9")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TableName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TablePrimaryKeyValue")
                        .HasColumnType("int");

                    b.Property<string>("Text1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text10")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text11")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text12")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text13")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text14")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text15")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text16")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text17")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text18")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text19")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text20")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text6")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text7")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text8")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text9")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("CustomField");
                });

            modelBuilder.Entity("MM.ClientModels.CustomFieldLookUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("FieldIndex")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("CustomFieldLookUp");
                });

            modelBuilder.Entity("MM.ClientModels.CustomFieldName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DataType")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("FieldIndex")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("CustomFieldName");
                });

            modelBuilder.Entity("MM.ClientModels.DateSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("DateSetting");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(4125),
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(5473),
                            Name = "12/03/2020"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6794),
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6829),
                            Name = "03/12/2020"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6852),
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6857),
                            Name = "03.12.2020"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6862),
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6866),
                            Name = "03-12-2020"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6872),
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6876),
                            Name = "03 Dec 2020"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6882),
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6886),
                            Name = "03-Dec-2020"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6892),
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6895),
                            Name = "2020-12-03"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6900),
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6904),
                            Name = "Friday, December 03, 2020"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6909),
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6912),
                            Name = "Fri, December 03, 2020"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6917),
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6921),
                            Name = "December 03, 2020"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6926),
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6930),
                            Name = "03 December 2020"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6934),
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 264, DateTimeKind.Local).AddTicks(6938),
                            Name = "3 Dec 2020"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Designation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Designation");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 270, DateTimeKind.Local).AddTicks(9302),
                            Description = "Operations manager",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(599),
                            Name = "Operations manager"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1694),
                            Description = "Quality control, safety, environmental manager",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1726),
                            Name = "Quality control, safety, environmental manager"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1755),
                            Description = "Accountant, bookkeeper, controller",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1758),
                            Name = "Accountant, bookkeeper, controller"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1764),
                            Description = "Office manager",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1766),
                            Name = "Office manager"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1772),
                            Description = "Receptionist",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1774),
                            Name = "Receptionist"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1780),
                            Description = "Foreperson, supervisor, lead person",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1783),
                            Name = "Foreperson, supervisor, lead person"
                        },
                        new
                        {
                            Id = 7,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1788),
                            Description = "Marketing manager",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1791),
                            Name = "Marketing manager"
                        },
                        new
                        {
                            Id = 8,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1796),
                            Description = "Purchasing manager",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1799),
                            Name = "Purchasing manager"
                        },
                        new
                        {
                            Id = 9,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1804),
                            Description = "Shipping and receiving person or manager",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1806),
                            Name = "Shipping and receiving person or manager"
                        },
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1811),
                            Description = "Professional staff",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1814),
                            Name = "Professional staff"
                        },
                        new
                        {
                            Id = 11,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1819),
                            Description = "Production Manager",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1822),
                            Name = "Production Manager"
                        },
                        new
                        {
                            Id = 12,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1827),
                            Description = "Chief Financial Officer (CFO)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1830),
                            Name = "Chief Financial Officer (CFO)"
                        },
                        new
                        {
                            Id = 13,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1835),
                            Description = "Vice President of Marketing or Marketing Manager",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1838),
                            Name = "Vice President of Marketing or Marketing Manager"
                        },
                        new
                        {
                            Id = 14,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1843),
                            Description = "Chief Operating Officer (COO)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 271, DateTimeKind.Local).AddTicks(1846),
                            Name = "Chief Operating Officer (COO)"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Chief Executive Officer (CEO) or President",
                            Name = "Chief Executive Officer (CEO) or President"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DonatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DonorNotes")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("PromotionDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PromotionDetailId");

                    b.ToTable("Donation");
                });

            modelBuilder.Entity("MM.ClientModels.EmailCcrule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EmailTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailTypeId");

                    b.HasIndex("RoleId");

                    b.ToTable("EmailCCRule");
                });

            modelBuilder.Entity("MM.ClientModels.EmailTemplateContent", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailContent")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4")
                        .HasMaxLength(4000);

                    b.Property<int>("EmailTemplateNameId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EmailTemplateNameId");

                    b.ToTable("EmailTemplateContent");
                });

            modelBuilder.Entity("MM.ClientModels.EmailTemplateName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EmailTemplateName");
                });

            modelBuilder.Entity("MM.ClientModels.EmailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EmailType");
                });

            modelBuilder.Entity("MM.ClientModels.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("MM.ClientModels.EquipmentCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AvaialbleCount")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.ToTable("EquipmentCount");
                });

            modelBuilder.Entity("MM.ClientModels.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<bool>("AllowCancellations")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("AllowGuestRegistrations")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowRegistration")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CancellationbeforeDays")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(2)");

                    b.Property<string>("EventUniqueName")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<int?>("GuestLimitPerRegistrant")
                        .HasColumnType("int");

                    b.Property<bool>("InternalOrExternal")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsChargableEvent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCpdevent")
                        .HasColumnName("IsCPDEvent")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxRegistrationsAllowed")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegEndDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("RegEndTime")
                        .HasColumnType("time(2)");

                    b.Property<DateTime>("RegStartDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("RegStartTime")
                        .HasColumnType("time(2)");

                    b.Property<bool>("ShowMaxRegistrationsAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(2)");

                    b.Property<int>("TimeZoneId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("OrganizerId");

                    b.HasIndex("TimeZoneId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("MM.ClientModels.EventAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("AdminOnly")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("Anyone")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("RestrictedList")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventAccess");
                });

            modelBuilder.Entity("MM.ClientModels.EventAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("SignInTime")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("SingOutTime")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberId");

                    b.ToTable("EventAttendance");
                });

            modelBuilder.Entity("MM.ClientModels.EventCommunication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("Announcement1ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Announcement1Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Announcement1SentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Announcement2ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Announcement2Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Announcement2SentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Announcement3ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Announcement3Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Announcement3SentDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Reminder1ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Reminder1Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Reminder1SentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Reminder2ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Reminder2Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Reminder2SentDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Reminder3ScheduledDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Reminder3Sent")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Reminder3SentDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventCommunication");
                });

            modelBuilder.Entity("MM.ClientModels.EventCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 3)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventCostItemId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("EventCost");
                });

            modelBuilder.Entity("MM.ClientModels.EventCostItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EventCostItem");
                });

            modelBuilder.Entity("MM.ClientModels.EventEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RequiredCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("EventId");

                    b.ToTable("EventEquipment");
                });

            modelBuilder.Entity("MM.ClientModels.EventMinute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssignedTo")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Heading")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Minute")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("MinuteStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RaisedBy")
                        .HasColumnType("int");

                    b.Property<string>("SubHeading")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MinuteStatusId");

                    b.ToTable("EventMinute");
                });

            modelBuilder.Entity("MM.ClientModels.EventMinuteStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("EventMinuteStatus");
                });

            modelBuilder.Entity("MM.ClientModels.EventPreRequisiteEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PreRequisiteEventId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PreRequisiteEventId");

                    b.ToTable("EventPreRequisiteEvent");
                });

            modelBuilder.Entity("MM.ClientModels.EventRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("EventResponseTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<bool>("Paid")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventResponseTypeId");

                    b.HasIndex("MemberId");

                    b.ToTable("EventRegistration");
                });

            modelBuilder.Entity("MM.ClientModels.EventResponseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("EventResponseType");
                });

            modelBuilder.Entity("MM.ClientModels.EventRestrictionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberTeamId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("MemberLevelId");

                    b.HasIndex("MemberTeamId");

                    b.ToTable("EventRestrictionList");
                });

            modelBuilder.Entity("MM.ClientModels.EventRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventRole");
                });

            modelBuilder.Entity("MM.ClientModels.EventRoleUserXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int>("EventRoleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("EventRoleUserXRef");
                });

            modelBuilder.Entity("MM.ClientModels.FileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("FileType");
                });

            modelBuilder.Entity("MM.ClientModels.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 409, DateTimeKind.Local).AddTicks(81),
                            Description = "Male",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 409, DateTimeKind.Local).AddTicks(1127),
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 409, DateTimeKind.Local).AddTicks(2025),
                            Description = "Female",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 409, DateTimeKind.Local).AddTicks(2047),
                            Name = "Female"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 409, DateTimeKind.Local).AddTicks(2065),
                            Description = "Other",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 409, DateTimeKind.Local).AddTicks(2067),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommentsForPayer")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<decimal>("InvoiceAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("InvoiceCode")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InvoiceItem")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("InvoiceStatusId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentGatewayId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceStatusId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PaymentGatewayId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("MM.ClientModels.InvoiceSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("CopyInvToOrgContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CopyRecToOrgContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("NextInvoiceNumber")
                        .HasColumnType("int");

                    b.Property<bool>("SendInvForPendingPayments")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SendRecToPayer")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("InvoiceSetting");
                });

            modelBuilder.Entity("MM.ClientModels.InvoiceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("InvoiceStatus");
                });

            modelBuilder.Entity("MM.ClientModels.LandingPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberTypeId");

                    b.HasIndex("PageId");

                    b.ToTable("LandingPage");
                });

            modelBuilder.Entity("MM.ClientModels.MarketingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MarketingGroup");
                });

            modelBuilder.Entity("MM.ClientModels.MarketingGroupXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MarketingGroupId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MarketingGroupId");

                    b.HasIndex("MemberId");

                    b.ToTable("MarketingGroupXRef");
                });

            modelBuilder.Entity("MM.ClientModels.MarketingProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MarketingProfile");
                });

            modelBuilder.Entity("MM.ClientModels.MarketingProfileXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MarketingProfileId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MarketingProfileId");

                    b.HasIndex("MemberId");

                    b.ToTable("MarketingProfileXRef");
                });

            modelBuilder.Entity("MM.ClientModels.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ConfirmedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<bool>("EmailActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBillingContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBranchContact")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("MemberBranchId")
                        .HasColumnType("int");

                    b.Property<string>("MemberCode")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("MemberLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberTeamId")
                        .HasColumnType("int");

                    b.Property<int>("MemberTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("MembershipConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("NextRenewalDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationStructureId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<byte[]>("Photo")
                        .HasColumnType("blob");

                    b.Property<int?>("ReferralTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("TermAccepted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("MemberBranchId");

                    b.HasIndex("MemberLevelId");

                    b.HasIndex("MemberStatusId");

                    b.HasIndex("MemberTeamId");

                    b.HasIndex("MemberTypeId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationStructureId");

                    b.HasIndex("ReferralTypeId");

                    b.HasIndex("TitleId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("MM.ClientModels.MemberAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("AddressTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("BuidlingName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ComplexName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Gpscoordinates")
                        .HasColumnName("GPSCoordinates")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PrimaryContactNo")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PrimaryEmail")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("SecondaryContactNo")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("SecondaryEmail")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AddressTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("MemberId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("MemberAddress");
                });

            modelBuilder.Entity("MM.ClientModels.MemberAffliationXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AffliatedFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("AffliatedTill")
                        .HasColumnType("datetime");

                    b.Property<int?>("AffliationId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActiveAffliatedNow")
                        .HasColumnName("isActiveAffliatedNow")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("MemberSpecificAffliationName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AffliationId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberAffliationXRef");
                });

            modelBuilder.Entity("MM.ClientModels.MemberBankingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<string>("BankName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("RoutingCode")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberBankingDetail");
                });

            modelBuilder.Entity("MM.ClientModels.MemberBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("MemberBranch");
                });

            modelBuilder.Entity("MM.ClientModels.MemberCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MemberCategory");
                });

            modelBuilder.Entity("MM.ClientModels.MemberCodeGenerator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CodeGenerationRule")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("LastNumber")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Prefix")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Suffix")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("MemberCodeGenerator");
                });

            modelBuilder.Entity("MM.ClientModels.MemberCommunicationPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CommunicationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan?>("PreferredTimeFrom")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan?>("PreferredTimeTo")
                        .HasColumnType("time(6)");

                    b.HasKey("Id");

                    b.HasIndex("CommunicationTypeId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberCommunicationPreference");
                });

            modelBuilder.Entity("MM.ClientModels.MemberFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberFile");
                });

            modelBuilder.Entity("MM.ClientModels.MemberLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MemberLevel");
                });

            modelBuilder.Entity("MM.ClientModels.MemberLoginAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LoginTime")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MemberLoginAudit");
                });

            modelBuilder.Entity("MM.ClientModels.MemberPlanHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsCurrentPlan")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("MemberPlanDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberPlanDetailId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("MemberPlanHistory");
                });

            modelBuilder.Entity("MM.ClientModels.MemberQualificationXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("MemberSpecificQualificationName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("QualificationFrom")
                        .HasColumnType("datetime");

                    b.Property<int?>("QualificationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("QualificationTill")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("QualificationId");

                    b.ToTable("MemberQualificationXRef");
                });

            modelBuilder.Entity("MM.ClientModels.MemberStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MemberStatus");
                });

            modelBuilder.Entity("MM.ClientModels.MemberTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("MemberTeam");
                });

            modelBuilder.Entity("MM.ClientModels.MemberType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("MemberCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("MemberCategoryId");

                    b.ToTable("MemberType");
                });

            modelBuilder.Entity("MM.ClientModels.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Acronym")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("WebSite")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("MM.ClientModels.OrganizationStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("LevelOfMember")
                        .HasColumnType("int");

                    b.Property<int>("MaximumNumber")
                        .HasColumnType("int");

                    b.Property<int?>("MaximumTimeInYears")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool?>("ShowMaximumTimeInYears")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("OrganizationStructure");
                });

            modelBuilder.Entity("MM.ClientModels.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Page");
                });

            modelBuilder.Entity("MM.ClientModels.PayPalConnectionMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PayPalConnectionMode");
                });

            modelBuilder.Entity("MM.ClientModels.PayPalPreferredPaymentGateway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PayPalPreferredPaymentGateway");
                });

            modelBuilder.Entity("MM.ClientModels.PaymentCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PaymentCard");
                });

            modelBuilder.Entity("MM.ClientModels.PaymentGateway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClientApicodeForMerchant")
                        .HasColumnName("ClientAPICodeForMerchant")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ClientIdForMerchant")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ClientPasswordForMerchant")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<decimal?>("CommisionPercentage")
                        .HasColumnType("decimal(6, 3)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("MerchantLocation")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("MerchantName")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("MerchantNumber")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PaymentGateway");
                });

            modelBuilder.Entity("MM.ClientModels.PaymentSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApplicationInstructions")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<int?>("ClientPayPalConnectionModeId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultCountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("EventsInstructions")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<string>("GeneralInstructions")
                        .HasColumnType("varchar(2000) CHARACTER SET utf8mb4")
                        .HasMaxLength(2000);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("PayPalAccountId")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("PayPalApipassword")
                        .HasColumnName("PayPalAPIPassword")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PayPalApisignature")
                        .HasColumnName("PayPalAPISignature")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("PayPalApiuserName")
                        .HasColumnName("PayPalAPIUserName")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("PayPalPdtidentityToken")
                        .HasColumnName("PayPalPDTIdentityToken")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("PayPalPreferredPaymentGatewayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("PaymentSetting");
                });

            modelBuilder.Entity("MM.ClientModels.PaymentSettingAllowedCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentCardId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentSettingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentCardId");

                    b.HasIndex("PaymentSettingId");

                    b.ToTable("PaymentSettingAllowedCard");
                });

            modelBuilder.Entity("MM.ClientModels.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 550, DateTimeKind.Local).AddTicks(3764),
                            Description = "Can create new contacts, modify all existing ones  ",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 550, DateTimeKind.Local).AddTicks(4828),
                            Name = "Membership manager"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 550, DateTimeKind.Local).AddTicks(6185),
                            Description = "Can create and manage all events",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 550, DateTimeKind.Local).AddTicks(6213),
                            Name = "Event manager"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 550, DateTimeKind.Local).AddTicks(6232),
                            Description = "Can manage all donations",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 550, DateTimeKind.Local).AddTicks(6234),
                            Name = "Donations manager"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 550, DateTimeKind.Local).AddTicks(6237),
                            Description = "Can send manual emails (e.g. newsletters)",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 550, DateTimeKind.Local).AddTicks(6240),
                            Name = "Newsletter manager"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 550, DateTimeKind.Local).AddTicks(6243),
                            Description = "Can modify your website pages. With this option selected, you can provide access to all pages on your site or to selected pages. When you grant access to a page, you automatically grant access to all of its child or sub pages.",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 550, DateTimeKind.Local).AddTicks(6244),
                            Name = "Website editor"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.PlanCanChangeToXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("FromPlanMasterId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("ToPlanMasterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromPlanMasterId");

                    b.HasIndex("ToPlanMasterId");

                    b.ToTable("PlanCanChangeToXref");
                });

            modelBuilder.Entity("MM.ClientModels.PlanDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PlanFrequencyId")
                        .HasColumnType("int");

                    b.Property<int>("PlanMasterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PlanFrequencyId");

                    b.HasIndex("PlanMasterId");

                    b.ToTable("PlanDetail");
                });

            modelBuilder.Entity("MM.ClientModels.PlanFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("PlanFrequency");
                });

            modelBuilder.Entity("MM.ClientModels.PlanMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("ApplyTaxSettings")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanPublicApply")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool?>("IsLimited")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LimitToMemberCount")
                        .HasColumnType("int");

                    b.Property<int>("MemberCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberCategoryId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("PlanMaster");
                });

            modelBuilder.Entity("MM.ClientModels.PromotionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(9, 3)");

                    b.Property<int?>("MemberLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("MemberTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PromotionMasterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberLevelId");

                    b.HasIndex("MemberTypeId");

                    b.HasIndex("PromotionMasterId");

                    b.ToTable("PromotionDetail");
                });

            modelBuilder.Entity("MM.ClientModels.PromotionMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BenefitEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("BenefitStartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("IsActive")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("PromotionMaster");
                });

            modelBuilder.Entity("MM.ClientModels.PromotionResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PromotionMasterId")
                        .HasColumnType("int");

                    b.Property<int>("PromotionResponseType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ResponseDate")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PromotionMasterId");

                    b.HasIndex("PromotionResponseType");

                    b.ToTable("PromotionResponse");
                });

            modelBuilder.Entity("MM.ClientModels.PromotionResponseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("PromotionResponseType");
                });

            modelBuilder.Entity("MM.ClientModels.Qualification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Qualification");
                });

            modelBuilder.Entity("MM.ClientModels.ReferralType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ReferralType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 591, DateTimeKind.Local).AddTicks(5448),
                            Description = "Google",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 591, DateTimeKind.Local).AddTicks(6657),
                            Name = "Google"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 591, DateTimeKind.Local).AddTicks(7561),
                            Description = "Facebook",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 591, DateTimeKind.Local).AddTicks(7674),
                            Name = "Facebook"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 591, DateTimeKind.Local).AddTicks(7692),
                            Description = "Twitter",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 591, DateTimeKind.Local).AddTicks(7694),
                            Name = "Twitter"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 591, DateTimeKind.Local).AddTicks(7698),
                            Description = "TV",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 591, DateTimeKind.Local).AddTicks(7699),
                            Name = "TV"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 591, DateTimeKind.Local).AddTicks(7704),
                            Description = "Friends",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 591, DateTimeKind.Local).AddTicks(7705),
                            Name = "Friends"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 591, DateTimeKind.Local).AddTicks(7709),
                            Description = "Other",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 591, DateTimeKind.Local).AddTicks(7710),
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Refund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommentsForPayer")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("InternalNotes")
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("PaymentGatewayId")
                        .HasColumnType("int");

                    b.Property<decimal>("RefundAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("RefundDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RefundItem")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PaymentGatewayId");

                    b.HasIndex("RelatedToId");

                    b.ToTable("Refund");
                });

            modelBuilder.Entity("MM.ClientModels.RelatedTo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("RelatedTo");
                });

            modelBuilder.Entity("MM.ClientModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 618, DateTimeKind.Local).AddTicks(3333),
                            Description = "Select this option to remove admin access for existing administrators  ",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 618, DateTimeKind.Local).AddTicks(4688),
                            Name = "No administrative privileges"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 618, DateTimeKind.Local).AddTicks(6298),
                            Description = "Grants full access to all administrative functions. Take care when granting this level of access since full admins can delete other admins and even the entire site.",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 618, DateTimeKind.Local).AddTicks(6330),
                            Name = "Account administrator"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 618, DateTimeKind.Local).AddTicks(6355),
                            Description = "Allows viewing of everything in the admin backend without being able to make any changes.  ",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 618, DateTimeKind.Local).AddTicks(6358),
                            Name = "Account administrator (Read-only access)"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 618, DateTimeKind.Local).AddTicks(6365),
                            Description = "Provides administrative access to selected Wild Apricot modules. Use this option if you have dedicated personnel in charge of events, memberships, editing webpages, or managing donations. With this option selected, you can limit access to selected Functions",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 618, DateTimeKind.Local).AddTicks(6368),
                            Name = "Limited administrator"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.RolePermissionXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("Permissionid")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Permissionid");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissionXRef");
                });

            modelBuilder.Entity("MM.ClientModels.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("MM.ClientModels.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int>("RelatedRecordId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("MM.ClientModels.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Tax");
                });

            modelBuilder.Entity("MM.ClientModels.TaxPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("TaxPolicy");
                });

            modelBuilder.Entity("MM.ClientModels.TaxScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("TaxScopeCode")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TaxScope");
                });

            modelBuilder.Entity("MM.ClientModels.Theme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("ThemeNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Theme");
                });

            modelBuilder.Entity("MM.ClientModels.TimeFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TimeFormat");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 636, DateTimeKind.Local).AddTicks(7986),
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 636, DateTimeKind.Local).AddTicks(8931),
                            Name = "12:00 AM/PM"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 636, DateTimeKind.Local).AddTicks(9823),
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 636, DateTimeKind.Local).AddTicks(9843),
                            Name = "24 Hours"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Title");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 656, DateTimeKind.Local).AddTicks(6849),
                            Description = "Mr",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 656, DateTimeKind.Local).AddTicks(8339),
                            Name = "Mr"
                        },
                        new
                        {
                            Id = 20,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 657, DateTimeKind.Local).AddTicks(84),
                            Description = "Mrs",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 657, DateTimeKind.Local).AddTicks(123),
                            Name = "Mrs"
                        },
                        new
                        {
                            Id = 30,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 657, DateTimeKind.Local).AddTicks(149),
                            Description = "Ms",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 657, DateTimeKind.Local).AddTicks(152),
                            Name = "Ms"
                        },
                        new
                        {
                            Id = 40,
                            CreatedOn = new DateTime(2020, 7, 12, 16, 9, 56, 657, DateTimeKind.Local).AddTicks(158),
                            Description = "Dr",
                            ModifiedOn = new DateTime(2020, 7, 12, 16, 9, 56, 657, DateTimeKind.Local).AddTicks(161),
                            Name = "Dr"
                        });
                });

            modelBuilder.Entity("MM.ClientModels.UserLoginAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LoginTime")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserLoginAudit");
                });

            modelBuilder.Entity("MM.ClientModels.UserRoleXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleXRef");
                });

            modelBuilder.Entity("MM.ClientModels.Address", b =>
                {
                    b.HasOne("MM.ClientModels.AddressType", "AddressType")
                        .WithMany("Address")
                        .HasForeignKey("AddressTypeId")
                        .HasConstraintName("FK_Address_AddressType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.City", "City")
                        .WithMany("Address")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Address_City");

                    b.HasOne("MM.ClientModels.Country", "Country")
                        .WithMany("Address")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_Address_Country")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.State", "State")
                        .WithMany("Address")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_Address_State")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.BankingDetail", b =>
                {
                    b.HasOne("MM.ClientModels.AccountType", "AccountType")
                        .WithMany("BankingDetail")
                        .HasForeignKey("AccountTypeId")
                        .HasConstraintName("FK_BankingDetail_AccountType")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.Billing", b =>
                {
                    b.HasOne("MM.ClientModels.Invoice", "Invoice")
                        .WithMany("Billing")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_Payment_Invoice");

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("Billing")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Payment_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PaymentGateway", "PaymentGateway")
                        .WithMany("Billing")
                        .HasForeignKey("PaymentGatewayId")
                        .HasConstraintName("FK_Payment_PaymentGateway")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("Billing")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_Billing_RelatedTo")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.BillingCommunication", b =>
                {
                    b.HasOne("MM.ClientModels.Billing", "Billing")
                        .WithOne("BillingCommunication")
                        .HasForeignKey("MM.ClientModels.BillingCommunication", "Id")
                        .HasConstraintName("FK_PaymentCommunication_Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.City", b =>
                {
                    b.HasOne("MM.ClientModels.State", "State")
                        .WithMany("City")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_City_State");
                });

            modelBuilder.Entity("MM.ClientModels.ClientOrganization", b =>
                {
                    b.HasOne("MM.ClientModels.ClientTimeZone", "ClientTimeZone")
                        .WithMany("Client")
                        .HasForeignKey("ClientTimeZoneId")
                        .HasConstraintName("FK_Client_TimeZone");

                    b.HasOne("MM.ClientModels.Currency", "Currency")
                        .WithMany("Client")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_Client_Currency");

                    b.HasOne("MM.ClientModels.DateSetting", "DateSetting")
                        .WithMany("Client")
                        .HasForeignKey("DateSettingId")
                        .HasConstraintName("FK_Client_DateSetting");

                    b.HasOne("MM.ClientModels.TimeFormat", "TimeFormat")
                        .WithMany("Client")
                        .HasForeignKey("TimeFormatId")
                        .HasConstraintName("FK_Client_TimeFormat");
                });

            modelBuilder.Entity("MM.ClientModels.ClientPlanHistory", b =>
                {
                    b.HasOne("MM.ClientModels.ClientUser", "BillingUser")
                        .WithMany("ClientPlanHistory")
                        .HasForeignKey("BillingUserId")
                        .HasConstraintName("FK_ClientPlanHistory_User")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.ClientUser", b =>
                {
                    b.HasOne("MM.ClientModels.Designation", "Designation")
                        .WithMany("User")
                        .HasForeignKey("DesignationId")
                        .HasConstraintName("FK_User_Designation");

                    b.HasOne("MM.ClientModels.Gender", "Gender")
                        .WithMany("User")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_User_Gender")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.ReferralType", "ReferralType")
                        .WithMany("User")
                        .HasForeignKey("ReferralTypeId")
                        .HasConstraintName("FK_User_ReferralType");

                    b.HasOne("MM.ClientModels.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_User_Role")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Title", "Title")
                        .WithMany("User")
                        .HasForeignKey("TitleId")
                        .HasConstraintName("FK_User_Title")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.CommunicationPreference", b =>
                {
                    b.HasOne("MM.ClientModels.CommunicationType", "CommunicationType")
                        .WithMany("CommunicationPreference")
                        .HasForeignKey("CommunicationTypeId")
                        .HasConstraintName("FK_CommunicationPreference_CommunicationType")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.Cpd", b =>
                {
                    b.HasOne("MM.ClientModels.ClientUser", "CpdawardedBy")
                        .WithMany("Cpd")
                        .HasForeignKey("CpdawardedById")
                        .HasConstraintName("FK_CPD_User")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("Cpd")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_CPD_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("Cpd")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_CPD_RelatedTo")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.CpdmemberCategorySetUp", b =>
                {
                    b.HasOne("MM.ClientModels.MemberCategory", "MemberCategory")
                        .WithMany("CpdmemberCategorySetUp")
                        .HasForeignKey("MemberCategoryId")
                        .HasConstraintName("FK_CPDMemberCategorySetUp_MemberCategory");

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("CpdmemberCategorySetUp")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_CPDMemberCategorySetUp_RelatedTo")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.CpdmemberLevelSetUp", b =>
                {
                    b.HasOne("MM.ClientModels.MemberLevel", "MemberLevel")
                        .WithMany("CpdmemberLevelSetUp")
                        .HasForeignKey("MemberLevelId")
                        .HasConstraintName("FK_CPDMemberLevelSetUp_MemberLevel");

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("CpdmemberLevelSetUp")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_CPDMemberLevelSetUp_RelatedTo")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.CpdmemberTeamSetUp", b =>
                {
                    b.HasOne("MM.ClientModels.MemberTeam", "MemberTeam")
                        .WithMany("CpdmemberTeamSetUp")
                        .HasForeignKey("MemberTeamId")
                        .HasConstraintName("FK_CPDMemberTeamSetUp_MemberTeam");

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("CpdmemberTeamSetUp")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_CPDMemberTeamSetUp_RelatedTo")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.CpdmemberTypeSetUp", b =>
                {
                    b.HasOne("MM.ClientModels.MemberType", "MemberType")
                        .WithMany("CpdmemberTypeSetUp")
                        .HasForeignKey("MemberTypeId")
                        .HasConstraintName("FK_CPDMemberTypeSetUp_MemberType");

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("CpdmemberTypeSetUp")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_CPDMemberTypeSetUp_RelatedTo")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.Donation", b =>
                {
                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("Donation")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Donation_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PromotionDetail", "PromotionDetail")
                        .WithMany("Donation")
                        .HasForeignKey("PromotionDetailId")
                        .HasConstraintName("FK_Donation_PromotionDetail");
                });

            modelBuilder.Entity("MM.ClientModels.EmailCcrule", b =>
                {
                    b.HasOne("MM.ClientModels.EmailType", "EmailType")
                        .WithMany("EmailCcrule")
                        .HasForeignKey("EmailTypeId")
                        .HasConstraintName("FK_EmailCCRule_EmailType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Role", "Role")
                        .WithMany("EmailCcrule")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_EmailCCRule_Role")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EmailTemplateContent", b =>
                {
                    b.HasOne("MM.ClientModels.EmailTemplateName", "EmailTemplateName")
                        .WithMany("EmailTemplateContent")
                        .HasForeignKey("EmailTemplateNameId")
                        .HasConstraintName("FK_EmailTemplateContent_EmailTemplateName")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EquipmentCount", b =>
                {
                    b.HasOne("MM.ClientModels.Equipment", "Equipment")
                        .WithMany("EquipmentCount")
                        .HasForeignKey("EquipmentId")
                        .HasConstraintName("FK_EquipmentCount_Equipment")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.Event", b =>
                {
                    b.HasOne("MM.ClientModels.Address", "Address")
                        .WithMany("Event")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Event_Address")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.ClientUser", "Organizer")
                        .WithMany("Event")
                        .HasForeignKey("OrganizerId")
                        .HasConstraintName("FK_Event_User")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.ClientTimeZone", "TimeZone")
                        .WithMany("Event")
                        .HasForeignKey("TimeZoneId")
                        .HasConstraintName("FK_Event_TimeZone")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventAccess", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventAccess")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventAccess_Event")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventAttendance", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventAttendance")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventAttendance_Event")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("EventAttendance")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_EventAttendance_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventCommunication", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventCommunication")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventCommunication_Event")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventEquipment", b =>
                {
                    b.HasOne("MM.ClientModels.Equipment", "Equipment")
                        .WithMany("EventEquipment")
                        .HasForeignKey("EquipmentId")
                        .HasConstraintName("FK_EventEquipmentRequirement_Equipment")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventEquipment")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventEquipmentRequirement_Event")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventMinute", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventMinute")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventMinute_Event")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.EventMinuteStatus", "MinuteStatus")
                        .WithMany("EventMinute")
                        .HasForeignKey("MinuteStatusId")
                        .HasConstraintName("FK_EventMinute_EventMinuteStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventPreRequisiteEvent", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventPreRequisiteEventEvent")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventPreRequisiteEvent_Event")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Event", "PreRequisiteEvent")
                        .WithMany("EventPreRequisiteEventPreRequisiteEvent")
                        .HasForeignKey("PreRequisiteEventId")
                        .HasConstraintName("FK_EventPreRequisiteEvent_PreRequisiteEventId_Event")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventRegistration", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventRegistration")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventRegistration_Event")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.EventResponseType", "EventResponseType")
                        .WithMany("EventRegistration")
                        .HasForeignKey("EventResponseTypeId")
                        .HasConstraintName("FK_EventRegistration_EventResponseType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("EventRegistration")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_EventRegistration_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventRestrictionList", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventRestrictionList")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventRestrictionList_Event")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.MemberLevel", "MemberLevel")
                        .WithMany("EventRestrictionList")
                        .HasForeignKey("MemberLevelId")
                        .HasConstraintName("FK_EventRestrictionList_MemberLevel");

                    b.HasOne("MM.ClientModels.MemberTeam", "MemberTeam")
                        .WithMany("EventRestrictionList")
                        .HasForeignKey("MemberTeamId")
                        .HasConstraintName("FK_EventRestrictionList_MemberTeam");
                });

            modelBuilder.Entity("MM.ClientModels.EventRole", b =>
                {
                    b.HasOne("MM.ClientModels.Event", "Event")
                        .WithMany("EventRole")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_EventRole_Event")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.EventRoleUserXref", b =>
                {
                    b.HasOne("MM.ClientModels.EventRole", "EventRole")
                        .WithMany("EventRoleUserXref")
                        .HasForeignKey("EventRoleId")
                        .HasConstraintName("FK_EventRoleUserXRef_EventRole")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.ClientUser", "User")
                        .WithMany("EventRoleUserXref")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_EventRoleUserXRef_User")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.Invoice", b =>
                {
                    b.HasOne("MM.ClientModels.InvoiceStatus", "InvoiceStatus")
                        .WithMany("Invoice")
                        .HasForeignKey("InvoiceStatusId")
                        .HasConstraintName("FK_Invoice_InvoiceStatus")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("Invoice")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Invoice_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PaymentGateway", "PaymentGateway")
                        .WithMany("Invoice")
                        .HasForeignKey("PaymentGatewayId")
                        .HasConstraintName("FK_Invoice_PaymentGateway")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("Invoice")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_Invoice_RelatedTo");
                });

            modelBuilder.Entity("MM.ClientModels.LandingPage", b =>
                {
                    b.HasOne("MM.ClientModels.MemberType", "MemberType")
                        .WithMany("LandingPage")
                        .HasForeignKey("MemberTypeId")
                        .HasConstraintName("FK_LandingPage_MemberType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Page", "Page")
                        .WithMany("LandingPage")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_LandingPage_Page")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.MarketingGroupXref", b =>
                {
                    b.HasOne("MM.ClientModels.MarketingGroup", "MarketingGroup")
                        .WithMany("MarketingGroupXref")
                        .HasForeignKey("MarketingGroupId")
                        .HasConstraintName("FK_MarketingGroupXRef_MarketingGroup")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("MarketingGroupXref")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MarketingGroupXRef_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.MarketingProfileXref", b =>
                {
                    b.HasOne("MM.ClientModels.MarketingProfile", "MarketingProfile")
                        .WithMany("MarketingProfileXref")
                        .HasForeignKey("MarketingProfileId")
                        .HasConstraintName("FK_MarketingProfileXRef_MarketingProfile")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("MarketingProfileXref")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MarketingProfileXRef_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.Member", b =>
                {
                    b.HasOne("MM.ClientModels.Gender", "Gender")
                        .WithMany("Member")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_Member_Gender")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.MemberBranch", "MemberBranch")
                        .WithMany("Member")
                        .HasForeignKey("MemberBranchId")
                        .HasConstraintName("FK_Member_MemberBranch");

                    b.HasOne("MM.ClientModels.MemberLevel", "MemberLevel")
                        .WithMany("Member")
                        .HasForeignKey("MemberLevelId")
                        .HasConstraintName("FK_Member_MemberLevel");

                    b.HasOne("MM.ClientModels.MemberStatus", "MemberStatus")
                        .WithMany("Member")
                        .HasForeignKey("MemberStatusId")
                        .HasConstraintName("FK_Member_MemberStatus");

                    b.HasOne("MM.ClientModels.MemberTeam", "MemberTeam")
                        .WithMany("Member")
                        .HasForeignKey("MemberTeamId")
                        .HasConstraintName("FK_Member_MemberTeam");

                    b.HasOne("MM.ClientModels.MemberType", "MemberType")
                        .WithMany("Member")
                        .HasForeignKey("MemberTypeId")
                        .HasConstraintName("FK_Member_MemberType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Organization", "Organization")
                        .WithMany("Member")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_Member_Organization");

                    b.HasOne("MM.ClientModels.OrganizationStructure", "OrganizationStructure")
                        .WithMany("Member")
                        .HasForeignKey("OrganizationStructureId")
                        .HasConstraintName("FK_Member_OrganizationStructure");

                    b.HasOne("MM.ClientModels.ReferralType", "ReferralType")
                        .WithMany("Member")
                        .HasForeignKey("ReferralTypeId")
                        .HasConstraintName("FK_Member_ReferralType");

                    b.HasOne("MM.ClientModels.Title", "Title")
                        .WithMany("Member")
                        .HasForeignKey("TitleId")
                        .HasConstraintName("FK_Member_Title")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.MemberAddress", b =>
                {
                    b.HasOne("MM.ClientModels.AddressType", "AddressType")
                        .WithMany("MemberAddress")
                        .HasForeignKey("AddressTypeId")
                        .HasConstraintName("FK_MemberAddress_AddressType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.MemberBranch", "Branch")
                        .WithMany("MemberAddress")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("FK_MemberAddress_MemberBranch");

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("MemberAddress")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MemberAddress_Member");

                    b.HasOne("MM.ClientModels.Organization", "Organization")
                        .WithMany("MemberAddress")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_MemberAddress_Organization");
                });

            modelBuilder.Entity("MM.ClientModels.MemberAffliationXref", b =>
                {
                    b.HasOne("MM.ClientModels.Affliation", "Affliation")
                        .WithMany("MemberAffliationXref")
                        .HasForeignKey("AffliationId")
                        .HasConstraintName("FK_MemberAffliationXRef_Affliation");

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("MemberAffliationXref")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MemberAffliationXRef_Member");
                });

            modelBuilder.Entity("MM.ClientModels.MemberBankingDetail", b =>
                {
                    b.HasOne("MM.ClientModels.AccountType", "AccountType")
                        .WithMany("MemberBankingDetail")
                        .HasForeignKey("AccountTypeId")
                        .HasConstraintName("FK_MemberBankingDetail_AccountType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("MemberBankingDetail")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MemberBankingDetail_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.MemberBranch", b =>
                {
                    b.HasOne("MM.ClientModels.Organization", "Organization")
                        .WithMany("MemberBranch")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_MemberBranch_Organization")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.MemberCommunicationPreference", b =>
                {
                    b.HasOne("MM.ClientModels.CommunicationType", "CommunicationType")
                        .WithMany("MemberCommunicationPreference")
                        .HasForeignKey("CommunicationTypeId")
                        .HasConstraintName("FK_MemberCommunicationPreference_CommunicationType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("MemberCommunicationPreference")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MemberCommunicationPreference_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.MemberFile", b =>
                {
                    b.HasOne("MM.ClientModels.FileType", "FileType")
                        .WithMany("MemberFile")
                        .HasForeignKey("FileTypeId")
                        .HasConstraintName("FK_MemberFile_FileType")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("MemberFile")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MemberFile_Member")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.MemberPlanHistory", b =>
                {
                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("MemberPlanHistory")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MembershipHistory_Member");

                    b.HasOne("MM.ClientModels.PlanDetail", "MemberPlanDetail")
                        .WithMany("MemberPlanHistory")
                        .HasForeignKey("MemberPlanDetailId")
                        .HasConstraintName("FK_MemberPlanHistory_PlanDetail")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PlanMaster", "MemberPlanDetailNavigation")
                        .WithMany("MemberPlanHistory")
                        .HasForeignKey("MemberPlanDetailId")
                        .HasConstraintName("FK_MembershipHistory_PlanMaster")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Organization", "Organization")
                        .WithMany("MemberPlanHistory")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("FK_MembershipHistory_Organization");
                });

            modelBuilder.Entity("MM.ClientModels.MemberQualificationXref", b =>
                {
                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("MemberQualificationXref")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MemberQualificationXRef_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Qualification", "Qualification")
                        .WithMany("MemberQualificationXref")
                        .HasForeignKey("QualificationId")
                        .HasConstraintName("FK_MemberQualificationXRef_Qualification");
                });

            modelBuilder.Entity("MM.ClientModels.MemberType", b =>
                {
                    b.HasOne("MM.ClientModels.MemberCategory", "MemberCategory")
                        .WithMany("MemberType")
                        .HasForeignKey("MemberCategoryId")
                        .HasConstraintName("FK_MemberType_MemberCategory")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.PaymentSetting", b =>
                {
                    b.HasOne("MM.ClientModels.Currency", "Currency")
                        .WithMany("PaymentSetting")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_PaymentSetting_Currency");
                });

            modelBuilder.Entity("MM.ClientModels.PaymentSettingAllowedCard", b =>
                {
                    b.HasOne("MM.ClientModels.PaymentCard", "PaymentCard")
                        .WithMany("PaymentSettingAllowedCard")
                        .HasForeignKey("PaymentCardId")
                        .HasConstraintName("FK_PaymentSettingAllowedCard_PaymentCard")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PaymentSetting", "PaymentSetting")
                        .WithMany("PaymentSettingAllowedCard")
                        .HasForeignKey("PaymentSettingId")
                        .HasConstraintName("FK_PaymentSettingAllowedCard_PaymentSetting")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.PlanCanChangeToXref", b =>
                {
                    b.HasOne("MM.ClientModels.PlanMaster", "FromPlanMaster")
                        .WithMany("PlanCanChangeToXrefFromPlanMaster")
                        .HasForeignKey("FromPlanMasterId")
                        .HasConstraintName("FK_MemberPlanCanChangeTo_PlanMaster")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PlanMaster", "ToPlanMaster")
                        .WithMany("PlanCanChangeToXrefToPlanMaster")
                        .HasForeignKey("ToPlanMasterId")
                        .HasConstraintName("FK_MemberPlanCanChangeTo_PlanMaster2")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.PlanDetail", b =>
                {
                    b.HasOne("MM.ClientModels.Currency", "Currency")
                        .WithMany("PlanDetail")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_PlanDetail_Currency")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PlanFrequency", "PlanFrequency")
                        .WithMany("PlanDetail")
                        .HasForeignKey("PlanFrequencyId")
                        .HasConstraintName("FK_PlanDetail_PlanFrequency")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PlanMaster", "PlanMaster")
                        .WithMany("PlanDetail")
                        .HasForeignKey("PlanMasterId")
                        .HasConstraintName("FK_PlanDetail_PlanMaster")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.PlanMaster", b =>
                {
                    b.HasOne("MM.ClientModels.MemberCategory", "MemberCategory")
                        .WithMany("PlanMaster")
                        .HasForeignKey("MemberCategoryId")
                        .HasConstraintName("FK_PlanMaster_MemberCategory")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PaymentSetting", "PaymentMethod")
                        .WithMany("PlanMaster")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK_PlanMaster_PaymentSetting")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.PromotionDetail", b =>
                {
                    b.HasOne("MM.ClientModels.MemberLevel", "MemberLevel")
                        .WithMany("PromotionDetail")
                        .HasForeignKey("MemberLevelId")
                        .HasConstraintName("FK_PromotionDetail_MemberLevel");

                    b.HasOne("MM.ClientModels.MemberType", "MemberType")
                        .WithMany("PromotionDetail")
                        .HasForeignKey("MemberTypeId")
                        .HasConstraintName("FK_PromotionDetail_MemberType");

                    b.HasOne("MM.ClientModels.PromotionMaster", "PromotionMaster")
                        .WithMany("PromotionDetail")
                        .HasForeignKey("PromotionMasterId")
                        .HasConstraintName("FK_PromotionDetail_PromotionMaster")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.PromotionResponse", b =>
                {
                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("PromotionResponse")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_PromotionResponse_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PromotionMaster", "PromotionMaster")
                        .WithMany("PromotionResponse")
                        .HasForeignKey("PromotionMasterId")
                        .HasConstraintName("FK_PromotionResponse_PromotionMaster")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PromotionResponseType", "PromotionResponseTypeNavigation")
                        .WithMany("PromotionResponse")
                        .HasForeignKey("PromotionResponseType")
                        .HasConstraintName("FK_PromotionResponse_PromotionResponseType")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.Refund", b =>
                {
                    b.HasOne("MM.ClientModels.Member", "Member")
                        .WithMany("Refund")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Refund_Member")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.PaymentGateway", "PaymentGateway")
                        .WithMany("Refund")
                        .HasForeignKey("PaymentGatewayId")
                        .HasConstraintName("FK_Refund_PaymentGateway")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.RelatedTo", "RelatedTo")
                        .WithMany("Refund")
                        .HasForeignKey("RelatedToId")
                        .HasConstraintName("FK_Refund_RelatedTo");
                });

            modelBuilder.Entity("MM.ClientModels.RolePermissionXref", b =>
                {
                    b.HasOne("MM.ClientModels.Permission", "Permission")
                        .WithMany("RolePermissionXref")
                        .HasForeignKey("Permissionid")
                        .HasConstraintName("FK_RolePermissionXRef_Permission")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.Role", "Role")
                        .WithMany("RolePermissionXref")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_RolePermissionXRef_Role")
                        .IsRequired();
                });

            modelBuilder.Entity("MM.ClientModels.State", b =>
                {
                    b.HasOne("MM.ClientModels.Country", "Country")
                        .WithMany("State")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK_State_Country");
                });

            modelBuilder.Entity("MM.ClientModels.UserRoleXref", b =>
                {
                    b.HasOne("MM.ClientModels.Role", "Role")
                        .WithMany("UserRoleXref")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserRole_Role")
                        .IsRequired();

                    b.HasOne("MM.ClientModels.ClientUser", "User")
                        .WithMany("UserRoleXref")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserRole_User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
